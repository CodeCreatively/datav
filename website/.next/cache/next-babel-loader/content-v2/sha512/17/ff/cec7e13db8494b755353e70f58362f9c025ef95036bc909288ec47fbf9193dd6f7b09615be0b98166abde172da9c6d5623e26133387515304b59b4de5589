{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/sunfei/Downloads/website/src/components/sidebar/sidebar.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Badge, Box, Center, chakra, Flex, List, ListItem, Stack, useColorModeValue } from \"@chakra-ui/react\";\nimport { useRouter } from \"next/router\";\nimport * as React from \"react\";\nimport SidebarCategory from \"./sidebar-category\";\nimport SidebarLink from \"./sidebar-link\";\nimport NextLink from \"next/link\";\nimport { BlogIcon, DocsIcon, GuidesIcon, TeamIcon, ResourcesIcon } from \"./sidebar-icons\";\nimport _ from \"lodash\";\nexport function SidebarContent(props) {\n  const {\n    routes,\n    pathname,\n    contentRef\n  } = props;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: routes.map((lvl1, idx) => {\n      return /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [lvl1.heading && /*#__PURE__*/_jsxDEV(chakra.h4, {\n          fontSize: \"sm\",\n          fontWeight: \"bold\",\n          my: \"1.25rem\",\n          textTransform: \"uppercase\",\n          letterSpacing: \"wider\",\n          color: useColorModeValue(\"gray.700\", \"inherit\"),\n          children: lvl1.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 15\n        }, this), lvl1.routes.map((lvl2, index) => {\n          if (!lvl2.routes) {\n            return /*#__PURE__*/_jsxDEV(SidebarLink, {\n              ml: \"-3\",\n              mt: \"2\",\n              href: lvl2.path,\n              children: lvl2.title\n            }, lvl2.path, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 19\n            }, this);\n          }\n\n          const selected = pathname.startsWith(lvl2.path);\n          const opened = selected || lvl2.open;\n          const sortedRoutes = !!lvl2.sort ? _.sortBy(lvl2.routes, i => i.title) : lvl2.routes;\n          return /*#__PURE__*/_jsxDEV(SidebarCategory, {\n            contentRef: contentRef,\n            title: lvl2.title,\n            selected: selected,\n            opened: opened,\n            children: /*#__PURE__*/_jsxDEV(Stack, {\n              as: \"ul\",\n              children: sortedRoutes.map(lvl3 => /*#__PURE__*/_jsxDEV(SidebarLink, {\n                as: \"li\",\n                href: lvl3.path,\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  children: lvl3.title\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 80,\n                  columnNumber: 25\n                }, this), lvl3.new && /*#__PURE__*/_jsxDEV(Badge, {\n                  ml: \"2\",\n                  lineHeight: \"tall\",\n                  fontSize: \"10px\",\n                  variant: \"solid\",\n                  colorScheme: \"purple\",\n                  children: \"New\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 82,\n                  columnNumber: 27\n                }, this)]\n              }, lvl3.path, true, {\n                fileName: _jsxFileName,\n                lineNumber: 79,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 19\n            }, this)\n          }, lvl2.path + index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 17\n          }, this);\n        })]\n      }, idx, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false);\n}\n\nconst MainNavLink = ({\n  href,\n  icon,\n  children\n}) => {\n  const {\n    pathname\n  } = useRouter();\n  const [, group] = href.split(\"/\");\n  const active = pathname.includes(group);\n  const linkColor = useColorModeValue(\"gray.900\", \"whiteAlpha.900\");\n  return /*#__PURE__*/_jsxDEV(NextLink, {\n    href: href,\n    passHref: true,\n    children: /*#__PURE__*/_jsxDEV(Flex, {\n      as: \"a\",\n      align: \"center\",\n      fontSize: \"sm\",\n      fontWeight: \"semibold\",\n      transitionProperty: \"colors\",\n      transitionDuration: \"200ms\",\n      color: active ? linkColor : \"gray.500\",\n      _hover: {\n        color: linkColor\n      },\n      children: [/*#__PURE__*/_jsxDEV(Center, {\n        w: \"6\",\n        h: \"6\",\n        bg: \"teal.400\",\n        rounded: \"base\",\n        mr: \"3\",\n        children: icon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), children]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n};\n\nconst mainNavLinks = [{\n  icon: /*#__PURE__*/_jsxDEV(DocsIcon, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 11\n  }, this),\n  href: \"/docs/getting-started\",\n  label: \"Docs\"\n}, {\n  icon: /*#__PURE__*/_jsxDEV(GuidesIcon, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 11\n  }, this),\n  href: \"/guides/integrations/with-cra\",\n  label: \"Guides\"\n}, {\n  icon: /*#__PURE__*/_jsxDEV(ResourcesIcon, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 11\n  }, this),\n  href: \"/resources\",\n  label: \"Resources\"\n}, {\n  icon: /*#__PURE__*/_jsxDEV(TeamIcon, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 11\n  }, this),\n  href: \"/team\",\n  label: \"Team\"\n}, {\n  icon: /*#__PURE__*/_jsxDEV(BlogIcon, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 11\n  }, this),\n  href: \"/blog\",\n  label: \"Blog\"\n}];\n\nconst MainNavLinkGroup = props => {\n  return /*#__PURE__*/_jsxDEV(List, _objectSpread(_objectSpread({\n    spacing: \"4\",\n    styleType: \"none\"\n  }, props), {}, {\n    children: mainNavLinks.map(item => /*#__PURE__*/_jsxDEV(ListItem, {\n      children: /*#__PURE__*/_jsxDEV(MainNavLink, {\n        icon: item.icon,\n        href: item.href,\n        children: item.label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 11\n      }, this)\n    }, item.label, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 9\n    }, this))\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 162,\n    columnNumber: 5\n  }, this);\n};\n\nconst Sidebar = ({\n  routes\n}) => {\n  const {\n    pathname\n  } = useRouter();\n  const ref = React.useRef(null);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    ref: ref,\n    as: \"nav\",\n    \"aria-label\": \"Main Navigation\",\n    pos: \"sticky\",\n    sx: {\n      overscrollBehavior: \"contain\"\n    },\n    top: \"6.5rem\",\n    w: \"280px\",\n    h: \"calc(((100vh - 1.5rem) - 64px) - 42px);\",\n    pr: \"8\",\n    pb: \"8\",\n    pl: \"3\",\n    pt: \"8\",\n    overflowY: \"auto\",\n    className: \"sidebar-content\",\n    flexShrink: 0,\n    display: {\n      base: \"none\",\n      md: \"block\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(MainNavLinkGroup, {\n      mb: \"10\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SidebarContent, {\n      routes: routes,\n      pathname: pathname,\n      contentRef: ref\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 179,\n    columnNumber: 5\n  }, this);\n};\n\nexport default Sidebar;","map":{"version":3,"sources":["/Users/sunfei/Downloads/website/src/components/sidebar/sidebar.tsx"],"names":["Badge","Box","Center","chakra","Flex","List","ListItem","Stack","useColorModeValue","useRouter","React","SidebarCategory","SidebarLink","NextLink","BlogIcon","DocsIcon","GuidesIcon","TeamIcon","ResourcesIcon","_","SidebarContent","props","routes","pathname","contentRef","map","lvl1","idx","heading","title","lvl2","index","path","selected","startsWith","opened","open","sortedRoutes","sort","sortBy","i","lvl3","new","MainNavLink","href","icon","children","group","split","active","includes","linkColor","color","mainNavLinks","label","MainNavLinkGroup","item","Sidebar","ref","useRef","overscrollBehavior","base","md"],"mappings":"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","sourcesContent":["import {\n  Badge,\n  Box,\n  Center,\n  chakra,\n  Flex,\n  List,\n  ListItem,\n  ListProps,\n  Stack,\n  useColorModeValue,\n} from \"@chakra-ui/react\"\nimport { useRouter } from \"next/router\"\nimport * as React from \"react\"\nimport { Routes } from \"utils/get-route-context\"\nimport SidebarCategory from \"./sidebar-category\"\nimport SidebarLink from \"./sidebar-link\"\nimport NextLink from \"next/link\"\nimport {\n  BlogIcon,\n  DocsIcon,\n  GuidesIcon,\n  TeamIcon,\n  ResourcesIcon,\n} from \"./sidebar-icons\"\nimport _ from \"lodash\"\n\nexport type SidebarContentProps = Routes & {\n  pathname?: string\n  contentRef?: any\n}\n\nexport function SidebarContent(props: SidebarContentProps) {\n  const { routes, pathname, contentRef } = props\n  return (\n    <>\n      {routes.map((lvl1, idx) => {\n        return (\n          <React.Fragment key={idx}>\n            {lvl1.heading && (\n              <chakra.h4\n                fontSize=\"sm\"\n                fontWeight=\"bold\"\n                my=\"1.25rem\"\n                textTransform=\"uppercase\"\n                letterSpacing=\"wider\"\n                color={useColorModeValue(\"gray.700\", \"inherit\")}\n              >\n                {lvl1.title}\n              </chakra.h4>\n            )}\n\n            {lvl1.routes.map((lvl2, index) => {\n              if (!lvl2.routes) {\n                return (\n                  <SidebarLink ml=\"-3\" mt=\"2\" key={lvl2.path} href={lvl2.path}>\n                    {lvl2.title}\n                  </SidebarLink>\n                )\n              }\n\n              const selected = pathname.startsWith(lvl2.path)\n              const opened = selected || lvl2.open\n\n              const sortedRoutes = !!lvl2.sort\n                ? _.sortBy(lvl2.routes, (i) => i.title)\n                : lvl2.routes\n\n              return (\n                <SidebarCategory\n                  contentRef={contentRef}\n                  key={lvl2.path + index}\n                  title={lvl2.title}\n                  selected={selected}\n                  opened={opened}\n                >\n                  <Stack as=\"ul\">\n                    {sortedRoutes.map((lvl3) => (\n                      <SidebarLink as=\"li\" key={lvl3.path} href={lvl3.path}>\n                        <span>{lvl3.title}</span>\n                        {lvl3.new && (\n                          <Badge\n                            ml=\"2\"\n                            lineHeight=\"tall\"\n                            fontSize=\"10px\"\n                            variant=\"solid\"\n                            colorScheme=\"purple\"\n                          >\n                            New\n                          </Badge>\n                        )}\n                      </SidebarLink>\n                    ))}\n                  </Stack>\n                </SidebarCategory>\n              )\n            })}\n          </React.Fragment>\n        )\n      })}\n    </>\n  )\n}\n\nconst MainNavLink = ({ href, icon, children }) => {\n  const { pathname } = useRouter()\n  const [, group] = href.split(\"/\")\n  const active = pathname.includes(group)\n  const linkColor = useColorModeValue(\"gray.900\", \"whiteAlpha.900\")\n\n  return (\n    <NextLink href={href} passHref>\n      <Flex\n        as=\"a\"\n        align=\"center\"\n        fontSize=\"sm\"\n        fontWeight=\"semibold\"\n        transitionProperty=\"colors\"\n        transitionDuration=\"200ms\"\n        color={active ? linkColor : \"gray.500\"}\n        _hover={{ color: linkColor }}\n      >\n        <Center w=\"6\" h=\"6\" bg=\"teal.400\" rounded=\"base\" mr=\"3\">\n          {icon}\n        </Center>\n        {children}\n      </Flex>\n    </NextLink>\n  )\n}\n\nconst mainNavLinks = [\n  {\n    icon: <DocsIcon />,\n    href: \"/docs/getting-started\",\n    label: \"Docs\",\n  },\n  {\n    icon: <GuidesIcon />,\n    href: \"/guides/integrations/with-cra\",\n    label: \"Guides\",\n  },\n  {\n    icon: <ResourcesIcon />,\n    href: \"/resources\",\n    label: \"Resources\",\n  },\n  {\n    icon: <TeamIcon />,\n    href: \"/team\",\n    label: \"Team\",\n  },\n  {\n    icon: <BlogIcon />,\n    href: \"/blog\",\n    label: \"Blog\",\n  },\n]\n\nconst MainNavLinkGroup = (props: ListProps) => {\n  return (\n    <List spacing=\"4\" styleType=\"none\" {...props}>\n      {mainNavLinks.map((item) => (\n        <ListItem key={item.label}>\n          <MainNavLink icon={item.icon} href={item.href}>\n            {item.label}\n          </MainNavLink>\n        </ListItem>\n      ))}\n    </List>\n  )\n}\n\nconst Sidebar = ({ routes }) => {\n  const { pathname } = useRouter()\n  const ref = React.useRef<HTMLDivElement>(null)\n\n  return (\n    <Box\n      ref={ref}\n      as=\"nav\"\n      aria-label=\"Main Navigation\"\n      pos=\"sticky\"\n      sx={{\n        overscrollBehavior: \"contain\",\n      }}\n      top=\"6.5rem\"\n      w=\"280px\"\n      h=\"calc(((100vh - 1.5rem) - 64px) - 42px);\"\n      pr=\"8\"\n      pb=\"8\"\n      pl=\"3\"\n      pt=\"8\"\n      overflowY=\"auto\"\n      className=\"sidebar-content\"\n      flexShrink={0}\n      display={{ base: \"none\", md: \"block\" }}\n    >\n      <MainNavLinkGroup mb=\"10\" />\n      <SidebarContent routes={routes} pathname={pathname} contentRef={ref} />\n    </Box>\n  )\n}\n\nexport default Sidebar\n"]},"metadata":{},"sourceType":"module"}