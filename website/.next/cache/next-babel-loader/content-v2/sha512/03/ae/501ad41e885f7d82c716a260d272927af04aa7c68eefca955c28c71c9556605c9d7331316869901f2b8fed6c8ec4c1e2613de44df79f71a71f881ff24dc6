{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/sunfei/Downloads/website/pages/docs/layout/stack.mdx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport Layout from '/Users/sunfei/Downloads/website/layouts/index';\nexport var frontMatter = {\n  title: 'Stack',\n  \"package\": '@chakra-ui/layout',\n  image: 'components/stack.svg',\n  description: 'Stack is a layout utility component that makes it easy to stack elements together and apply a space between them.',\n  slug: '/docs/layout/stack',\n  lastEdited: undefined,\n  editUrl: 'https://github.com/chakra-ui/chakra-ui/edit/develop/website/pages/docs/layout/stack.mdx',\n  author: undefined,\n  tags: undefined,\n  __resourcePath: 'docs/layout/stack.mdx',\n  __scans: {},\n  layout: 'index'\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", _objectSpread(_objectSpread({}, props), {}, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 14\n      }\n    }));\n  };\n};\n\nvar ComponentLinks = makeShortcode(\"ComponentLinks\");\n_c = ComponentLinks;\nvar PropsTable = makeShortcode(\"PropsTable\");\n_c2 = PropsTable;\nvar layoutProps = {\n  frontMatter: frontMatter\n};\nvar MDXLayout = Layout;\nexport default function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _objectSpread(_objectSpread(_objectSpread({}, layoutProps), props), {}, {\n    components: components,\n    mdxType: \"MDXLayout\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 10\n    }\n  }), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, \"Stack is a layout component that makes it easy to stack elements together and\\napply a space between them. It uses a modified version of the\\n\", mdx(\"a\", _objectSpread(_objectSpread({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://alistapart.com/article/axiomatic-css-and-lobotomized-owls/\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 3\n    }\n  }), \"CSS lobotomized owl selector\"), \"\\nto add spacing between its children.\"), mdx(ComponentLinks, {\n    github: {\n      \"package\": \"layout\"\n    },\n    npm: {\n      \"package\": \"@chakra-ui/layout\"\n    },\n    mdxType: \"ComponentLinks\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, mdx(\"carbon-ad\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 8\n    }\n  })), mdx(\"h2\", _objectSpread(_objectSpread({}, {\n    \"id\": \"import\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }), \"Import\"), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 10\n    }\n  }), \"import { Stack, HStack, VStack } from \\\"@chakra-ui/react\\\"\\n\")), mdx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, mdx(\"strong\", {\n    parentName: \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 27\n    }\n  }, \"Stack:\"), \" Used to add spacing between elements in the horizontal or vertical\\ndirection. It supports responsive values.\"), mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, mdx(\"strong\", {\n    parentName: \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 27\n    }\n  }, \"HStack:\"), \" Used to add spacing between elements in horizontal direction, and\\ncenters them.\"), mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, mdx(\"strong\", {\n    parentName: \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 27\n    }\n  }, \"VStack:\"), \" Used to add spacing between elements in vertical direction only,\\nand centers them.\")), mdx(\"h2\", _objectSpread(_objectSpread({}, {\n    \"id\": \"usage\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }\n  }), \"Usage\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }, \"To stack elements in horizontal or vertical direction only, use the \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 80\n    }\n  }, \"HStack\"), \" or\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 3\n    }\n  }, \"VStack\"), \" components. You can also use the \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 91\n    }\n  }, \"Stack\"), \" component as well and pass the\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 3\n    }\n  }, \"direction\"), \" prop.\"), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 10\n    }\n  }), \"<HStack spacing=\\\"24px\\\">\\n  <Box w=\\\"40px\\\" h=\\\"40px\\\" bg=\\\"yellow.200\\\">\\n    1\\n  </Box>\\n  <Box w=\\\"40px\\\" h=\\\"40px\\\" bg=\\\"tomato\\\">\\n    2\\n  </Box>\\n  <Box w=\\\"40px\\\" h=\\\"40px\\\" bg=\\\"pink.100\\\">\\n    3\\n  </Box>\\n</HStack>\\n\")), mdx(\"h3\", _objectSpread(_objectSpread({}, {\n    \"id\": \"responsive-direction\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 5\n    }\n  }), \"Responsive direction\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 5\n    }\n  }, \"You can pass responsive values to the \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 50\n    }\n  }, \"Stack\"), \" component to change stack\\ndirection and/or spacing between elements.\"), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 10\n    }\n  }), \"<Stack direction={[\\\"column\\\", \\\"row\\\"]} spacing=\\\"24px\\\">\\n  <Box w=\\\"40px\\\" h=\\\"40px\\\" bg=\\\"yellow.200\\\">\\n    1\\n  </Box>\\n  <Box w=\\\"40px\\\" h=\\\"40px\\\" bg=\\\"tomato\\\">\\n    2\\n  </Box>\\n  <Box w=\\\"40px\\\" h=\\\"40px\\\" bg=\\\"pink.100\\\">\\n    3\\n  </Box>\\n</Stack>\\n\")), mdx(\"h3\", _objectSpread(_objectSpread({}, {\n    \"id\": \"adding-dividers\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 5\n    }\n  }), \"Adding dividers\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 5\n    }\n  }, \"In some scenarios, you may want to add dividers between stacked elements. Pass\\nthe \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }\n  }, \"divider\"), \" prop and set its value to the \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 93\n    }\n  }, \"StackDivider\"), \" or any custom React\\nelement.\"), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 10\n    }\n  }), \"<VStack\\n  divider={<StackDivider borderColor=\\\"gray.200\\\" />}\\n  spacing={4}\\n  align=\\\"stretch\\\"\\n>\\n  <Box h=\\\"40px\\\" bg=\\\"yellow.200\\\">\\n    1\\n  </Box>\\n  <Box h=\\\"40px\\\" bg=\\\"tomato\\\">\\n    2\\n  </Box>\\n  <Box h=\\\"40px\\\" bg=\\\"pink.100\\\">\\n    3\\n  </Box>\\n</VStack>\\n\")), mdx(\"h3\", _objectSpread(_objectSpread({}, {\n    \"id\": \"example\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 5\n    }\n  }), \"Example\"), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"manual=true\",\n    \"manual\": \"true\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 10\n    }\n  }), \"function Feature({ title, desc, ...rest }) {\\n  return (\\n    <Box p={5} shadow=\\\"md\\\" borderWidth=\\\"1px\\\" {...rest}>\\n      <Heading fontSize=\\\"xl\\\">{title}</Heading>\\n      <Text mt={4}>{desc}</Text>\\n    </Box>\\n  )\\n}\\n\\nfunction StackEx() {\\n  return (\\n    <Stack spacing={8}>\\n      <Feature\\n        title=\\\"Plan Money\\\"\\n        desc=\\\"The future can be even brighter but a goal without a plan is just a wish\\\"\\n      />\\n      <Feature\\n        title=\\\"Save Money\\\"\\n        desc=\\\"You deserve good things. With a whooping 10-15% interest rate per annum, grow your savings on your own terms with our completely automated process\\\"\\n      />\\n    </Stack>\\n  )\\n}\\n\\nrender(<StackEx />)\\n\")), mdx(\"h3\", _objectSpread(_objectSpread({}, {\n    \"id\": \"stack-items-horizontally\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 5\n    }\n  }), \"Stack items horizontally\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 5\n    }\n  }, \"Pass the \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 21\n    }\n  }, \"direction\"), \" and set it to \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 93\n    }\n  }, \"row\"), \". Optionally, you can use \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 170\n    }\n  }, \"align\"), \" and\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 3\n    }\n  }, \"justify\"), \" to adjust the alignment and distribution of the items.\"), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"manual=true\",\n    \"manual\": \"true\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 10\n    }\n  }), \"function Feature({ title, desc, ...rest }) {\\n  return (\\n    <Box\\n      p={5}\\n      shadow=\\\"md\\\"\\n      borderWidth=\\\"1px\\\"\\n      flex=\\\"1\\\"\\n      borderRadius=\\\"md\\\"\\n      {...rest}\\n    >\\n      <Heading fontSize=\\\"xl\\\">{title}</Heading>\\n      <Text mt={4}>{desc}</Text>\\n    </Box>\\n  )\\n}\\n\\nfunction StackEx() {\\n  return (\\n    <HStack spacing={8}>\\n      <Feature\\n        title=\\\"Plan Money\\\"\\n        desc=\\\"The future can be even brighter but a goal without a plan is just a wish\\\"\\n      />\\n      <Feature\\n        title=\\\"Save Money\\\"\\n        desc=\\\"You deserve good things. With a whooping 10-15% interest rate per annum, grow your savings.\\\"\\n      />\\n    </HStack>\\n  )\\n}\\n\\nrender(<StackEx />)\\n\")), mdx(\"h3\", _objectSpread(_objectSpread({}, {\n    \"id\": \"notes-on-stack-vs-flex\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 5\n    }\n  }), \"Notes on Stack vs Flex\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 5\n    }\n  }, \"Stack's primary use case is to lay items out and control the spacing between\\neach item. If you have a more complicated use case, such as changing the margin\\non the last child, you can combine \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 38\n    }\n  }, \"Stack\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 96\n    }\n  }, \"Flex\"), \" and use\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 3\n    }\n  }, \"justify-content: space-between\"), \" for more control of the layout.\"), mdx(\"h3\", _objectSpread(_objectSpread({}, {\n    \"id\": \"props\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 5\n    }\n  }), \"Props\"), mdx(PropsTable, {\n    of: \"Stack\",\n    mdxType: \"PropsTable\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 5\n    }\n  }));\n}\n_c3 = MDXContent;\n;\nMDXContent.isMDXComponent = true;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"ComponentLinks\");\n$RefreshReg$(_c2, \"PropsTable\");\n$RefreshReg$(_c3, \"MDXContent\");","map":{"version":3,"sources":["/Users/sunfei/Downloads/website/pages/docs/layout/stack.mdx"],"names":["React","mdx","Layout","frontMatter","title","image","description","slug","lastEdited","undefined","editUrl","author","tags","__resourcePath","__scans","layout","makeShortcode","name","MDXDefaultShortcode","props","console","warn","ComponentLinks","PropsTable","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport Layout, {  } from '/Users/sunfei/Downloads/website/layouts/index'\nexport const frontMatter = {\n  title: 'Stack',\n  package: '@chakra-ui/layout',\n  image: 'components/stack.svg',\n  description: 'Stack is a layout utility component that makes it easy to stack elements together and apply a space between them.',\n  slug: '/docs/layout/stack',\n  lastEdited: undefined,\n  editUrl: 'https://github.com/chakra-ui/chakra-ui/edit/develop/website/pages/docs/layout/stack.mdx',\n  author: undefined,\n  tags: undefined,\n  __resourcePath: 'docs/layout/stack.mdx',\n  __scans: {},\n  layout: 'index'\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n      console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n      return <div {...props}/>\n    };\nconst ComponentLinks = makeShortcode(\"ComponentLinks\");\nconst PropsTable = makeShortcode(\"PropsTable\");\nconst layoutProps = {\n  frontMatter\n};\nconst MDXLayout = Layout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <p>{`Stack is a layout component that makes it easy to stack elements together and\napply a space between them. It uses a modified version of the\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://alistapart.com/article/axiomatic-css-and-lobotomized-owls/\"\n      }}>{`CSS lobotomized owl selector`}</a>{`\nto add spacing between its children.`}</p>\n    <ComponentLinks github={{\n      package: \"layout\"\n    }} npm={{\n      package: \"@chakra-ui/layout\"\n    }} mdxType=\"ComponentLinks\" />\n    <p><carbon-ad></carbon-ad></p>\n    <h2 {...{\n      \"id\": \"import\"\n    }}>{`Import`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { Stack, HStack, VStack } from \"@chakra-ui/react\"\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Stack:`}</strong>{` Used to add spacing between elements in the horizontal or vertical\ndirection. It supports responsive values.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`HStack:`}</strong>{` Used to add spacing between elements in horizontal direction, and\ncenters them.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`VStack:`}</strong>{` Used to add spacing between elements in vertical direction only,\nand centers them.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <p>{`To stack elements in horizontal or vertical direction only, use the `}<inlineCode parentName=\"p\">{`HStack`}</inlineCode>{` or\n`}<inlineCode parentName=\"p\">{`VStack`}</inlineCode>{` components. You can also use the `}<inlineCode parentName=\"p\">{`Stack`}</inlineCode>{` component as well and pass the\n`}<inlineCode parentName=\"p\">{`direction`}</inlineCode>{` prop.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<HStack spacing=\"24px\">\n  <Box w=\"40px\" h=\"40px\" bg=\"yellow.200\">\n    1\n  </Box>\n  <Box w=\"40px\" h=\"40px\" bg=\"tomato\">\n    2\n  </Box>\n  <Box w=\"40px\" h=\"40px\" bg=\"pink.100\">\n    3\n  </Box>\n</HStack>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"responsive-direction\"\n    }}>{`Responsive direction`}</h3>\n    <p>{`You can pass responsive values to the `}<inlineCode parentName=\"p\">{`Stack`}</inlineCode>{` component to change stack\ndirection and/or spacing between elements.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Stack direction={[\"column\", \"row\"]} spacing=\"24px\">\n  <Box w=\"40px\" h=\"40px\" bg=\"yellow.200\">\n    1\n  </Box>\n  <Box w=\"40px\" h=\"40px\" bg=\"tomato\">\n    2\n  </Box>\n  <Box w=\"40px\" h=\"40px\" bg=\"pink.100\">\n    3\n  </Box>\n</Stack>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"adding-dividers\"\n    }}>{`Adding dividers`}</h3>\n    <p>{`In some scenarios, you may want to add dividers between stacked elements. Pass\nthe `}<inlineCode parentName=\"p\">{`divider`}</inlineCode>{` prop and set its value to the `}<inlineCode parentName=\"p\">{`StackDivider`}</inlineCode>{` or any custom React\nelement.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<VStack\n  divider={<StackDivider borderColor=\"gray.200\" />}\n  spacing={4}\n  align=\"stretch\"\n>\n  <Box h=\"40px\" bg=\"yellow.200\">\n    1\n  </Box>\n  <Box h=\"40px\" bg=\"tomato\">\n    2\n  </Box>\n  <Box h=\"40px\" bg=\"pink.100\">\n    3\n  </Box>\n</VStack>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"manual=true\",\n        \"manual\": \"true\"\n      }}>{`function Feature({ title, desc, ...rest }) {\n  return (\n    <Box p={5} shadow=\"md\" borderWidth=\"1px\" {...rest}>\n      <Heading fontSize=\"xl\">{title}</Heading>\n      <Text mt={4}>{desc}</Text>\n    </Box>\n  )\n}\n\nfunction StackEx() {\n  return (\n    <Stack spacing={8}>\n      <Feature\n        title=\"Plan Money\"\n        desc=\"The future can be even brighter but a goal without a plan is just a wish\"\n      />\n      <Feature\n        title=\"Save Money\"\n        desc=\"You deserve good things. With a whooping 10-15% interest rate per annum, grow your savings on your own terms with our completely automated process\"\n      />\n    </Stack>\n  )\n}\n\nrender(<StackEx />)\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"stack-items-horizontally\"\n    }}>{`Stack items horizontally`}</h3>\n    <p>{`Pass the `}<inlineCode parentName=\"p\">{`direction`}</inlineCode>{` and set it to `}<inlineCode parentName=\"p\">{`row`}</inlineCode>{`. Optionally, you can use `}<inlineCode parentName=\"p\">{`align`}</inlineCode>{` and\n`}<inlineCode parentName=\"p\">{`justify`}</inlineCode>{` to adjust the alignment and distribution of the items.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"manual=true\",\n        \"manual\": \"true\"\n      }}>{`function Feature({ title, desc, ...rest }) {\n  return (\n    <Box\n      p={5}\n      shadow=\"md\"\n      borderWidth=\"1px\"\n      flex=\"1\"\n      borderRadius=\"md\"\n      {...rest}\n    >\n      <Heading fontSize=\"xl\">{title}</Heading>\n      <Text mt={4}>{desc}</Text>\n    </Box>\n  )\n}\n\nfunction StackEx() {\n  return (\n    <HStack spacing={8}>\n      <Feature\n        title=\"Plan Money\"\n        desc=\"The future can be even brighter but a goal without a plan is just a wish\"\n      />\n      <Feature\n        title=\"Save Money\"\n        desc=\"You deserve good things. With a whooping 10-15% interest rate per annum, grow your savings.\"\n      />\n    </HStack>\n  )\n}\n\nrender(<StackEx />)\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"notes-on-stack-vs-flex\"\n    }}>{`Notes on Stack vs Flex`}</h3>\n    <p>{`Stack's primary use case is to lay items out and control the spacing between\neach item. If you have a more complicated use case, such as changing the margin\non the last child, you can combine `}<inlineCode parentName=\"p\">{`Stack`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Flex`}</inlineCode>{` and use\n`}<inlineCode parentName=\"p\">{`justify-content: space-between`}</inlineCode>{` for more control of the layout.`}</p>\n    <h3 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h3>\n    <PropsTable of=\"Stack\" mdxType=\"PropsTable\" />\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"]},"metadata":{},"sourceType":"module"}