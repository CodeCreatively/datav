{"ast":null,"code":"var _jsxFileName = \"/Users/sunfei/Downloads/website/pages/docs/theming/advanced.mdx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport Layout from '/Users/sunfei/Downloads/website/layouts/index';\nexport const frontMatter = {\n  title: 'Advanced Theming',\n  description: 'Documentation for making advanced modifications to themes.',\n  slug: '/docs/theming/advanced',\n  lastEdited: undefined,\n  editUrl: 'https://github.com/chakra-ui/chakra-ui/edit/develop/website/pages/docs/theming/advanced.mdx',\n  author: undefined,\n  tags: undefined,\n  __resourcePath: 'docs/theming/advanced.mdx',\n  __scans: {},\n  layout: 'index'\n};\nconst layoutProps = {\n  frontMatter\n};\nconst MDXLayout = Layout;\nexport default function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _objectSpread(_objectSpread(_objectSpread({}, layoutProps), props), {}, {\n    components: components,\n    mdxType: \"MDXLayout\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 10\n    }\n  }), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, `Now that you understand how to use Chakra UI theming API. Let's take a step\nfurther and see if we can adapt a component to color mode.`), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }\n  }, `When defining the styles for the `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 45\n    }\n  }, `sizes`), ` or `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 102\n    }\n  }, `variants`), `, you can either pass a\nstyle object or a function that returns a style object.`), mdx(\"h2\", _objectSpread(_objectSpread({}, {\n    \"id\": \"single-part-component\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }), `Single Part Component`), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, `For a single part component like button, badge, etc. The style configuration has\nthe following signature:`), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-tsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 10\n    }\n  }), `type StyleInterpolation = StyleObject | ((options: StyleOptions) => StyleObject)\n\ninterface StyleOptions {\n  theme: Theme\n  colorMode: \"light\" | \"dark\"\n  colorScheme: string\n}\n\ninterface StyleConfig {\n  baseStyle: StyleInterpolation\n  sizes: { [size: string]: StyleInterpolation }\n  variants: { [variant: string]: StyleInterpolation }\n  defaultProps?: {\n    variant: string\n    size: string\n  }\n}\n`)), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }, `For example, to create a simple badge that changes its background based on color\nmode. Here's how to go about it.`), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 10\n    }\n  }), `import { extendTheme } from \"@chakra-ui/react\"\n\n// 1. define component configuration\nconst components = {\n  CustomBadge: {\n    baseStyle: ({ colorMode }) => ({\n      bg: colorMode === \"dark\" ? \"green.300\" : \"green.500\",\n      color: colorMode === \"dark\" ? \"gray.800\" : \"white\",\n      textTransform: \"uppercase\",\n      fontWeight: \"semibold\",\n      letterSpacing: \"0.02em\",\n      padding: \"4px\",\n      borderRadius: \"2px\",\n      fontSize: \"12px\",\n    }),\n  },\n}\n\n// 2. Call \\`extendTheme\\` and pass your custom values\\`\nconst theme = extendTheme({ components })\n\n// 3. Use it in your components\nfunction CustomBadge(props) {\n  const { size, variant, ...rest } = props\n  const styles = useStyleConfig(\"CustomBadge\", { size, variant })\n  return <Box as=\"span\" sx={styles} {...rest} />\n}\n\n// 4. Use the component\nrender(<CustomBadge>I am a custom badge</CustomBadge>)\n`)), mdx(\"h2\", _objectSpread(_objectSpread({}, {\n    \"id\": \"multipart-or-composite-component\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 5\n    }\n  }), `Multipart or Composite Component`), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 5\n    }\n  }, `When it comes to multipart components for example tabs or menus etc, that have\nmultiple sub-parts, you can also style them based on the color mode. Here's the\nsignature:`), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-tsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 10\n    }\n  }), `type StyleInterpolation =\n  | { [part: string]: SystemStyleObject }\n  | ((options: StyleOptions) => { [part: string]: SystemStyleObject })\n\ninterface StyleOptions {\n  theme: Theme\n  colorMode: \"light\" | \"dark\"\n  colorScheme: string\n}\n\ninterface StyleConfig {\n  baseStyle: StyleInterpolation\n  sizes: { [size: string]: StyleInterpolation }\n  variants: { [variant: string]: StyleInterpolation }\n  defaultProps?: {\n    variant: string\n    size: string\n  }\n}\n`)));\n}\n;\nMDXContent.isMDXComponent = true;","map":{"version":3,"sources":["/Users/sunfei/Downloads/website/pages/docs/theming/advanced.mdx"],"names":["React","mdx","Layout","frontMatter","title","description","slug","lastEdited","undefined","editUrl","author","tags","__resourcePath","__scans","layout","layoutProps","MDXLayout","MDXContent","components","props","isMDXComponent"],"mappings":"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","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport Layout, {  } from '/Users/sunfei/Downloads/website/layouts/index'\nexport const frontMatter = {\n  title: 'Advanced Theming',\n  description: 'Documentation for making advanced modifications to themes.',\n  slug: '/docs/theming/advanced',\n  lastEdited: undefined,\n  editUrl: 'https://github.com/chakra-ui/chakra-ui/edit/develop/website/pages/docs/theming/advanced.mdx',\n  author: undefined,\n  tags: undefined,\n  __resourcePath: 'docs/theming/advanced.mdx',\n  __scans: {},\n  layout: 'index'\n};\n\nconst layoutProps = {\n  frontMatter\n};\nconst MDXLayout = Layout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <p>{`Now that you understand how to use Chakra UI theming API. Let's take a step\nfurther and see if we can adapt a component to color mode.`}</p>\n    <p>{`When defining the styles for the `}<inlineCode parentName=\"p\">{`sizes`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`variants`}</inlineCode>{`, you can either pass a\nstyle object or a function that returns a style object.`}</p>\n    <h2 {...{\n      \"id\": \"single-part-component\"\n    }}>{`Single Part Component`}</h2>\n    <p>{`For a single part component like button, badge, etc. The style configuration has\nthe following signature:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\",\n        \"metastring\": \"live=false\",\n        \"live\": \"false\"\n      }}>{`type StyleInterpolation = StyleObject | ((options: StyleOptions) => StyleObject)\n\ninterface StyleOptions {\n  theme: Theme\n  colorMode: \"light\" | \"dark\"\n  colorScheme: string\n}\n\ninterface StyleConfig {\n  baseStyle: StyleInterpolation\n  sizes: { [size: string]: StyleInterpolation }\n  variants: { [variant: string]: StyleInterpolation }\n  defaultProps?: {\n    variant: string\n    size: string\n  }\n}\n`}</code></pre>\n    <p>{`For example, to create a simple badge that changes its background based on color\nmode. Here's how to go about it.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live=false\",\n        \"live\": \"false\"\n      }}>{`import { extendTheme } from \"@chakra-ui/react\"\n\n// 1. define component configuration\nconst components = {\n  CustomBadge: {\n    baseStyle: ({ colorMode }) => ({\n      bg: colorMode === \"dark\" ? \"green.300\" : \"green.500\",\n      color: colorMode === \"dark\" ? \"gray.800\" : \"white\",\n      textTransform: \"uppercase\",\n      fontWeight: \"semibold\",\n      letterSpacing: \"0.02em\",\n      padding: \"4px\",\n      borderRadius: \"2px\",\n      fontSize: \"12px\",\n    }),\n  },\n}\n\n// 2. Call \\`extendTheme\\` and pass your custom values\\`\nconst theme = extendTheme({ components })\n\n// 3. Use it in your components\nfunction CustomBadge(props) {\n  const { size, variant, ...rest } = props\n  const styles = useStyleConfig(\"CustomBadge\", { size, variant })\n  return <Box as=\"span\" sx={styles} {...rest} />\n}\n\n// 4. Use the component\nrender(<CustomBadge>I am a custom badge</CustomBadge>)\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"multipart-or-composite-component\"\n    }}>{`Multipart or Composite Component`}</h2>\n    <p>{`When it comes to multipart components for example tabs or menus etc, that have\nmultiple sub-parts, you can also style them based on the color mode. Here's the\nsignature:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\",\n        \"metastring\": \"live=false\",\n        \"live\": \"false\"\n      }}>{`type StyleInterpolation =\n  | { [part: string]: SystemStyleObject }\n  | ((options: StyleOptions) => { [part: string]: SystemStyleObject })\n\ninterface StyleOptions {\n  theme: Theme\n  colorMode: \"light\" | \"dark\"\n  colorScheme: string\n}\n\ninterface StyleConfig {\n  baseStyle: StyleInterpolation\n  sizes: { [size: string]: StyleInterpolation }\n  variants: { [variant: string]: StyleInterpolation }\n  defaultProps?: {\n    variant: string\n    size: string\n  }\n}\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"]},"metadata":{},"sourceType":"module"}