{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createExcerpt, parseMarkdownFile } from \"@docusaurus/utils\";\nimport siteConfig from \"configs/site-config\";\nimport path from \"path\";\nimport shell from \"shelljs\";\nimport { calcReadTime } from \"utils/calc-read-time\";\n\nasync function loadMDXFromPages(mdxDir = \"guides\") {\n  const {\n    processFrontmatter\n  } = require(\"utils/mdx-utils\");\n\n  const dir = path.join(process.cwd(), `pages/${mdxDir}`);\n  const filenames = shell.ls(\"-R\", `${dir}/**/*.mdx`);\n  const dataPromise = filenames.map(async filename => {\n    // get the `pages` directory\n    const pagesDir = path.join(process.cwd(), \"pages\"); // gets the relative mdx path\n    // pages/docs/guides.mdx => /docs/guides.mdx\n\n    const mdxPath = path.relative(pagesDir, filename); // extract frontmatter and content from markdown string\n\n    const {\n      frontMatter,\n      content\n    } = await parseMarkdownFile(filename); // extends frontmatter with more useful information\n\n    return processFrontmatter(_objectSpread(_objectSpread({}, frontMatter), {}, {\n      path: mdxPath,\n      baseEditUrl: siteConfig.repo.editUrl,\n      excerpt: frontMatter.excerpt || createExcerpt(content),\n      readTimeMinutes: calcReadTime(content)\n    }));\n  });\n  const data = await Promise.all(dataPromise);\n  return data;\n}\n\nexport default loadMDXFromPages;","map":{"version":3,"sources":["/Users/sunfei/Downloads/website/src/utils/load-mdx-dir.ts"],"names":["createExcerpt","parseMarkdownFile","siteConfig","path","shell","calcReadTime","loadMDXFromPages","mdxDir","processFrontmatter","require","dir","join","process","cwd","filenames","ls","dataPromise","map","filename","pagesDir","mdxPath","relative","frontMatter","content","baseEditUrl","repo","editUrl","excerpt","readTimeMinutes","data","Promise","all"],"mappings":";;;;;;AAAA,SAASA,aAAT,EAAwBC,iBAAxB,QAAiD,mBAAjD;AACA,OAAOC,UAAP,MAAuB,qBAAvB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,SAASC,YAAT,QAA6B,sBAA7B;;AAEA,eAAeC,gBAAf,CAAgCC,MAAM,GAAG,QAAzC,EAAmD;AACjD,QAAM;AAAEC,IAAAA;AAAF,MAAyBC,OAAO,CAAC,iBAAD,CAAtC;;AAEA,QAAMC,GAAG,GAAGP,IAAI,CAACQ,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAA0B,SAAQN,MAAO,EAAzC,CAAZ;AACA,QAAMO,SAAS,GAAGV,KAAK,CAACW,EAAN,CAAS,IAAT,EAAgB,GAAEL,GAAI,WAAtB,CAAlB;AAEA,QAAMM,WAAW,GAAGF,SAAS,CAACG,GAAV,CAAc,MAAOC,QAAP,IAAoB;AACpD;AACA,UAAMC,QAAQ,GAAGhB,IAAI,CAACQ,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,OAAzB,CAAjB,CAFoD,CAIpD;AACA;;AACA,UAAMO,OAAO,GAAGjB,IAAI,CAACkB,QAAL,CAAcF,QAAd,EAAwBD,QAAxB,CAAhB,CANoD,CAQpD;;AACA,UAAM;AAAEI,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAA2B,MAAMtB,iBAAiB,CAACiB,QAAD,CAAxD,CAToD,CAWpD;;AACA,WAAOV,kBAAkB,iCACpBc,WADoB;AAEvBnB,MAAAA,IAAI,EAAEiB,OAFiB;AAGvBI,MAAAA,WAAW,EAAEtB,UAAU,CAACuB,IAAX,CAAgBC,OAHN;AAIvBC,MAAAA,OAAO,EAAEL,WAAW,CAACK,OAAZ,IAAuB3B,aAAa,CAACuB,OAAD,CAJtB;AAKvBK,MAAAA,eAAe,EAAEvB,YAAY,CAACkB,OAAD;AALN,OAAzB;AAOD,GAnBmB,CAApB;AAqBA,QAAMM,IAAI,GAAG,MAAMC,OAAO,CAACC,GAAR,CAAYf,WAAZ,CAAnB;AAEA,SAAOa,IAAP;AACD;;AAED,eAAevB,gBAAf","sourcesContent":["import { createExcerpt, parseMarkdownFile } from \"@docusaurus/utils\"\nimport siteConfig from \"configs/site-config\"\nimport path from \"path\"\nimport shell from \"shelljs\"\nimport { calcReadTime } from \"utils/calc-read-time\"\n\nasync function loadMDXFromPages(mdxDir = \"guides\") {\n  const { processFrontmatter } = require(\"utils/mdx-utils\")\n\n  const dir = path.join(process.cwd(), `pages/${mdxDir}`)\n  const filenames = shell.ls(\"-R\", `${dir}/**/*.mdx`)\n\n  const dataPromise = filenames.map(async (filename) => {\n    // get the `pages` directory\n    const pagesDir = path.join(process.cwd(), \"pages\")\n\n    // gets the relative mdx path\n    // pages/docs/guides.mdx => /docs/guides.mdx\n    const mdxPath = path.relative(pagesDir, filename)\n\n    // extract frontmatter and content from markdown string\n    const { frontMatter, content } = await parseMarkdownFile(filename)\n\n    // extends frontmatter with more useful information\n    return processFrontmatter({\n      ...frontMatter,\n      path: mdxPath,\n      baseEditUrl: siteConfig.repo.editUrl,\n      excerpt: frontMatter.excerpt || createExcerpt(content),\n      readTimeMinutes: calcReadTime(content),\n    })\n  })\n\n  const data = await Promise.all(dataPromise)\n\n  return data\n}\n\nexport default loadMDXFromPages\n"]},"metadata":{},"sourceType":"module"}