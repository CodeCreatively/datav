{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/sunfei/Downloads/website/src/components/sidebar/sidebar-category.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { chakra, useColorModeValue } from \"@chakra-ui/react\";\nimport { useEffect, useRef, useState } from \"react\";\n\nfunction SidebarCategory(props) {\n  const {\n    isMobile,\n    title,\n    selected,\n    opened,\n    children,\n    contentRef\n  } = props,\n        rest = _objectWithoutProperties(props, [\"isMobile\", \"title\", \"selected\", \"opened\", \"children\", \"contentRef\"]);\n\n  const ref = useRef(null);\n  const {\n    0: {\n      toggle,\n      shouldScroll = false\n    },\n    1: setToggle\n  } = useState({\n    toggle: selected || opened\n  }); // const onClick = () => {\n  //   setToggle({ toggle: !toggle, shouldScroll: true })\n  // }\n  // If a category is selected indirectly, open it. This can happen when using the search input\n\n  useEffect(() => {\n    if (selected) {\n      setToggle({\n        toggle: true,\n        shouldScroll: true\n      });\n    }\n  }, [selected]); // Navigate to the start of the category when manually opened\n\n  useEffect(() => {\n    if (!ref.current || !(contentRef !== null && contentRef !== void 0 && contentRef.current)) return;\n\n    if (toggle && shouldScroll) {\n      const contentEl = contentRef.current;\n\n      if (toggle == true && contentEl) {\n        // 10 is added for better margin\n        const height = ref.current.offsetTop - (isMobile ? 10 : contentEl.offsetTop);\n        contentEl.scrollTop = height;\n        setToggle({\n          toggle\n        });\n      }\n    }\n  }, [toggle, shouldScroll, isMobile, contentRef]);\n  return /*#__PURE__*/_jsxDEV(chakra.div, _objectSpread(_objectSpread({\n    mt: \"8\",\n    ref: ref\n  }, rest), {}, {\n    children: [/*#__PURE__*/_jsxDEV(chakra.p, {\n      width: \"full\",\n      textTransform: \"uppercase\",\n      letterSpacing: \"wider\",\n      fontSize: \"xs\",\n      fontWeight: \"bold\",\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"space-between\",\n      userSelect: \"none\",\n      color: useColorModeValue(\"gray.500\", \"inherit\") // onClick={onClick}\n      ,\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(chakra.div, {\n      role: \"group\",\n      hidden: !toggle,\n      mt: \"16px\",\n      mx: \"-3\",\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }), void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n\nexport default SidebarCategory;","map":{"version":3,"sources":["/Users/sunfei/Downloads/website/src/components/sidebar/sidebar-category.tsx"],"names":["chakra","useColorModeValue","useEffect","useRef","useState","SidebarCategory","props","isMobile","title","selected","opened","children","contentRef","rest","ref","toggle","shouldScroll","setToggle","current","contentEl","height","offsetTop","scrollTop"],"mappings":";;;;;;;;;;;;;AAAA,SAAmBA,MAAnB,EAA2BC,iBAA3B,QAAoD,kBAApD;AACA,SAA+BC,SAA/B,EAA0CC,MAA1C,EAAkDC,QAAlD,QAAkE,OAAlE;;AAgBA,SAASC,eAAT,CAAyBC,KAAzB,EAAsD;AACpD,QAAM;AACJC,IAAAA,QADI;AAEJC,IAAAA,KAFI;AAGJC,IAAAA,QAHI;AAIJC,IAAAA,MAJI;AAKJC,IAAAA,QALI;AAMJC,IAAAA;AANI,MAQFN,KARJ;AAAA,QAOKO,IAPL,4BAQIP,KARJ;;AAUA,QAAMQ,GAAG,GAAGX,MAAM,CAAwB,IAAxB,CAAlB;AAEA,QAAM;AAAA,OAAC;AAAEY,MAAAA,MAAF;AAAUC,MAAAA,YAAY,GAAG;AAAzB,KAAD;AAAA,OAAmCC;AAAnC,MAAgDb,QAAQ,CAAe;AAC3EW,IAAAA,MAAM,EAAEN,QAAQ,IAAIC;AADuD,GAAf,CAA9D,CAboD,CAiBpD;AACA;AACA;AAEA;;AACAR,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIO,QAAJ,EAAc;AACZQ,MAAAA,SAAS,CAAC;AAAEF,QAAAA,MAAM,EAAE,IAAV;AAAgBC,QAAAA,YAAY,EAAE;AAA9B,OAAD,CAAT;AACD;AACF,GAJQ,EAIN,CAACP,QAAD,CAJM,CAAT,CAtBoD,CA4BpD;;AACAP,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACY,GAAG,CAACI,OAAL,IAAgB,EAACN,UAAD,aAACA,UAAD,eAACA,UAAU,CAAEM,OAAb,CAApB,EAA0C;;AAC1C,QAAIH,MAAM,IAAIC,YAAd,EAA4B;AAC1B,YAAMG,SAAS,GAAGP,UAAU,CAACM,OAA7B;;AAEA,UAAIH,MAAM,IAAI,IAAV,IAAkBI,SAAtB,EAAiC;AAC/B;AACA,cAAMC,MAAM,GACVN,GAAG,CAACI,OAAJ,CAAYG,SAAZ,IAAyBd,QAAQ,GAAG,EAAH,GAAQY,SAAS,CAACE,SAAnD,CADF;AAEAF,QAAAA,SAAS,CAACG,SAAV,GAAsBF,MAAtB;AACAH,QAAAA,SAAS,CAAC;AAAEF,UAAAA;AAAF,SAAD,CAAT;AACD;AACF;AACF,GAbQ,EAaN,CAACA,MAAD,EAASC,YAAT,EAAuBT,QAAvB,EAAiCK,UAAjC,CAbM,CAAT;AAeA,sBACE,QAAC,MAAD,CAAQ,GAAR;AAAY,IAAA,EAAE,EAAC,GAAf;AAAmB,IAAA,GAAG,EAAEE;AAAxB,KAAiCD,IAAjC;AAAA,4BACE,QAAC,MAAD,CAAQ,CAAR;AACE,MAAA,KAAK,EAAC,MADR;AAEE,MAAA,aAAa,EAAC,WAFhB;AAGE,MAAA,aAAa,EAAC,OAHhB;AAIE,MAAA,QAAQ,EAAC,IAJX;AAKE,MAAA,UAAU,EAAC,MALb;AAME,MAAA,OAAO,EAAC,MANV;AAOE,MAAA,UAAU,EAAC,QAPb;AAQE,MAAA,cAAc,EAAC,eARjB;AASE,MAAA,UAAU,EAAC,MATb;AAUE,MAAA,KAAK,EAAEZ,iBAAiB,CAAC,UAAD,EAAa,SAAb,CAV1B,CAWE;AAXF;AAAA,gBAaGO;AAbH;AAAA;AAAA;AAAA;AAAA,YADF,eAgBE,QAAC,MAAD,CAAQ,GAAR;AAAY,MAAA,IAAI,EAAC,OAAjB;AAAyB,MAAA,MAAM,EAAE,CAACO,MAAlC;AAA0C,MAAA,EAAE,EAAC,MAA7C;AAAoD,MAAA,EAAE,EAAC,IAAvD;AAAA,gBACGJ;AADH;AAAA;AAAA;AAAA;AAAA,YAhBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAsBD;;AAED,eAAeN,eAAf","sourcesContent":["import { BoxProps, chakra, useColorModeValue } from \"@chakra-ui/react\"\nimport { ReactNode, RefObject, useEffect, useRef, useState } from \"react\"\n\ninterface SidebarCategoryProps extends BoxProps {\n  isMobile?: boolean\n  title: string\n  opened?: boolean\n  selected?: boolean\n  children: ReactNode\n  contentRef?: RefObject<any>\n}\n\ninterface SidebarState {\n  toggle?: boolean\n  shouldScroll?: boolean\n}\n\nfunction SidebarCategory(props: SidebarCategoryProps) {\n  const {\n    isMobile,\n    title,\n    selected,\n    opened,\n    children,\n    contentRef,\n    ...rest\n  } = props\n\n  const ref = useRef<HTMLDivElement | null>(null)\n\n  const [{ toggle, shouldScroll = false }, setToggle] = useState<SidebarState>({\n    toggle: selected || opened,\n  })\n\n  // const onClick = () => {\n  //   setToggle({ toggle: !toggle, shouldScroll: true })\n  // }\n\n  // If a category is selected indirectly, open it. This can happen when using the search input\n  useEffect(() => {\n    if (selected) {\n      setToggle({ toggle: true, shouldScroll: true })\n    }\n  }, [selected])\n\n  // Navigate to the start of the category when manually opened\n  useEffect(() => {\n    if (!ref.current || !contentRef?.current) return\n    if (toggle && shouldScroll) {\n      const contentEl = contentRef.current\n\n      if (toggle == true && contentEl) {\n        // 10 is added for better margin\n        const height =\n          ref.current.offsetTop - (isMobile ? 10 : contentEl.offsetTop)\n        contentEl.scrollTop = height\n        setToggle({ toggle })\n      }\n    }\n  }, [toggle, shouldScroll, isMobile, contentRef])\n\n  return (\n    <chakra.div mt=\"8\" ref={ref} {...rest}>\n      <chakra.p\n        width=\"full\"\n        textTransform=\"uppercase\"\n        letterSpacing=\"wider\"\n        fontSize=\"xs\"\n        fontWeight=\"bold\"\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"space-between\"\n        userSelect=\"none\"\n        color={useColorModeValue(\"gray.500\", \"inherit\")}\n        // onClick={onClick}\n      >\n        {title}\n      </chakra.p>\n      <chakra.div role=\"group\" hidden={!toggle} mt=\"16px\" mx=\"-3\">\n        {children}\n      </chakra.div>\n    </chakra.div>\n  )\n}\n\nexport default SidebarCategory\n"]},"metadata":{},"sourceType":"module"}