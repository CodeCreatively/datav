{"ast":null,"code":"var _jsxFileName = \"/Users/sunfei/Downloads/website/pages/docs/typography/heading.mdx\";\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport Layout from '/Users/sunfei/Downloads/website/layouts/index';\nimport ComponentLinks from \"../../../src/components/component-links\";\nimport { Box } from \"@chakra-ui/react\";\nexport const frontMatter = {\n  title: 'Heading',\n  package: '@chakra-ui/layout',\n  description: 'Headings are used for rendering headlines.',\n  slug: '/docs/typography/heading',\n  lastEdited: undefined,\n  editUrl: 'https://github.com/chakra-ui/chakra-ui/edit/develop/website/pages/docs/typography/heading.mdx',\n  author: undefined,\n  tags: undefined,\n  __resourcePath: 'docs/typography/heading.mdx',\n  __scans: {},\n  layout: 'index'\n};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return mdx(\"div\", _objectSpread(_objectSpread({}, props), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 14\n    }\n  }));\n};\n\nconst PropsTable = makeShortcode(\"PropsTable\");\nconst layoutProps = {\n  frontMatter\n};\nconst MDXLayout = Layout;\nexport default function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _objectSpread(_objectSpread(_objectSpread({}, layoutProps), props), {}, {\n    components: components,\n    mdxType: \"MDXLayout\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 10\n    }\n  }), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, `Headings are used for rendering headlines.`), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 8\n    }\n  }, `Heading`), ` composes `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 73\n    }\n  }, `Box`), ` so you can use all the style props and add responsive\nstyles as well. It renders an `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 33\n    }\n  }, `<h2>`), ` tag by default.`), mdx(ComponentLinks, {\n    theme: {\n      componentName: \"heading\"\n    },\n    github: {\n      package: \"layout\"\n    },\n    npm: {\n      package: \"@chakra-ui/layout\"\n    },\n    mdxType: \"ComponentLinks\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, mdx(\"carbon-ad\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 8\n    }\n  })), mdx(\"h2\", _objectSpread(_objectSpread({}, {\n    \"id\": \"import\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }), `Import`), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 10\n    }\n  }), `import { Heading } from \"@chakra-ui/react\"\n`)), mdx(\"h2\", _objectSpread(_objectSpread({}, {\n    \"id\": \"usage\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }), `Usage`), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 10\n    }\n  }), `<Heading>I'm a Heading</Heading>\n`)), mdx(\"h3\", _objectSpread(_objectSpread({}, {\n    \"id\": \"changing-font-size\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }), `Changing font size`), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }, `To increase the size of the heading, you can use the `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 65\n    }\n  }, `fontSize`), ` or `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 125\n    }\n  }, `size`), ` props.\nIf you use the `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 18\n    }\n  }, `size`), ` prop, the font size of the heading will automatically\ndecrease in size for smaller screens.`), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 10\n    }\n  }), `<Stack spacing={6}>\n  <Heading as=\"h1\" size=\"4xl\" isTruncated>\n    (4xl) In love with React & Next\n  </Heading>\n  <Heading as=\"h2\" size=\"3xl\" isTruncated>\n    (3xl) In love with React & Next\n  </Heading>\n  <Heading as=\"h2\" size=\"2xl\">\n    (2xl) In love with React & Next\n  </Heading>\n  <Heading as=\"h2\" size=\"xl\">\n    (xl) In love with React & Next\n  </Heading>\n  <Heading as=\"h3\" size=\"lg\">\n    (lg) In love with React & Next\n  </Heading>\n  <Heading as=\"h4\" size=\"md\">\n    (md) In love with React & Next\n  </Heading>\n  <Heading as=\"h5\" size=\"sm\">\n    (sm) In love with React & Next\n  </Heading>\n  <Heading as=\"h6\" size=\"xs\">\n    (xs) In love with React & Next\n  </Heading>\n</Stack>\n`)), mdx(\"h3\", _objectSpread(_objectSpread({}, {\n    \"id\": \"truncate-heading\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 5\n    }\n  }), `Truncate heading`), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 5\n    }\n  }, `Pass the `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 21\n    }\n  }, `isTruncated`), ` prop to render an ellipsis when the heading exceeds the\nwidth of the viewport or `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 28\n    }\n  }, `maxWidth`), ` prop.`), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 10\n    }\n  }), `<Heading isTruncated>\n  Basic text writing, including headings, body text, lists, and more.\n</Heading>\n`)), mdx(\"h3\", _objectSpread(_objectSpread({}, {\n    \"id\": \"override-style\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 5\n    }\n  }), `Override style`), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 5\n    }\n  }, `You can override the size of the Heading component by passing the `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 78\n    }\n  }, `fontSize`), `\nprop. No need to write `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 26\n    }\n  }, `css`), ` or `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 81\n    }\n  }, `styled()`), `.`), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 10\n    }\n  }), `<Heading size=\"lg\" fontSize=\"50px\">\n  I'm overriding this heading\n</Heading>\n`)), mdx(\"h2\", _objectSpread(_objectSpread({}, {\n    \"id\": \"composition\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 5\n    }\n  }), `Composition`), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 10\n    }\n  }), `// Example from paystack.com\n\n<Box maxW=\"32rem\">\n  <Heading mb={4}>Modern online and offline payments for Africa</Heading>\n  <Text fontSize=\"xl\">\n    Paystack helps businesses in Africa get paid by anyone, anywhere in the\n    world\n  </Text>\n  <Button size=\"lg\" colorScheme=\"green\" mt=\"24px\">\n    Create a free account\n  </Button>\n</Box>\n`)), mdx(\"h2\", _objectSpread(_objectSpread({}, {\n    \"id\": \"props\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 5\n    }\n  }), `Props`), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 5\n    }\n  }, `The `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 16\n    }\n  }, `Heading`), ` composes the `, mdx(\"a\", _objectSpread(_objectSpread({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/docs/layout/box\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 85\n    }\n  }), `Box`), ` component, so you can pass\nall `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }\n  }, `Box`), ` props.`), mdx(PropsTable, {\n    of: \"Heading\",\n    omit: null,\n    mdxType: \"PropsTable\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 5\n    }\n  }));\n}\n;\nMDXContent.isMDXComponent = true;","map":{"version":3,"sources":["/Users/sunfei/Downloads/website/pages/docs/typography/heading.mdx"],"names":["React","mdx","Layout","ComponentLinks","Box","frontMatter","title","package","description","slug","lastEdited","undefined","editUrl","author","tags","__resourcePath","__scans","layout","makeShortcode","name","MDXDefaultShortcode","props","console","warn","PropsTable","layoutProps","MDXLayout","MDXContent","components","componentName","isMDXComponent"],"mappings":"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","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport Layout, {  } from '/Users/sunfei/Downloads/website/layouts/index'\nimport ComponentLinks from \"../../../src/components/component-links\"\nimport { Box } from \"@chakra-ui/react\"\nexport const frontMatter = {\n  title: 'Heading',\n  package: '@chakra-ui/layout',\n  description: 'Headings are used for rendering headlines.',\n  slug: '/docs/typography/heading',\n  lastEdited: undefined,\n  editUrl: 'https://github.com/chakra-ui/chakra-ui/edit/develop/website/pages/docs/typography/heading.mdx',\n  author: undefined,\n  tags: undefined,\n  __resourcePath: 'docs/typography/heading.mdx',\n  __scans: {},\n  layout: 'index'\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n      console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n      return <div {...props}/>\n    };\nconst PropsTable = makeShortcode(\"PropsTable\");\nconst layoutProps = {\n  frontMatter\n};\nconst MDXLayout = Layout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n    <p>{`Headings are used for rendering headlines.`}</p>\n    <p><inlineCode parentName=\"p\">{`Heading`}</inlineCode>{` composes `}<inlineCode parentName=\"p\">{`Box`}</inlineCode>{` so you can use all the style props and add responsive\nstyles as well. It renders an `}<inlineCode parentName=\"p\">{`<h2>`}</inlineCode>{` tag by default.`}</p>\n    <ComponentLinks theme={{\n      componentName: \"heading\"\n    }} github={{\n      package: \"layout\"\n    }} npm={{\n      package: \"@chakra-ui/layout\"\n    }} mdxType=\"ComponentLinks\" />\n    <p><carbon-ad></carbon-ad></p>\n    <h2 {...{\n      \"id\": \"import\"\n    }}>{`Import`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { Heading } from \"@chakra-ui/react\"\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Heading>I'm a Heading</Heading>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"changing-font-size\"\n    }}>{`Changing font size`}</h3>\n    <p>{`To increase the size of the heading, you can use the `}<inlineCode parentName=\"p\">{`fontSize`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`size`}</inlineCode>{` props.\nIf you use the `}<inlineCode parentName=\"p\">{`size`}</inlineCode>{` prop, the font size of the heading will automatically\ndecrease in size for smaller screens.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Stack spacing={6}>\n  <Heading as=\"h1\" size=\"4xl\" isTruncated>\n    (4xl) In love with React & Next\n  </Heading>\n  <Heading as=\"h2\" size=\"3xl\" isTruncated>\n    (3xl) In love with React & Next\n  </Heading>\n  <Heading as=\"h2\" size=\"2xl\">\n    (2xl) In love with React & Next\n  </Heading>\n  <Heading as=\"h2\" size=\"xl\">\n    (xl) In love with React & Next\n  </Heading>\n  <Heading as=\"h3\" size=\"lg\">\n    (lg) In love with React & Next\n  </Heading>\n  <Heading as=\"h4\" size=\"md\">\n    (md) In love with React & Next\n  </Heading>\n  <Heading as=\"h5\" size=\"sm\">\n    (sm) In love with React & Next\n  </Heading>\n  <Heading as=\"h6\" size=\"xs\">\n    (xs) In love with React & Next\n  </Heading>\n</Stack>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"truncate-heading\"\n    }}>{`Truncate heading`}</h3>\n    <p>{`Pass the `}<inlineCode parentName=\"p\">{`isTruncated`}</inlineCode>{` prop to render an ellipsis when the heading exceeds the\nwidth of the viewport or `}<inlineCode parentName=\"p\">{`maxWidth`}</inlineCode>{` prop.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Heading isTruncated>\n  Basic text writing, including headings, body text, lists, and more.\n</Heading>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"override-style\"\n    }}>{`Override style`}</h3>\n    <p>{`You can override the size of the Heading component by passing the `}<inlineCode parentName=\"p\">{`fontSize`}</inlineCode>{`\nprop. No need to write `}<inlineCode parentName=\"p\">{`css`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`styled()`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Heading size=\"lg\" fontSize=\"50px\">\n  I'm overriding this heading\n</Heading>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"composition\"\n    }}>{`Composition`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// Example from paystack.com\n\n<Box maxW=\"32rem\">\n  <Heading mb={4}>Modern online and offline payments for Africa</Heading>\n  <Text fontSize=\"xl\">\n    Paystack helps businesses in Africa get paid by anyone, anywhere in the\n    world\n  </Text>\n  <Button size=\"lg\" colorScheme=\"green\" mt=\"24px\">\n    Create a free account\n  </Button>\n</Box>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Heading`}</inlineCode>{` composes the `}<a parentName=\"p\" {...{\n        \"href\": \"/docs/layout/box\"\n      }}>{`Box`}</a>{` component, so you can pass\nall `}<inlineCode parentName=\"p\">{`Box`}</inlineCode>{` props.`}</p>\n    <PropsTable of=\"Heading\" omit={null} mdxType=\"PropsTable\" />\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"]},"metadata":{},"sourceType":"module"}