{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/sunfei/Downloads/website/pages/docs/features/chakra-factory.mdx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport Layout from '/Users/sunfei/Downloads/website/layouts/index';\nexport var frontMatter = {\n  title: 'Chakra Factory',\n  \"package\": '@chakra-ui/system',\n  description: 'Using the chakra factory and elements',\n  slug: '/docs/features/chakra-factory',\n  lastEdited: undefined,\n  editUrl: 'https://github.com/chakra-ui/chakra-ui/edit/develop/website/pages/docs/features/chakra-factory.mdx',\n  author: undefined,\n  tags: undefined,\n  __resourcePath: 'docs/features/chakra-factory.mdx',\n  __scans: {},\n  layout: 'index'\n};\nvar layoutProps = {\n  frontMatter: frontMatter\n};\nvar MDXLayout = Layout;\nexport default function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _objectSpread(_objectSpread(_objectSpread({}, layoutProps), props), {}, {\n    components: components,\n    mdxType: \"MDXLayout\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 10\n    }\n  }), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }, \"Chakra factory serves as an \", mdx(\"strong\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 40\n    }\n  }, \"object of chakra enabled JSX elements\"), \", and also\\n\", mdx(\"strong\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 3\n    }\n  }, \"a function that can be used to enable custom component\"), \" receive chakra's\\nstyle props.\"), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 10\n    }\n  }), \"import { chakra } from \\\"@chakra-ui/react\\\"\\n\")), mdx(\"h2\", _objectSpread(_objectSpread({}, {\n    \"id\": \"chakra-jsx-elements\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }), \"Chakra JSX Elements\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }, \"Create base html elements with theme-aware style props using \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 73\n    }\n  }, \"chakra.<element>\"), \"\\nnotation. For example, if you want a plain html button with ability to pass\\nchakra styles, you can write \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 32\n    }\n  }, \"<chakra.button />\"), \".\"), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 10\n    }\n  }), \"<chakra.button\\n  px=\\\"3\\\"\\n  py=\\\"2\\\"\\n  bg=\\\"green.200\\\"\\n  rounded=\\\"md\\\"\\n  _hover={{ bg: \\\"green.300\\\" }}\\n>\\n  Click me\\n</chakra.button>\\n\")), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, \"This reduces the need to create custom component wrappers and name them. This\\nsyntax is available for common html elements. See the reference for the full\\n\", mdx(\"a\", _objectSpread(_objectSpread({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/chakra-ui/chakra-ui/blob/develop/packages/system/src/system.utils.ts#L9\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 3\n    }\n  }), \"list of elements\"), \"\\nsupported.\"), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 10\n    }\n  }), \"<chakra.h1 fontSize=\\\"lg\\\"> Heading </chakra.h1>\\n\")), mdx(\"h2\", _objectSpread(_objectSpread({}, {\n    \"id\": \"chakra-factory-function\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }\n  }), \"Chakra factory function\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  }, \"This is a function that converts \", mdx(\"strong\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 45\n    }\n  }, \"non-chakra components\"), \" or \", mdx(\"strong\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 110\n    }\n  }, \"jsx element\"), \" to\\nchakra-enabled components so you can pass style props to them.\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }\n  }, \"Consider a package called \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 38\n    }\n  }, \"react-input-autoresize\"), \", let's use the chakra factory\\nfunction to make possible to pass style props.\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }\n  }, \"The function will infer the prop types from the wrapped component and also add\\nchakra style props.\"), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 10\n    }\n  }), \"import { chakra } from \\\"@chakra-ui/react\\\"\\nimport Textarea from \\\"react-input-autoresize\\\"\\n\\nconst AutoResizeInput = chakra(Textarea)\\n\\nfunction Example() {\\n  return <AutoResizeInput bg=\\\"red.200\\\" fontSize=\\\"12px\\\" />\\n}\\n\")), mdx(\"blockquote\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }\n  }, mdx(\"p\", {\n    parentName: \"blockquote\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }, \"Considering that Chakra uses \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 67\n    }\n  }, \"emotion\"), \" under the hood, ensure the non-chakra\\ncomponent accepts \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 21\n    }\n  }, \"className\"), \" as props for this to work correctly\")), mdx(\"h3\", _objectSpread(_objectSpread({}, {\n    \"id\": \"attaching-styles\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 5\n    }\n  }), \"Attaching styles\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 5\n    }\n  }, \"In some instances, you might need to attach specific styles to the component\\nwrapped in the chakra factory\"), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 10\n    }\n  }), \"const AutoResizeInput = chakra(AutoResizeInput, {\\n  baseStyle: {\\n    bg: \\\"papayawhip\\\",\\n    color: \\\"red.500\\\",\\n  },\\n})\\n\")), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 5\n    }\n  }, \"You can also use the chakra factory on jsx elements as well.\"), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 10\n    }\n  }), \"const Card = chakra(\\\"div\\\", {\\n  baseStyle: {\\n    shadow: \\\"lg\\\",\\n    rounded: \\\"lg\\\",\\n    bg: \\\"white\\\",\\n  },\\n})\\n\")), mdx(\"h3\", _objectSpread(_objectSpread({}, {\n    \"id\": \"allowing-custom-props-to-be-forwarded\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 5\n    }\n  }), \"Allowing custom props to be forwarded\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 5\n    }\n  }, \"By default, the \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 28\n    }\n  }, \"chakra\"), \" factory only filters chakra related style props from\\ngetting to the DOM. For more fine-grained control of how and what prop should be\\nforwarded, pass the \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 23\n    }\n  }, \"shouldForwardProp\"), \" option.\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 5\n    }\n  }, \"Here's a simple example that allows all props (including chakra's style props)\\nto pass through except the \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 30\n    }\n  }, \"sample\"), \" prop.\"), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 10\n    }\n  }), \"const Div = chakra(\\\"div\\\", {\\n  shouldForwardProp: (prop) => ![\\\"sample\\\"].includes(prop),\\n})\\n\")), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 5\n    }\n  }, \"Another example that combines the default \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 54\n    }\n  }, \"shouldForwardProp\"), \" from Chakra UI\\nwith custom logic.\"), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 10\n    }\n  }), \"import { shouldForwardProp } from \\\"@chakra-ui/react\\\"\\n\\nconst Div = chakra(\\\"div\\\", {\\n  shouldForwardProp: (prop) => {\\n    // don't forward Chakra's props\\n    const isChakraProp = !shouldForwardProp(prop)\\n    if (isChakraProp) return false\\n\\n    // else, only forward `sample` prop\\n    return [\\\"sample\\\"].includes(prop)\\n  },\\n})\\n\")), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 5\n    }\n  }, \"To filter non-HTML attributes, you can leverage\\n\", mdx(\"a\", _objectSpread(_objectSpread({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/emotion-js/emotion/tree/master/packages/is-prop-valid\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 3\n    }\n  }), \"@emotion/is-prop-valid\"), \"\\npackage.\"), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 10\n    }\n  }), \"import isValidHTMLProp from \\\"@emotion/is-prop-valid\\\"\\nimport { shouldForwardProp } from \\\"@chakra-ui/react\\\"\\n\\nconst Div = chakra(\\\"div\\\", {\\n  shouldForwardProp: (prop) => {\\n    // don't forward Chakra's props\\n    const isChakraProp = !shouldForwardProp(prop)\\n    if (isChakraProp) return false\\n\\n    // forward valid HTML props\\n    const isValidProp = isValidHMTLProp(prop)\\n    if (isValidProp) return true\\n\\n    // else, only forward `sample` prop\\n    return [\\\"sample\\\"].includes(prop)\\n  },\\n})\\n\")));\n}\n_c = MDXContent;\n;\nMDXContent.isMDXComponent = true;\n\nvar _c;\n\n$RefreshReg$(_c, \"MDXContent\");","map":{"version":3,"sources":["/Users/sunfei/Downloads/website/pages/docs/features/chakra-factory.mdx"],"names":["React","mdx","Layout","frontMatter","title","description","slug","lastEdited","undefined","editUrl","author","tags","__resourcePath","__scans","layout","layoutProps","MDXLayout","MDXContent","components","props","isMDXComponent"],"mappings":"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","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport Layout, {  } from '/Users/sunfei/Downloads/website/layouts/index'\nexport const frontMatter = {\n  title: 'Chakra Factory',\n  package: '@chakra-ui/system',\n  description: 'Using the chakra factory and elements',\n  slug: '/docs/features/chakra-factory',\n  lastEdited: undefined,\n  editUrl: 'https://github.com/chakra-ui/chakra-ui/edit/develop/website/pages/docs/features/chakra-factory.mdx',\n  author: undefined,\n  tags: undefined,\n  __resourcePath: 'docs/features/chakra-factory.mdx',\n  __scans: {},\n  layout: 'index'\n};\n\nconst layoutProps = {\n  frontMatter\n};\nconst MDXLayout = Layout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <p>{`Chakra factory serves as an `}<strong parentName=\"p\">{`object of chakra enabled JSX elements`}</strong>{`, and also\n`}<strong parentName=\"p\">{`a function that can be used to enable custom component`}</strong>{` receive chakra's\nstyle props.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`import { chakra } from \"@chakra-ui/react\"\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"chakra-jsx-elements\"\n    }}>{`Chakra JSX Elements`}</h2>\n    <p>{`Create base html elements with theme-aware style props using `}<inlineCode parentName=\"p\">{`chakra.<element>`}</inlineCode>{`\nnotation. For example, if you want a plain html button with ability to pass\nchakra styles, you can write `}<inlineCode parentName=\"p\">{`<chakra.button />`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<chakra.button\n  px=\"3\"\n  py=\"2\"\n  bg=\"green.200\"\n  rounded=\"md\"\n  _hover={{ bg: \"green.300\" }}\n>\n  Click me\n</chakra.button>\n`}</code></pre>\n    <p>{`This reduces the need to create custom component wrappers and name them. This\nsyntax is available for common html elements. See the reference for the full\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/chakra-ui/chakra-ui/blob/develop/packages/system/src/system.utils.ts#L9\"\n      }}>{`list of elements`}</a>{`\nsupported.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live=false\",\n        \"live\": \"false\"\n      }}>{`<chakra.h1 fontSize=\"lg\"> Heading </chakra.h1>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"chakra-factory-function\"\n    }}>{`Chakra factory function`}</h2>\n    <p>{`This is a function that converts `}<strong parentName=\"p\">{`non-chakra components`}</strong>{` or `}<strong parentName=\"p\">{`jsx element`}</strong>{` to\nchakra-enabled components so you can pass style props to them.`}</p>\n    <p>{`Consider a package called `}<inlineCode parentName=\"p\">{`react-input-autoresize`}</inlineCode>{`, let's use the chakra factory\nfunction to make possible to pass style props.`}</p>\n    <p>{`The function will infer the prop types from the wrapped component and also add\nchakra style props.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live=false\",\n        \"live\": \"false\"\n      }}>{`import { chakra } from \"@chakra-ui/react\"\nimport Textarea from \"react-input-autoresize\"\n\nconst AutoResizeInput = chakra(Textarea)\n\nfunction Example() {\n  return <AutoResizeInput bg=\"red.200\" fontSize=\"12px\" />\n}\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Considering that Chakra uses `}<inlineCode parentName=\"p\">{`emotion`}</inlineCode>{` under the hood, ensure the non-chakra\ncomponent accepts `}<inlineCode parentName=\"p\">{`className`}</inlineCode>{` as props for this to work correctly`}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"attaching-styles\"\n    }}>{`Attaching styles`}</h3>\n    <p>{`In some instances, you might need to attach specific styles to the component\nwrapped in the chakra factory`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live=false\",\n        \"live\": \"false\"\n      }}>{`const AutoResizeInput = chakra(AutoResizeInput, {\n  baseStyle: {\n    bg: \"papayawhip\",\n    color: \"red.500\",\n  },\n})\n`}</code></pre>\n    <p>{`You can also use the chakra factory on jsx elements as well.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live=false\",\n        \"live\": \"false\"\n      }}>{`const Card = chakra(\"div\", {\n  baseStyle: {\n    shadow: \"lg\",\n    rounded: \"lg\",\n    bg: \"white\",\n  },\n})\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"allowing-custom-props-to-be-forwarded\"\n    }}>{`Allowing custom props to be forwarded`}</h3>\n    <p>{`By default, the `}<inlineCode parentName=\"p\">{`chakra`}</inlineCode>{` factory only filters chakra related style props from\ngetting to the DOM. For more fine-grained control of how and what prop should be\nforwarded, pass the `}<inlineCode parentName=\"p\">{`shouldForwardProp`}</inlineCode>{` option.`}</p>\n    <p>{`Here's a simple example that allows all props (including chakra's style props)\nto pass through except the `}<inlineCode parentName=\"p\">{`sample`}</inlineCode>{` prop.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live=false\",\n        \"live\": \"false\"\n      }}>{`const Div = chakra(\"div\", {\n  shouldForwardProp: (prop) => ![\"sample\"].includes(prop),\n})\n`}</code></pre>\n    <p>{`Another example that combines the default `}<inlineCode parentName=\"p\">{`shouldForwardProp`}</inlineCode>{` from Chakra UI\nwith custom logic.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live=false\",\n        \"live\": \"false\"\n      }}>{`import { shouldForwardProp } from \"@chakra-ui/react\"\n\nconst Div = chakra(\"div\", {\n  shouldForwardProp: (prop) => {\n    // don't forward Chakra's props\n    const isChakraProp = !shouldForwardProp(prop)\n    if (isChakraProp) return false\n\n    // else, only forward \\`sample\\` prop\n    return [\"sample\"].includes(prop)\n  },\n})\n`}</code></pre>\n    <p>{`To filter non-HTML attributes, you can leverage\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/emotion-js/emotion/tree/master/packages/is-prop-valid\"\n      }}>{`@emotion/is-prop-valid`}</a>{`\npackage.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live=false\",\n        \"live\": \"false\"\n      }}>{`import isValidHTMLProp from \"@emotion/is-prop-valid\"\nimport { shouldForwardProp } from \"@chakra-ui/react\"\n\nconst Div = chakra(\"div\", {\n  shouldForwardProp: (prop) => {\n    // don't forward Chakra's props\n    const isChakraProp = !shouldForwardProp(prop)\n    if (isChakraProp) return false\n\n    // forward valid HTML props\n    const isValidProp = isValidHMTLProp(prop)\n    if (isValidProp) return true\n\n    // else, only forward \\`sample\\` prop\n    return [\"sample\"].includes(prop)\n  },\n})\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"]},"metadata":{},"sourceType":"module"}