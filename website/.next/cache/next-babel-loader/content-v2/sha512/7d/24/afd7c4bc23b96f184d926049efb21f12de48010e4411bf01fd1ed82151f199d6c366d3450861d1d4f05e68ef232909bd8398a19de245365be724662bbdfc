{"ast":null,"code":"var _jsxFileName = \"/Users/sunfei/Downloads/website/pages/docs/features/responsive-styles.mdx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport Layout from '/Users/sunfei/Downloads/website/layouts/index';\nexport const frontMatter = {\n  title: 'Responsive Styles',\n  description: 'Chakra UI supports responsive styles out of the box',\n  slug: '/docs/features/responsive-styles',\n  lastEdited: undefined,\n  editUrl: 'https://github.com/chakra-ui/chakra-ui/edit/develop/website/pages/docs/features/responsive-styles.mdx',\n  author: undefined,\n  tags: undefined,\n  __resourcePath: 'docs/features/responsive-styles.mdx',\n  __scans: {},\n  layout: 'index'\n};\nconst layoutProps = {\n  frontMatter\n};\nconst MDXLayout = Layout;\nexport default function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _objectSpread(_objectSpread(_objectSpread({}, layoutProps), props), {}, {\n    components: components,\n    mdxType: \"MDXLayout\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 10\n    }\n  }), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, `Chakra UI supports responsive styles out of the box. Instead of manually adding\n`, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 3\n    }\n  }, `@media`), ` queries and adding nested styles throughout your code, Chakra UI allows\nyou provide object and array values to add mobile-first responsive styles.`), mdx(\"blockquote\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }, mdx(\"p\", {\n    parentName: \"blockquote\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }, `We use the `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 49\n    }\n  }, `@media(min-width)`), ` media query to ensure your interfaces are\nmobile-first.`)), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, `Responsive syntax relies on the breakpoints defined in the theme object. Chakra\nUI provides default breakpoints, here's what it looks like:`), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 10\n    }\n  }), `import { createBreakpoints } from \"@chakra-ui/theme-tools\"\n\nconst breakpoints = createBreakpoints({\n  sm: \"30em\",\n  md: \"48em\",\n  lg: \"62em\",\n  xl: \"80em\",\n  \"2xl\": \"96em\",\n})\n`)), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }, `To make styles responsive, you can use either the array or object syntax.`), mdx(\"h2\", _objectSpread(_objectSpread({}, {\n    \"id\": \"the-array-syntax\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }), `The Array syntax`), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }\n  }, `All style props that arrays as values for mobile-first responsive styles. This\nis the recommended method.`), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, `Let's say you have a `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 33\n    }\n  }, `Box`), ` with the following properties:`), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 10\n    }\n  }), `<Box bg=\"red.200\" w=\"400px\">\n  This is a box\n</Box>\n`)), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }, `To make the `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 24\n    }\n  }, `width`), ` or `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 81\n    }\n  }, `w`), ` responsive using the array syntax, here's what you\nneed to do:`), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 10\n    }\n  }), `<Box bg=\"red.200\" w={[300, 400, 560]}>\n  This is a box\n</Box>\n`)), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }\n  }, `To interpret array responsive values, Chakra UI converts the values defined in\n`, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 3\n    }\n  }, `theme.breakpoints`), ` and sorts them in ascending order. Afterward, we map the\nvalues defined in the array to the breakpoints`), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 10\n    }\n  }), `import { createBreakpoints } from \"@chakra-ui/theme-tools\"\n\n// This is the default breakpoint\nconst breakpoints = createBreakpoints({\n  sm: \"30em\",\n  md: \"48em\",\n  lg: \"62em\",\n  xl: \"80em\",\n  \"2xl\": \"96em\",\n})\n\n// Internally, we transform to this\nconst breakpoints = [\"0em\", \"30em\", \"48em\", \"62em\", \"80em\", \"96em\"]\n`)), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 5\n    }\n  }, `Here's how to interpret this syntax:`), mdx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 5\n    }\n  }, mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 27\n    }\n  }, `300px`), `: From `, mdx(\"inlineCode\", {\n    parentName: \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 88\n    }\n  }, `0em`), ` upwards`), mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 27\n    }\n  }, `400px`), `: From `, mdx(\"inlineCode\", {\n    parentName: \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 88\n    }\n  }, `30em`), ` upwards`), mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 27\n    }\n  }, `500px`), `: From `, mdx(\"inlineCode\", {\n    parentName: \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 88\n    }\n  }, `48em`), ` upwards`)), mdx(\"blockquote\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 5\n    }\n  }, mdx(\"p\", {\n    parentName: \"blockquote\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  }, `To skip certain breakpoints, you can pass `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 80\n    }\n  }, `null`), ` to any position in the array\nto avoid generating unnecessary CSS.`)), mdx(\"h2\", _objectSpread(_objectSpread({}, {\n    \"id\": \"the-object-syntax\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 5\n    }\n  }), `The Object syntax`), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 5\n    }\n  }, `You can also define responsive values with breakpoint aliases in an object. Any\nundefined alias key will define the base, non-responsive value.`), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 5\n    }\n  }, `Let's say you have a `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 33\n    }\n  }, `Text`), ` that looks like this:`), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 10\n    }\n  }), `<Text fontSize=\"40px\">This is a text</Text>\n`)), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 5\n    }\n  }, `To make the `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 24\n    }\n  }, `fontSize`), ` responsive using the object syntax, here's what you need\nto do:`), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 10\n    }\n  }), `<Text fontSize={{ base: \"24px\", md: \"40px\", lg: \"56px\" }}>\n  This is responsive text\n</Text>\n`)), mdx(\"blockquote\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 5\n    }\n  }, mdx(\"p\", {\n    parentName: \"blockquote\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }\n  }, mdx(\"strong\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 34\n    }\n  }, `Remember, Chakra UI uses the min-width media query for responsive design`), `.\nThe breakpoints are: `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 24\n    }\n  }, `sm = 30em`), `, `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 83\n    }\n  }, `md = 48em`), `, `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 142\n    }\n  }, `lg = 62em`), `, `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 201\n    }\n  }, `xl = 80em`))), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 5\n    }\n  }, `Here's how to interpret this syntax:`), mdx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 5\n    }\n  }, mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 27\n    }\n  }, `base`), `: From `, mdx(\"inlineCode\", {\n    parentName: \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 87\n    }\n  }, `0em`), ` upwards`), mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 27\n    }\n  }, `md`), `: From `, mdx(\"inlineCode\", {\n    parentName: \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 85\n    }\n  }, `48em`), ` upwards`), mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 27\n    }\n  }, `lg`), `: From `, mdx(\"inlineCode\", {\n    parentName: \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 85\n    }\n  }, `62em`), ` upwards`)), mdx(\"h2\", _objectSpread(_objectSpread({}, {\n    \"id\": \"more-examples\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 5\n    }\n  }), `More Examples`), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 5\n    }\n  }, `This works for every style prop in the theme specification, which means you can\nchange the style of most properties at a given breakpoint.`), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 10\n    }\n  }), `<>\n  <Box\n    height={{\n      base: \"100%\", // 0-48em\n      md: \"50%\", // 48em-80em,\n      xl: \"25%\", // 80em+\n    }}\n    bg=\"teal.400\"\n    width={[\n      \"100%\", // 0-30em\n      \"50%\", // 30em-48em\n      \"25%\", // 48em-62em\n      \"15%\", // 62em+\n    ]}\n  />\n  {/* responsive font size */}\n  <Box fontSize={[\"sm\", \"md\", \"lg\", \"xl\"]}>Font Size</Box>\n  {/* responsive margin */}\n  <Box mt={[2, 4, 6, 8]} width=\"full\" height=\"24px\" bg=\"tomato\" />\n  {/* responsive padding */}\n  <Box bg=\"papayawhip\" p={[2, 4, 6, 8]}>\n    Padding\n  </Box>\n</>\n`)), mdx(\"h2\", _objectSpread(_objectSpread({}, {\n    \"id\": \"under-the-hood\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 5\n    }\n  }), `Under the hood`), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 5\n    }\n  }, `This shortcut is an alternative to writing media queries out by hand. Given the\nfollowing:`), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 10\n    }\n  }), `<Box width={[1, 1 / 2, 1 / 4]} />\n`)), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 5\n    }\n  }, `It'll generate a CSS that looks like this`), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-css\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 10\n    }\n  }), `.Box {\n  width: 100%;\n}\n\n@media screen and (min-width: 40em) {\n  .Box {\n    width: 50%;\n  }\n}\n\n@media screen and (min-width: 52em) {\n  .Box {\n    width: 25%;\n  }\n}\n`)), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 5\n    }\n  }, `The equivalent of this style if you passed it as an object.`), mdx(\"h2\", _objectSpread(_objectSpread({}, {\n    \"id\": \"customizing-breakpoints\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 5\n    }\n  }), `Customizing Breakpoints`), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 5\n    }\n  }, `In some scenarios, you might need to define custom breakpoints for your\napplication. We recommended using common aliases like `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 57\n    }\n  }, `sm`), `, `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 109\n    }\n  }, `md`), `, `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 161\n    }\n  }, `lg`), `, and\n`, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 3\n    }\n  }, `xl`), `.`), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 5\n    }\n  }, `To define custom breakpoints, install `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 50\n    }\n  }, `@chakra-ui/theme-tools`), `, and use the\n`, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 3\n    }\n  }, `createBreakpoints`), ` utility we provide.`), mdx(\"blockquote\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 5\n    }\n  }, mdx(\"p\", {\n    parentName: \"blockquote\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }\n  }, `Note: Ensure the css unit of your breakpoints are the same. Use all `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 106\n    }\n  }, `px`), ` or\nall `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }\n  }, `em`), `, don't mix them.`)), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 10\n    }\n  }), `// 1. Import the utilities\nimport { extendTheme } from \"@chakra-ui/react\"\nimport { createBreakpoints } from \"@chakra-ui/theme-tools\"\n\n// 2. Update the breakpoints as key-value pairs\nconst breakpoints = createBreakpoints({\n  sm: \"320px\",\n  md: \"768px\",\n  lg: \"960px\",\n  xl: \"1200px\",\n})\n\n// 3. Extend the theme\nconst theme = extendTheme({ breakpoints })\n\n// 4. Now you can use the custom breakpoints\nfunction Example() {\n  return <Box width={{ base: \"100%\", sm: \"50%\", md: \"25%\" }} />\n}\n`)), mdx(\"h2\", _objectSpread(_objectSpread({}, {\n    \"id\": \"demo\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 5\n    }\n  }), `Demo`), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 5\n    }\n  }, `Here's a simple example of a marketing page component that uses a stacked layout\non small screens, and a side-by-side layout on larger screens `, mdx(\"strong\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 65\n    }\n  }, `(resize your\nbrowser to see it in action)`), `:`), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 10\n    }\n  }), `<Box p={4} display={{ md: \"flex\" }}>\n  <Box flexShrink={0}>\n    <Image\n      borderRadius=\"lg\"\n      width={{ md: 40 }}\n      src=\"https://bit.ly/2jYM25F\"\n      alt=\"Woman paying for a purchase\"\n    />\n  </Box>\n  <Box mt={{ base: 4, md: 0 }} ml={{ md: 6 }}>\n    <Text\n      fontWeight=\"bold\"\n      textTransform=\"uppercase\"\n      fontSize=\"sm\"\n      letterSpacing=\"wide\"\n      color=\"teal.600\"\n    >\n      Marketing\n    </Text>\n    <Link\n      mt={1}\n      display=\"block\"\n      fontSize=\"lg\"\n      lineHeight=\"normal\"\n      fontWeight=\"semibold\"\n      href=\"#\"\n    >\n      Finding customers for your new business\n    </Link>\n    <Text mt={2} color=\"gray.500\">\n      Getting a new business off the ground is a lot of hard work. Here are five\n      ideas you can use to find your first customers.\n    </Text>\n  </Box>\n</Box>\n`)));\n}\n;\nMDXContent.isMDXComponent = true;","map":{"version":3,"sources":["/Users/sunfei/Downloads/website/pages/docs/features/responsive-styles.mdx"],"names":["React","mdx","Layout","frontMatter","title","description","slug","lastEdited","undefined","editUrl","author","tags","__resourcePath","__scans","layout","layoutProps","MDXLayout","MDXContent","components","props","isMDXComponent"],"mappings":"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","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport Layout, {  } from '/Users/sunfei/Downloads/website/layouts/index'\nexport const frontMatter = {\n  title: 'Responsive Styles',\n  description: 'Chakra UI supports responsive styles out of the box',\n  slug: '/docs/features/responsive-styles',\n  lastEdited: undefined,\n  editUrl: 'https://github.com/chakra-ui/chakra-ui/edit/develop/website/pages/docs/features/responsive-styles.mdx',\n  author: undefined,\n  tags: undefined,\n  __resourcePath: 'docs/features/responsive-styles.mdx',\n  __scans: {},\n  layout: 'index'\n};\n\nconst layoutProps = {\n  frontMatter\n};\nconst MDXLayout = Layout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <p>{`Chakra UI supports responsive styles out of the box. Instead of manually adding\n`}<inlineCode parentName=\"p\">{`@media`}</inlineCode>{` queries and adding nested styles throughout your code, Chakra UI allows\nyou provide object and array values to add mobile-first responsive styles.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`We use the `}<inlineCode parentName=\"p\">{`@media(min-width)`}</inlineCode>{` media query to ensure your interfaces are\nmobile-first.`}</p>\n    </blockquote>\n    <p>{`Responsive syntax relies on the breakpoints defined in the theme object. Chakra\nUI provides default breakpoints, here's what it looks like:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { createBreakpoints } from \"@chakra-ui/theme-tools\"\n\nconst breakpoints = createBreakpoints({\n  sm: \"30em\",\n  md: \"48em\",\n  lg: \"62em\",\n  xl: \"80em\",\n  \"2xl\": \"96em\",\n})\n`}</code></pre>\n    <p>{`To make styles responsive, you can use either the array or object syntax.`}</p>\n    <h2 {...{\n      \"id\": \"the-array-syntax\"\n    }}>{`The Array syntax`}</h2>\n    <p>{`All style props that arrays as values for mobile-first responsive styles. This\nis the recommended method.`}</p>\n    <p>{`Let's say you have a `}<inlineCode parentName=\"p\">{`Box`}</inlineCode>{` with the following properties:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live=false\",\n        \"live\": \"false\"\n      }}>{`<Box bg=\"red.200\" w=\"400px\">\n  This is a box\n</Box>\n`}</code></pre>\n    <p>{`To make the `}<inlineCode parentName=\"p\">{`width`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`w`}</inlineCode>{` responsive using the array syntax, here's what you\nneed to do:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live=false\",\n        \"live\": \"false\"\n      }}>{`<Box bg=\"red.200\" w={[300, 400, 560]}>\n  This is a box\n</Box>\n`}</code></pre>\n    <p>{`To interpret array responsive values, Chakra UI converts the values defined in\n`}<inlineCode parentName=\"p\">{`theme.breakpoints`}</inlineCode>{` and sorts them in ascending order. Afterward, we map the\nvalues defined in the array to the breakpoints`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { createBreakpoints } from \"@chakra-ui/theme-tools\"\n\n// This is the default breakpoint\nconst breakpoints = createBreakpoints({\n  sm: \"30em\",\n  md: \"48em\",\n  lg: \"62em\",\n  xl: \"80em\",\n  \"2xl\": \"96em\",\n})\n\n// Internally, we transform to this\nconst breakpoints = [\"0em\", \"30em\", \"48em\", \"62em\", \"80em\", \"96em\"]\n`}</code></pre>\n    <p>{`Here's how to interpret this syntax:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`300px`}</inlineCode>{`: From `}<inlineCode parentName=\"li\">{`0em`}</inlineCode>{` upwards`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`400px`}</inlineCode>{`: From `}<inlineCode parentName=\"li\">{`30em`}</inlineCode>{` upwards`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`500px`}</inlineCode>{`: From `}<inlineCode parentName=\"li\">{`48em`}</inlineCode>{` upwards`}</li>\n    </ul>\n    <blockquote>\n      <p parentName=\"blockquote\">{`To skip certain breakpoints, you can pass `}<inlineCode parentName=\"p\">{`null`}</inlineCode>{` to any position in the array\nto avoid generating unnecessary CSS.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"the-object-syntax\"\n    }}>{`The Object syntax`}</h2>\n    <p>{`You can also define responsive values with breakpoint aliases in an object. Any\nundefined alias key will define the base, non-responsive value.`}</p>\n    <p>{`Let's say you have a `}<inlineCode parentName=\"p\">{`Text`}</inlineCode>{` that looks like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live=false\",\n        \"live\": \"false\"\n      }}>{`<Text fontSize=\"40px\">This is a text</Text>\n`}</code></pre>\n    <p>{`To make the `}<inlineCode parentName=\"p\">{`fontSize`}</inlineCode>{` responsive using the object syntax, here's what you need\nto do:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live=false\",\n        \"live\": \"false\"\n      }}>{`<Text fontSize={{ base: \"24px\", md: \"40px\", lg: \"56px\" }}>\n  This is responsive text\n</Text>\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Remember, Chakra UI uses the min-width media query for responsive design`}</strong>{`.\nThe breakpoints are: `}<inlineCode parentName=\"p\">{`sm = 30em`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`md = 48em`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`lg = 62em`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`xl = 80em`}</inlineCode></p>\n    </blockquote>\n    <p>{`Here's how to interpret this syntax:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`base`}</inlineCode>{`: From `}<inlineCode parentName=\"li\">{`0em`}</inlineCode>{` upwards`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`md`}</inlineCode>{`: From `}<inlineCode parentName=\"li\">{`48em`}</inlineCode>{` upwards`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`lg`}</inlineCode>{`: From `}<inlineCode parentName=\"li\">{`62em`}</inlineCode>{` upwards`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"more-examples\"\n    }}>{`More Examples`}</h2>\n    <p>{`This works for every style prop in the theme specification, which means you can\nchange the style of most properties at a given breakpoint.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live=false\",\n        \"live\": \"false\"\n      }}>{`<>\n  <Box\n    height={{\n      base: \"100%\", // 0-48em\n      md: \"50%\", // 48em-80em,\n      xl: \"25%\", // 80em+\n    }}\n    bg=\"teal.400\"\n    width={[\n      \"100%\", // 0-30em\n      \"50%\", // 30em-48em\n      \"25%\", // 48em-62em\n      \"15%\", // 62em+\n    ]}\n  />\n  {/* responsive font size */}\n  <Box fontSize={[\"sm\", \"md\", \"lg\", \"xl\"]}>Font Size</Box>\n  {/* responsive margin */}\n  <Box mt={[2, 4, 6, 8]} width=\"full\" height=\"24px\" bg=\"tomato\" />\n  {/* responsive padding */}\n  <Box bg=\"papayawhip\" p={[2, 4, 6, 8]}>\n    Padding\n  </Box>\n</>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"under-the-hood\"\n    }}>{`Under the hood`}</h2>\n    <p>{`This shortcut is an alternative to writing media queries out by hand. Given the\nfollowing:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live=false\",\n        \"live\": \"false\"\n      }}>{`<Box width={[1, 1 / 2, 1 / 4]} />\n`}</code></pre>\n    <p>{`It'll generate a CSS that looks like this`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`.Box {\n  width: 100%;\n}\n\n@media screen and (min-width: 40em) {\n  .Box {\n    width: 50%;\n  }\n}\n\n@media screen and (min-width: 52em) {\n  .Box {\n    width: 25%;\n  }\n}\n`}</code></pre>\n    <p>{`The equivalent of this style if you passed it as an object.`}</p>\n    <h2 {...{\n      \"id\": \"customizing-breakpoints\"\n    }}>{`Customizing Breakpoints`}</h2>\n    <p>{`In some scenarios, you might need to define custom breakpoints for your\napplication. We recommended using common aliases like `}<inlineCode parentName=\"p\">{`sm`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`md`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`lg`}</inlineCode>{`, and\n`}<inlineCode parentName=\"p\">{`xl`}</inlineCode>{`.`}</p>\n    <p>{`To define custom breakpoints, install `}<inlineCode parentName=\"p\">{`@chakra-ui/theme-tools`}</inlineCode>{`, and use the\n`}<inlineCode parentName=\"p\">{`createBreakpoints`}</inlineCode>{` utility we provide.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Note: Ensure the css unit of your breakpoints are the same. Use all `}<inlineCode parentName=\"p\">{`px`}</inlineCode>{` or\nall `}<inlineCode parentName=\"p\">{`em`}</inlineCode>{`, don't mix them.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live=false\",\n        \"live\": \"false\"\n      }}>{`// 1. Import the utilities\nimport { extendTheme } from \"@chakra-ui/react\"\nimport { createBreakpoints } from \"@chakra-ui/theme-tools\"\n\n// 2. Update the breakpoints as key-value pairs\nconst breakpoints = createBreakpoints({\n  sm: \"320px\",\n  md: \"768px\",\n  lg: \"960px\",\n  xl: \"1200px\",\n})\n\n// 3. Extend the theme\nconst theme = extendTheme({ breakpoints })\n\n// 4. Now you can use the custom breakpoints\nfunction Example() {\n  return <Box width={{ base: \"100%\", sm: \"50%\", md: \"25%\" }} />\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"demo\"\n    }}>{`Demo`}</h2>\n    <p>{`Here's a simple example of a marketing page component that uses a stacked layout\non small screens, and a side-by-side layout on larger screens `}<strong parentName=\"p\">{`(resize your\nbrowser to see it in action)`}</strong>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Box p={4} display={{ md: \"flex\" }}>\n  <Box flexShrink={0}>\n    <Image\n      borderRadius=\"lg\"\n      width={{ md: 40 }}\n      src=\"https://bit.ly/2jYM25F\"\n      alt=\"Woman paying for a purchase\"\n    />\n  </Box>\n  <Box mt={{ base: 4, md: 0 }} ml={{ md: 6 }}>\n    <Text\n      fontWeight=\"bold\"\n      textTransform=\"uppercase\"\n      fontSize=\"sm\"\n      letterSpacing=\"wide\"\n      color=\"teal.600\"\n    >\n      Marketing\n    </Text>\n    <Link\n      mt={1}\n      display=\"block\"\n      fontSize=\"lg\"\n      lineHeight=\"normal\"\n      fontWeight=\"semibold\"\n      href=\"#\"\n    >\n      Finding customers for your new business\n    </Link>\n    <Text mt={2} color=\"gray.500\">\n      Getting a new business off the ground is a lot of hard work. Here are five\n      ideas you can use to find your first customers.\n    </Text>\n  </Box>\n</Box>\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"]},"metadata":{},"sourceType":"module"}