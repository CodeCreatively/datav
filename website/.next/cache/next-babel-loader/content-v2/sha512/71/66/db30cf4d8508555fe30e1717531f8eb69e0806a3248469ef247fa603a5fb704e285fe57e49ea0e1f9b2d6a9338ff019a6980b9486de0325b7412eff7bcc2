{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nconst path = require(\"path\");\n\nconst execa = require(\"execa\");\n\nconst fromUnixTime = require(\"date-fns/fromUnixTime\");\n\nconst format = require(\"date-fns/format\");\n\nconst {\n  getEditUrl,\n  addLeadingSlash\n} = require(\"@docusaurus/utils\");\n\nconst {\n  Octokit\n} = require(\"@octokit/rest\");\n\nconst octokit = new Octokit({\n  auth: process.env.GITHUB_TOKEN\n});\n\nfunction fileToPath(str) {\n  return addLeadingSlash(str.replace(\".mdx\", \"\"));\n}\n\nasync function processFrontmatter(options) {\n  const {\n    path: mdxPath,\n    author,\n    tags,\n    baseEditUrl\n  } = options,\n        rest = _objectWithoutProperties(options, [\"path\", \"author\", \"tags\", \"baseEditUrl\"]); // read the file path\n\n\n  const filePath = path.join(process.cwd(), \"pages\", mdxPath); // get the last edited author and date\n\n  const lastEdited = (await getLastEdited(filePath)) || null; // get the edit url\n\n  const editUrl = getEditUrl(path.join(mdxPath), baseEditUrl); // get the slug\n\n  const slug = fileToPath(mdxPath); // if frontmatter inclues author, add the author's data\n\n  const authorData = author ? await getGithubUserData(author) : undefined;\n  return _objectSpread(_objectSpread({}, rest), {}, {\n    slug,\n    lastEdited,\n    editUrl,\n    author: authorData,\n    tags\n  });\n}\n/**\n * Format the last edited timestamp and author from git output\n */\n\n\nfunction getTimestampAndAuthor(str) {\n  if (!str) return null;\n  const GIT_COMMIT_TIMESTAMP_AUTHOR_REGEX = /^(\\d+), (.+)$/;\n  const temp = str.match(GIT_COMMIT_TIMESTAMP_AUTHOR_REGEX);\n  if (!temp || temp.length < 3) return null;\n  const [_, timestamp, author] = temp;\n  const dateStr = fromUnixTime(+timestamp);\n  return {\n    date: format(dateStr, \"MMMM dd, yyyy\"),\n    author\n  };\n}\n/**\n * Gets the last edited timestamp and author from git\n * using `git log`\n *\n * %an = author name\n * %ct = committer date, UNIX timestamp\n *\n * @see https://git-scm.com/docs/git-log\n */\n\n\nasync function getLastEdited(filePath) {\n  try {\n    const {\n      stdout\n    } = await execa(\"git\", [\"log\", \"-1\", \"--format=%ct, %an\", filePath]);\n    return getTimestampAndAuthor(stdout);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nasync function getGithubUserData(username) {\n  const {\n    data\n  } = await octokit.users.getByUsername({\n    username\n  });\n  const {\n    avatar_url: avatarUrl,\n    html_url: githubUrl,\n    blog: websiteUrl,\n    bio,\n    name,\n    twitter_username: twitterUsername\n  } = data;\n  return {\n    login: username,\n    avatarUrl,\n    githubUrl,\n    websiteUrl,\n    bio,\n    name,\n    twitterUsername\n  };\n}\n\nmodule.exports = {\n  getTimestampAndAuthor,\n  fileToPath,\n  getLastEdited,\n  processFrontmatter,\n  getGithubUserData\n};","map":{"version":3,"sources":["/Users/sunfei/Downloads/website/src/utils/mdx-utils.js"],"names":["path","require","execa","fromUnixTime","format","getEditUrl","addLeadingSlash","Octokit","octokit","auth","process","env","GITHUB_TOKEN","fileToPath","str","replace","processFrontmatter","options","mdxPath","author","tags","baseEditUrl","rest","filePath","join","cwd","lastEdited","getLastEdited","editUrl","slug","authorData","getGithubUserData","undefined","getTimestampAndAuthor","GIT_COMMIT_TIMESTAMP_AUTHOR_REGEX","temp","match","length","_","timestamp","dateStr","date","stdout","error","console","username","data","users","getByUsername","avatar_url","avatarUrl","html_url","githubUrl","blog","websiteUrl","bio","name","twitter_username","twitterUsername","login","module","exports"],"mappings":"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","sourcesContent":["const path = require(\"path\")\nconst execa = require(\"execa\")\nconst fromUnixTime = require(\"date-fns/fromUnixTime\")\nconst format = require(\"date-fns/format\")\nconst { getEditUrl, addLeadingSlash } = require(\"@docusaurus/utils\")\nconst { Octokit } = require(\"@octokit/rest\")\n\nconst octokit = new Octokit({ auth: process.env.GITHUB_TOKEN })\n\nfunction fileToPath(str) {\n  return addLeadingSlash(str.replace(\".mdx\", \"\"))\n}\n\nasync function processFrontmatter(options) {\n  const { path: mdxPath, author, tags, baseEditUrl, ...rest } = options\n\n  // read the file path\n  const filePath = path.join(process.cwd(), \"pages\", mdxPath)\n\n  // get the last edited author and date\n  const lastEdited = (await getLastEdited(filePath)) || null\n\n  // get the edit url\n  const editUrl = getEditUrl(path.join(mdxPath), baseEditUrl)\n\n  // get the slug\n  const slug = fileToPath(mdxPath)\n\n  // if frontmatter inclues author, add the author's data\n  const authorData = author ? await getGithubUserData(author) : undefined\n\n  return {\n    ...rest,\n    slug,\n    lastEdited,\n    editUrl,\n    author: authorData,\n    tags,\n  }\n}\n\n/**\n * Format the last edited timestamp and author from git output\n */\nfunction getTimestampAndAuthor(str) {\n  if (!str) return null\n\n  const GIT_COMMIT_TIMESTAMP_AUTHOR_REGEX = /^(\\d+), (.+)$/\n  const temp = str.match(GIT_COMMIT_TIMESTAMP_AUTHOR_REGEX)\n\n  if (!temp || temp.length < 3) return null\n\n  const [_, timestamp, author] = temp\n  const dateStr = fromUnixTime(+timestamp)\n\n  return {\n    date: format(dateStr, \"MMMM dd, yyyy\"),\n    author,\n  }\n}\n\n/**\n * Gets the last edited timestamp and author from git\n * using `git log`\n *\n * %an = author name\n * %ct = committer date, UNIX timestamp\n *\n * @see https://git-scm.com/docs/git-log\n */\nasync function getLastEdited(filePath) {\n  try {\n    const { stdout } = await execa(\"git\", [\n      \"log\",\n      \"-1\",\n      \"--format=%ct, %an\",\n      filePath,\n    ])\n    return getTimestampAndAuthor(stdout)\n  } catch (error) {\n    console.error(error)\n  }\n}\n\nasync function getGithubUserData(username) {\n  const { data } = await octokit.users.getByUsername({ username })\n\n  const {\n    avatar_url: avatarUrl,\n    html_url: githubUrl,\n    blog: websiteUrl,\n    bio,\n    name,\n    twitter_username: twitterUsername,\n  } = data\n\n  return {\n    login: username,\n    avatarUrl,\n    githubUrl,\n    websiteUrl,\n    bio,\n    name,\n    twitterUsername,\n  }\n}\n\nmodule.exports = {\n  getTimestampAndAuthor,\n  fileToPath,\n  getLastEdited,\n  processFrontmatter,\n  getGithubUserData,\n}\n"]},"metadata":{},"sourceType":"script"}