{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/sunfei/Downloads/website/pages/docs/features/color-mode.mdx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport Layout from '/Users/sunfei/Downloads/website/layouts/index';\nexport var frontMatter = {\n  title: 'Color Mode',\n  \"package\": '@chakra-ui/color-mode',\n  description: 'Working with color mode (light and dark mode) in Chakra UI',\n  slug: '/docs/features/color-mode',\n  lastEdited: undefined,\n  editUrl: 'https://github.com/chakra-ui/chakra-ui/edit/develop/website/pages/docs/features/color-mode.mdx',\n  author: undefined,\n  tags: undefined,\n  __resourcePath: 'docs/features/color-mode.mdx',\n  __scans: {},\n  layout: 'index'\n};\nvar layoutProps = {\n  frontMatter: frontMatter\n};\nvar MDXLayout = Layout;\nexport default function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _objectSpread(_objectSpread(_objectSpread({}, layoutProps), props), {}, {\n    components: components,\n    mdxType: \"MDXLayout\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 10\n    }\n  }), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }, \"Chakra UI comes with built-in support for managing color mode in your apps.\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }\n  }, \"By default, most of Chakra's components are dark mode compatible. In some\\nscenario, you might need to make your component respond to color mode.\"), mdx(\"blockquote\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, mdx(\"p\", {\n    parentName: \"blockquote\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, mdx(\"strong\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 34\n    }\n  }, \"Tip:\"), \" Chakra stores the color mode in \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 111\n    }\n  }, \"localStorage\"), \" and appends a\\nclassName to the \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 20\n    }\n  }, \"body\"), \" to ensure the color mode is persistent.\")), mdx(\"h2\", _objectSpread(_objectSpread({}, {\n    \"id\": \"setup\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }), \"Setup\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }, \"To get dark mode working correctly, you need to do two things:\"), mdx(\"ol\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, mdx(\"li\", {\n    parentName: \"ol\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, mdx(\"p\", {\n    parentName: \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, \"Update your theme config to determine how Chakra should manage color mode\\nupdates.\")), mdx(\"li\", {\n    parentName: \"ol\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }, mdx(\"p\", {\n    parentName: \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, \"Add the \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 40\n    }\n  }, \"ColorModeScript\"), \" to your application, and set the initial color mode\\nyour application should start with to either \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 48\n    }\n  }, \"light\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 103\n    }\n  }, \"dark\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 159\n    }\n  }, \"system\"), \". It\\nis \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 6\n    }\n  }, \"light\"), \" by default.\"))), mdx(\"h3\", _objectSpread(_objectSpread({}, {\n    \"id\": \"updating-the-theme-config\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }), \"Updating the theme config\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, \"The theme config for color mode has 2 options:\"), mdx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 27\n    }\n  }, \"initialColorMode\"), \": The initial mode you'd like you app to start with\"), mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 27\n    }\n  }, \"useSystemColorMode\"), \": If \", mdx(\"inlineCode\", {\n    parentName: \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 99\n    }\n  }, \"true\"), \", your app will change color mode based on the\\nuser's system preferences.\")), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 10\n    }\n  }), \"// theme.js\\n\\n// 1. import `extendTheme` function\\nimport { extendTheme } from \\\"@chakra-ui/react\\\"\\n\\n// 2. Add your color mode config\\nconst config = {\\n  initialColorMode: \\\"light\\\",\\n  useSystemColorMode: false,\\n}\\n\\n// 3. extend the theme\\nconst theme = extendTheme({ config })\\n\\nexport default theme\\n\")), mdx(\"h3\", _objectSpread(_objectSpread({}, {\n    \"id\": \"adding-the-colormodescript\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 5\n    }\n  }), \"Adding the \", mdx(\"inlineCode\", {\n    parentName: \"h3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 23\n    }\n  }, \"ColorModeScript\")), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 5\n    }\n  }, \"The color mode script needs to added before the \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 60\n    }\n  }, \"body\"), \" tag for local storage\\nsyncing to work correctly.\"), mdx(\"blockquote\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 5\n    }\n  }, mdx(\"p\", {\n    parentName: \"blockquote\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }, \"When setting the initial color mode, we recommend adding it as a config to\\nyour theme and reference that in the \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 40\n    }\n  }, \"ColorModeScript\"), \".\")), mdx(\"h4\", _objectSpread(_objectSpread({}, {\n    \"id\": \"for-nextjs\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 5\n    }\n  }), \"For Next.js\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 5\n    }\n  }, \"For Next.js, you need to add the \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 45\n    }\n  }, \"ColorModeScript\"), \" to the \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 116\n    }\n  }, \"_document.js\"), \" file.\"), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false ln={16}\",\n    \"live\": \"false\",\n    \"ln\": \"{16}\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 10\n    }\n  }), \"// pages/_document.js\\n\\nimport {ColorModeScript} from '@chakra-ui/react'\\nimport NextDocument, {Html, Head, Main, NextScript} from 'next/document'\\nimport theme from './theme'\\n\\nexport default class Document extends NextDocument {\\n  render() {\\n    return (\\n      <Html lang=\\\"en\\\">\\n        <Head />\\n        <body>\\n          <ColorModeScript initialColorMode={theme.config.initialColorMode} />\\n          <Main />\\n          <NextScript />\\n        </body>\\n      </Html>\\n    )\\n  }\\n}\\n\\n\")), mdx(\"h4\", _objectSpread(_objectSpread({}, {\n    \"id\": \"for-create-react-app\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 5\n    }\n  }), \"For Create React App\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 5\n    }\n  }, \"For Create React App, you need to add the \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 54\n    }\n  }, \"ColorModeScript\"), \" to the \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 125\n    }\n  }, \"index.js\"), \"\\nfile.\"), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false ln={10}\",\n    \"live\": \"false\",\n    \"ln\": \"{10}\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 10\n    }\n  }), \"// index.js\\n\\nimport ReactDOM from \\\"react-dom\\\"\\nimport App from \\\"./App\\\"\\nimport theme from \\\"./theme\\\"\\n\\nReactDOM.render(\\n  <>\\n    {/* \\uD83D\\uDC47 Here's the script */}\\n    <ColorModeScript initialColorMode={theme.config.initialColorMode} />\\n    <App />\\n  </>,\\n  document.getElementById(\\\"root\\\"),\\n)\\n\")), mdx(\"h4\", _objectSpread(_objectSpread({}, {\n    \"id\": \"for-gatsby\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 5\n    }\n  }), \"For Gatsby\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 5\n    }\n  }, \"For Gatsby.js, you need to add the \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 47\n    }\n  }, \"ColorModeScript\"), \" to the \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 118\n    }\n  }, \"gatsby-ssr.js\"), \"\\nfile.\"), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false ln={9-12}\",\n    \"live\": \"false\",\n    \"ln\": \"{9-12}\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 10\n    }\n  }), \"// gatsby-ssr.js\\n\\nimport React from \\\"react\\\"\\nimport theme from \\\"../theme\\\"\\nimport { ColorModeScript } from \\\"@chakra-ui/react\\\"\\n\\nexport const onRenderBody = ({ setPreBodyComponents }) => {\\n  setPreBodyComponents([\\n    <ColorModeScript\\n      initialColorMode={theme.config.initialColorMode}\\n      key=\\\"chakra-ui-no-flash\\\"\\n    />,\\n  ])\\n}\\n\")), mdx(\"h2\", _objectSpread(_objectSpread({}, {\n    \"id\": \"changing-color-mode\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 5\n    }\n  }), \"Changing Color Mode\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 5\n    }\n  }, \"To manage color mode in your application, chakra exposes the \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 73\n    }\n  }, \"useColorMode\"), \" or\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 3\n    }\n  }, \"useColorModeValue\"), \" hooks.\"), mdx(\"h3\", _objectSpread(_objectSpread({}, {\n    \"id\": \"usecolormode\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 5\n    }\n  }), \"useColorMode\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 5\n    }\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 8\n    }\n  }, \"useColorMode\"), \" is a React hook that gives you access to the current color mode,\\nand a function to toggle the color mode.\"), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 10\n    }\n  }), \"function Example() {\\n  const { colorMode, toggleColorMode } = useColorMode()\\n  return (\\n    <header>\\n      <Button onClick={toggleColorMode}>\\n        Toggle {colorMode === \\\"light\\\" ? \\\"Dark\\\" : \\\"Light\\\"}\\n      </Button>\\n    </header>\\n  )\\n}\\n\")), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 5\n    }\n  }, \"Calling \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 20\n    }\n  }, \"toggleColorMode\"), \" anywhere in your app tree toggles the color mode from\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 3\n    }\n  }, \"light\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 60\n    }\n  }, \"dark\"), \" and vice versa.\"), mdx(\"h3\", _objectSpread(_objectSpread({}, {\n    \"id\": \"usecolormodevalue\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 5\n    }\n  }), \"useColorModeValue\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 5\n    }\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 8\n    }\n  }, \"useColorModeValue\"), \" is a React hook used to change any value or style based on\\nthe color mode. It takes 2 arguments: the value in light mode, and the value in\\ndark mode.\"), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 10\n    }\n  }), \"// Here's the signature\\nconst value = useColorModeValue(lightModeValue, darkModeValue)\\n\")), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 5\n    }\n  }, \"Here's an example that changes the \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 47\n    }\n  }, \"background-color\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 116\n    }\n  }, \"color\"), \" using the\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 3\n    }\n  }, \"useColorModeValue\"), \" hook.\"), mdx(\"blockquote\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 5\n    }\n  }, mdx(\"p\", {\n    parentName: \"blockquote\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }\n  }, \"Click the \", mdx(\"strong\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 48\n    }\n  }, \"Toggle Mode\"), \" button to see it in action.\")), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 10\n    }\n  }), \"function StyleColorMode() {\\n  const { colorMode, toggleColorMode } = useColorMode()\\n\\n  const bg = useColorModeValue(\\\"red.500\\\", \\\"red.200\\\")\\n  const color = useColorModeValue(\\\"white\\\", \\\"gray.800\\\")\\n\\n  return (\\n    <>\\n      <Box mb={4} bg={bg} color={color}>\\n        This box's style will change based on the color mode.\\n      </Box>\\n      <Button size=\\\"sm\\\" onClick={toggleColorMode}>\\n        Toggle Mode\\n      </Button>\\n    </>\\n  )\\n}\\n\")), mdx(\"h2\", _objectSpread(_objectSpread({}, {\n    \"id\": \"forcing-a-specific-mode\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 5\n    }\n  }), \"Forcing a specific mode\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 5\n    }\n  }, \"In some occasions, you might want Chakra components to look the same in both\\nlight and dark modes. To achieve this, wrap the component in a \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 66\n    }\n  }, \"LightMode\"), \" or\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 3\n    }\n  }, \"DarkMode\"), \" component. Doing this will override the global \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 107\n    }\n  }, \"colorMode\"), \".\"), mdx(\"blockquote\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 5\n    }\n  }, mdx(\"p\", {\n    parentName: \"blockquote\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 7\n    }\n  }, \"Click the \", mdx(\"strong\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 48\n    }\n  }, \"\\\"Toggle Mode\\\"\"), \" button to see it in action.\")), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 10\n    }\n  }), \"function Example() {\\n  const { colorMode, toggleColorMode } = useColorMode()\\n\\n  return (\\n    <HStack>\\n      <LightMode>\\n        <Button size=\\\"sm\\\" colorScheme=\\\"blue\\\">\\n          Light Mode Always\\n        </Button>\\n      </LightMode>\\n\\n      <DarkMode>\\n        <Button size=\\\"sm\\\" colorScheme=\\\"blue\\\">\\n          Dark Mode Always\\n        </Button>\\n      </DarkMode>\\n\\n      <Button size=\\\"sm\\\" colorScheme=\\\"blue\\\" onClick={toggleColorMode}>\\n        Toggle Mode\\n      </Button>\\n    </HStack>\\n  )\\n}\\n\")), mdx(\"h2\", _objectSpread(_objectSpread({}, {\n    \"id\": \"add-colormodemanager-optional\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 5\n    }\n  }), \"Add colorModeManager (Optional)\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 5\n    }\n  }, \"For server-side rendered sites, e.g. in Next.js, you may want to know the color\\npreference of a user upfront so you can avoid rendering the initial color mode\\nand then changing it during hydration (so-called \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 52\n    }\n  }, \"flashing\"), \").\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 5\n    }\n  }, \"If you don't use SSR or don't care about this, you don't need to pass anything.\\nChakra will use \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 19\n    }\n  }, \"localStorageManager\"), \" by default.\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 5\n    }\n  }, \"Here's how to do this in Next.js 9.3 or newer:\"), mdx(\"ol\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 5\n    }\n  }, mdx(\"li\", {\n    parentName: \"ol\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 7\n    }\n  }, \"Create a reusable wrapper as demonstrated in the examples:\")), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 10\n    }\n  }), \"// e.g. src/Chakra.js\\n// a) import `ChakraProvider` component as well as the storageManagers\\nimport {\\n  ChakraProvider,\\n  cookieStorageManager,\\n  localStorageManager,\\n} from \\\"@chakra-ui/react\\\"\\n\\nexport function Chakra({ cookies, children }) {\\n  // b) Pass `colorModeManager` prop\\n  const colorModeManager =\\n    typeof cookies === \\\"string\\\"\\n      ? cookieStorageManager(cookies)\\n      : localStorageManager\\n\\n  return (\\n    <ChakraProvider colorModeManager={colorModeManager}>\\n      {children}\\n    </ChakraProvider>\\n  )\\n}\\n\\n// also export a reusable function getServerSideProps\\nexport function getServerSideProps({ req }) {\\n  return {\\n    props: {\\n      // first time users will not have any cookies and you may not return\\n      // undefined here, hence ?? is necessary\\n      cookies: req.headers.cookie ?? \\\"\\\",\\n    },\\n  }\\n}\\n\")), mdx(\"ol\", _objectSpread(_objectSpread({}, {\n    \"start\": 2\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 5\n    }\n  }), mdx(\"li\", {\n    parentName: \"ol\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 7\n    }\n  }, \"Import your wrapper component setting up Chakra:\")), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 10\n    }\n  }), \"// e.g pages/index.js\\nimport { Chakra } from \\\"../src/Chakra\\\"\\n\\nexport default function Index({ cookies }) {\\n  return (\\n    <Chakra cookies={cookies}>\\n      <h1>Example</h1>\\n    </Chakra>\\n  )\\n}\\n\\n// re-export the reusable `getServerSideProps` function\\nexport { getServerSideProps } from \\\"./Chakra\\\"\\n\")), mdx(\"blockquote\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 5\n    }\n  }, mdx(\"p\", {\n    parentName: \"blockquote\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 7\n    }\n  }, mdx(\"strong\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 34\n    }\n  }, \"Important:\"), \" if you're using \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 101\n    }\n  }, \"Next.js 9.3\"), \" or newer, the Next.js team\\nrecommends avoiding \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 23\n    }\n  }, \"getInitialProps\"), \". The following example is for Next 9.2\\nor older!\")), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 10\n    }\n  }), \"// pages/_app.js\\nimport {\\n  ChakraProvider,\\n  cookieStorageManager,\\n  localStorageManager,\\n} from \\\"@chakra-ui/react\\\"\\n\\nexport default function App({ cookies }) {\\n  // 2. Pass `colorModeManager` prop - it finds the relevant cookie on its own\\n  return (\\n    <ChakraProvider\\n      colorModeManager={\\n        typeof cookies === \\\"string\\\"\\n          ? cookieStorageManager(cookies)\\n          : localStorageManager\\n      }\\n    >\\n      <h1>Example</h1>\\n    </ChakraProvider>\\n  )\\n}\\n\\nApp.getInitialProps = ({ req }) => {\\n  return {\\n    // first time users will not have any cookies and you may not return\\n    // undefined here, hence ?? is necessary\\n    cookies: req.headers.cookie ?? \\\"\\\",\\n  }\\n}\\n\")), mdx(\"h2\", _objectSpread(_objectSpread({}, {\n    \"id\": \"color-mode-flash-issue\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 5\n    }\n  }), \"Color Mode Flash Issue\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 5\n    }\n  }, \"In some cases, when you switch to dark mode and refresh the page, you might\\nexperience a quick flash of white mode before it switches correctly.\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 389,\n      columnNumber: 5\n    }\n  }, \"This is a known issue and we're looking to fix it. If you have some ideas, feel\\nfree to share with us on Discord or Github.\"));\n}\n_c = MDXContent;\n;\nMDXContent.isMDXComponent = true;\n\nvar _c;\n\n$RefreshReg$(_c, \"MDXContent\");","map":{"version":3,"sources":["/Users/sunfei/Downloads/website/pages/docs/features/color-mode.mdx"],"names":["React","mdx","Layout","frontMatter","title","description","slug","lastEdited","undefined","editUrl","author","tags","__resourcePath","__scans","layout","layoutProps","MDXLayout","MDXContent","components","props","isMDXComponent"],"mappings":"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","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport Layout, {  } from '/Users/sunfei/Downloads/website/layouts/index'\nexport const frontMatter = {\n  title: 'Color Mode',\n  package: '@chakra-ui/color-mode',\n  description: 'Working with color mode (light and dark mode) in Chakra UI',\n  slug: '/docs/features/color-mode',\n  lastEdited: undefined,\n  editUrl: 'https://github.com/chakra-ui/chakra-ui/edit/develop/website/pages/docs/features/color-mode.mdx',\n  author: undefined,\n  tags: undefined,\n  __resourcePath: 'docs/features/color-mode.mdx',\n  __scans: {},\n  layout: 'index'\n};\n\nconst layoutProps = {\n  frontMatter\n};\nconst MDXLayout = Layout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <p>{`Chakra UI comes with built-in support for managing color mode in your apps.`}</p>\n    <p>{`By default, most of Chakra's components are dark mode compatible. In some\nscenario, you might need to make your component respond to color mode.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Tip:`}</strong>{` Chakra stores the color mode in `}<inlineCode parentName=\"p\">{`localStorage`}</inlineCode>{` and appends a\nclassName to the `}<inlineCode parentName=\"p\">{`body`}</inlineCode>{` to ensure the color mode is persistent.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"setup\"\n    }}>{`Setup`}</h2>\n    <p>{`To get dark mode working correctly, you need to do two things:`}</p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Update your theme config to determine how Chakra should manage color mode\nupdates.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Add the `}<inlineCode parentName=\"p\">{`ColorModeScript`}</inlineCode>{` to your application, and set the initial color mode\nyour application should start with to either `}<inlineCode parentName=\"p\">{`light`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`dark`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`system`}</inlineCode>{`. It\nis `}<inlineCode parentName=\"p\">{`light`}</inlineCode>{` by default.`}</p>\n      </li>\n    </ol>\n    <h3 {...{\n      \"id\": \"updating-the-theme-config\"\n    }}>{`Updating the theme config`}</h3>\n    <p>{`The theme config for color mode has 2 options:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`initialColorMode`}</inlineCode>{`: The initial mode you'd like you app to start with`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`useSystemColorMode`}</inlineCode>{`: If `}<inlineCode parentName=\"li\">{`true`}</inlineCode>{`, your app will change color mode based on the\nuser's system preferences.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live=false\",\n        \"live\": \"false\"\n      }}>{`// theme.js\n\n// 1. import \\`extendTheme\\` function\nimport { extendTheme } from \"@chakra-ui/react\"\n\n// 2. Add your color mode config\nconst config = {\n  initialColorMode: \"light\",\n  useSystemColorMode: false,\n}\n\n// 3. extend the theme\nconst theme = extendTheme({ config })\n\nexport default theme\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"adding-the-colormodescript\"\n    }}>{`Adding the `}<inlineCode parentName=\"h3\">{`ColorModeScript`}</inlineCode></h3>\n    <p>{`The color mode script needs to added before the `}<inlineCode parentName=\"p\">{`body`}</inlineCode>{` tag for local storage\nsyncing to work correctly.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`When setting the initial color mode, we recommend adding it as a config to\nyour theme and reference that in the `}<inlineCode parentName=\"p\">{`ColorModeScript`}</inlineCode>{`.`}</p>\n    </blockquote>\n    <h4 {...{\n      \"id\": \"for-nextjs\"\n    }}>{`For Next.js`}</h4>\n    <p>{`For Next.js, you need to add the `}<inlineCode parentName=\"p\">{`ColorModeScript`}</inlineCode>{` to the `}<inlineCode parentName=\"p\">{`_document.js`}</inlineCode>{` file.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live=false ln={16}\",\n        \"live\": \"false\",\n        \"ln\": \"{16}\"\n      }}>{`// pages/_document.js\n\nimport {ColorModeScript} from '@chakra-ui/react'\nimport NextDocument, {Html, Head, Main, NextScript} from 'next/document'\nimport theme from './theme'\n\nexport default class Document extends NextDocument {\n  render() {\n    return (\n      <Html lang=\"en\">\n        <Head />\n        <body>\n          <ColorModeScript initialColorMode={theme.config.initialColorMode} />\n          <Main />\n          <NextScript />\n        </body>\n      </Html>\n    )\n  }\n}\n\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"for-create-react-app\"\n    }}>{`For Create React App`}</h4>\n    <p>{`For Create React App, you need to add the `}<inlineCode parentName=\"p\">{`ColorModeScript`}</inlineCode>{` to the `}<inlineCode parentName=\"p\">{`index.js`}</inlineCode>{`\nfile.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live=false ln={10}\",\n        \"live\": \"false\",\n        \"ln\": \"{10}\"\n      }}>{`// index.js\n\nimport ReactDOM from \"react-dom\"\nimport App from \"./App\"\nimport theme from \"./theme\"\n\nReactDOM.render(\n  <>\n    {/* 👇 Here's the script */}\n    <ColorModeScript initialColorMode={theme.config.initialColorMode} />\n    <App />\n  </>,\n  document.getElementById(\"root\"),\n)\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"for-gatsby\"\n    }}>{`For Gatsby`}</h4>\n    <p>{`For Gatsby.js, you need to add the `}<inlineCode parentName=\"p\">{`ColorModeScript`}</inlineCode>{` to the `}<inlineCode parentName=\"p\">{`gatsby-ssr.js`}</inlineCode>{`\nfile.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live=false ln={9-12}\",\n        \"live\": \"false\",\n        \"ln\": \"{9-12}\"\n      }}>{`// gatsby-ssr.js\n\nimport React from \"react\"\nimport theme from \"../theme\"\nimport { ColorModeScript } from \"@chakra-ui/react\"\n\nexport const onRenderBody = ({ setPreBodyComponents }) => {\n  setPreBodyComponents([\n    <ColorModeScript\n      initialColorMode={theme.config.initialColorMode}\n      key=\"chakra-ui-no-flash\"\n    />,\n  ])\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"changing-color-mode\"\n    }}>{`Changing Color Mode`}</h2>\n    <p>{`To manage color mode in your application, chakra exposes the `}<inlineCode parentName=\"p\">{`useColorMode`}</inlineCode>{` or\n`}<inlineCode parentName=\"p\">{`useColorModeValue`}</inlineCode>{` hooks.`}</p>\n    <h3 {...{\n      \"id\": \"usecolormode\"\n    }}>{`useColorMode`}</h3>\n    <p><inlineCode parentName=\"p\">{`useColorMode`}</inlineCode>{` is a React hook that gives you access to the current color mode,\nand a function to toggle the color mode.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`function Example() {\n  const { colorMode, toggleColorMode } = useColorMode()\n  return (\n    <header>\n      <Button onClick={toggleColorMode}>\n        Toggle {colorMode === \"light\" ? \"Dark\" : \"Light\"}\n      </Button>\n    </header>\n  )\n}\n`}</code></pre>\n    <p>{`Calling `}<inlineCode parentName=\"p\">{`toggleColorMode`}</inlineCode>{` anywhere in your app tree toggles the color mode from\n`}<inlineCode parentName=\"p\">{`light`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`dark`}</inlineCode>{` and vice versa.`}</p>\n    <h3 {...{\n      \"id\": \"usecolormodevalue\"\n    }}>{`useColorModeValue`}</h3>\n    <p><inlineCode parentName=\"p\">{`useColorModeValue`}</inlineCode>{` is a React hook used to change any value or style based on\nthe color mode. It takes 2 arguments: the value in light mode, and the value in\ndark mode.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live=false\",\n        \"live\": \"false\"\n      }}>{`// Here's the signature\nconst value = useColorModeValue(lightModeValue, darkModeValue)\n`}</code></pre>\n    <p>{`Here's an example that changes the `}<inlineCode parentName=\"p\">{`background-color`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`color`}</inlineCode>{` using the\n`}<inlineCode parentName=\"p\">{`useColorModeValue`}</inlineCode>{` hook.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Click the `}<strong parentName=\"p\">{`Toggle Mode`}</strong>{` button to see it in action.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`function StyleColorMode() {\n  const { colorMode, toggleColorMode } = useColorMode()\n\n  const bg = useColorModeValue(\"red.500\", \"red.200\")\n  const color = useColorModeValue(\"white\", \"gray.800\")\n\n  return (\n    <>\n      <Box mb={4} bg={bg} color={color}>\n        This box's style will change based on the color mode.\n      </Box>\n      <Button size=\"sm\" onClick={toggleColorMode}>\n        Toggle Mode\n      </Button>\n    </>\n  )\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"forcing-a-specific-mode\"\n    }}>{`Forcing a specific mode`}</h2>\n    <p>{`In some occasions, you might want Chakra components to look the same in both\nlight and dark modes. To achieve this, wrap the component in a `}<inlineCode parentName=\"p\">{`LightMode`}</inlineCode>{` or\n`}<inlineCode parentName=\"p\">{`DarkMode`}</inlineCode>{` component. Doing this will override the global `}<inlineCode parentName=\"p\">{`colorMode`}</inlineCode>{`.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Click the `}<strong parentName=\"p\">{`\"Toggle Mode\"`}</strong>{` button to see it in action.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`function Example() {\n  const { colorMode, toggleColorMode } = useColorMode()\n\n  return (\n    <HStack>\n      <LightMode>\n        <Button size=\"sm\" colorScheme=\"blue\">\n          Light Mode Always\n        </Button>\n      </LightMode>\n\n      <DarkMode>\n        <Button size=\"sm\" colorScheme=\"blue\">\n          Dark Mode Always\n        </Button>\n      </DarkMode>\n\n      <Button size=\"sm\" colorScheme=\"blue\" onClick={toggleColorMode}>\n        Toggle Mode\n      </Button>\n    </HStack>\n  )\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"add-colormodemanager-optional\"\n    }}>{`Add colorModeManager (Optional)`}</h2>\n    <p>{`For server-side rendered sites, e.g. in Next.js, you may want to know the color\npreference of a user upfront so you can avoid rendering the initial color mode\nand then changing it during hydration (so-called `}<inlineCode parentName=\"p\">{`flashing`}</inlineCode>{`).`}</p>\n    <p>{`If you don't use SSR or don't care about this, you don't need to pass anything.\nChakra will use `}<inlineCode parentName=\"p\">{`localStorageManager`}</inlineCode>{` by default.`}</p>\n    <p>{`Here's how to do this in Next.js 9.3 or newer:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Create a reusable wrapper as demonstrated in the examples:`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live=false\",\n        \"live\": \"false\"\n      }}>{`// e.g. src/Chakra.js\n// a) import \\`ChakraProvider\\` component as well as the storageManagers\nimport {\n  ChakraProvider,\n  cookieStorageManager,\n  localStorageManager,\n} from \"@chakra-ui/react\"\n\nexport function Chakra({ cookies, children }) {\n  // b) Pass \\`colorModeManager\\` prop\n  const colorModeManager =\n    typeof cookies === \"string\"\n      ? cookieStorageManager(cookies)\n      : localStorageManager\n\n  return (\n    <ChakraProvider colorModeManager={colorModeManager}>\n      {children}\n    </ChakraProvider>\n  )\n}\n\n// also export a reusable function getServerSideProps\nexport function getServerSideProps({ req }) {\n  return {\n    props: {\n      // first time users will not have any cookies and you may not return\n      // undefined here, hence ?? is necessary\n      cookies: req.headers.cookie ?? \"\",\n    },\n  }\n}\n`}</code></pre>\n    <ol {...{\n      \"start\": 2\n    }}>\n      <li parentName=\"ol\">{`Import your wrapper component setting up Chakra:`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live=false\",\n        \"live\": \"false\"\n      }}>{`// e.g pages/index.js\nimport { Chakra } from \"../src/Chakra\"\n\nexport default function Index({ cookies }) {\n  return (\n    <Chakra cookies={cookies}>\n      <h1>Example</h1>\n    </Chakra>\n  )\n}\n\n// re-export the reusable \\`getServerSideProps\\` function\nexport { getServerSideProps } from \"./Chakra\"\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Important:`}</strong>{` if you're using `}<inlineCode parentName=\"p\">{`Next.js 9.3`}</inlineCode>{` or newer, the Next.js team\nrecommends avoiding `}<inlineCode parentName=\"p\">{`getInitialProps`}</inlineCode>{`. The following example is for Next 9.2\nor older!`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live=false\",\n        \"live\": \"false\"\n      }}>{`// pages/_app.js\nimport {\n  ChakraProvider,\n  cookieStorageManager,\n  localStorageManager,\n} from \"@chakra-ui/react\"\n\nexport default function App({ cookies }) {\n  // 2. Pass \\`colorModeManager\\` prop - it finds the relevant cookie on its own\n  return (\n    <ChakraProvider\n      colorModeManager={\n        typeof cookies === \"string\"\n          ? cookieStorageManager(cookies)\n          : localStorageManager\n      }\n    >\n      <h1>Example</h1>\n    </ChakraProvider>\n  )\n}\n\nApp.getInitialProps = ({ req }) => {\n  return {\n    // first time users will not have any cookies and you may not return\n    // undefined here, hence ?? is necessary\n    cookies: req.headers.cookie ?? \"\",\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"color-mode-flash-issue\"\n    }}>{`Color Mode Flash Issue`}</h2>\n    <p>{`In some cases, when you switch to dark mode and refresh the page, you might\nexperience a quick flash of white mode before it switches correctly.`}</p>\n    <p>{`This is a known issue and we're looking to fix it. If you have some ideas, feel\nfree to share with us on Discord or Github.`}</p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"]},"metadata":{},"sourceType":"module"}