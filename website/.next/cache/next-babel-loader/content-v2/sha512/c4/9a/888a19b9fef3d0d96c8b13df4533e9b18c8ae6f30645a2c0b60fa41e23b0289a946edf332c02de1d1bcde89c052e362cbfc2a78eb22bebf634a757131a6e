{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/sunfei/Downloads/website/src/components/codeblock/highlight.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { chakra } from \"@chakra-ui/react\";\nimport BaseHighlight, { defaultProps } from \"prism-react-renderer\";\nimport theme from \"prism-react-renderer/themes/nightOwl\";\nimport React from \"react\";\nimport { liveEditorStyle } from \"./codeblock\";\nvar RE = /{([\\d,-]+)}/;\n\nvar calculateLinesToHighlight = function calculateLinesToHighlight(meta) {\n  if (!RE.test(meta)) {\n    return function () {\n      return false;\n    };\n  }\n\n  var lineNumbers = RE.exec(meta)[1].split(\",\").map(function (v) {\n    return v.split(\"-\").map(function (x) {\n      return parseInt(x, 10);\n    });\n  });\n  return function (index) {\n    var lineNumber = index + 1;\n    var inRange = lineNumbers.some(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          start = _ref2[0],\n          end = _ref2[1];\n\n      return end ? lineNumber >= start && lineNumber <= end : lineNumber === start;\n    });\n    return inRange;\n  };\n};\n\nfunction Highlight(_ref3) {\n  var _this = this;\n\n  var codeString = _ref3.codeString,\n      language = _ref3.language,\n      metastring = _ref3.metastring,\n      showLines = _ref3.showLines,\n      props = _objectWithoutProperties(_ref3, [\"codeString\", \"language\", \"metastring\", \"showLines\"]);\n\n  var shouldHighlightLine = calculateLinesToHighlight(metastring);\n  return /*#__PURE__*/_jsxDEV(BaseHighlight, _objectSpread(_objectSpread(_objectSpread({}, defaultProps), {}, {\n    code: codeString,\n    language: language,\n    theme: theme\n  }, props), {}, {\n    children: function children(_ref4) {\n      var className = _ref4.className,\n          style = _ref4.style,\n          tokens = _ref4.tokens,\n          getLineProps = _ref4.getLineProps,\n          getTokenProps = _ref4.getTokenProps;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: liveEditorStyle,\n        \"data-language\": language,\n        children: /*#__PURE__*/_jsxDEV(\"pre\", {\n          className: className,\n          style: style,\n          children: tokens.map(function (line, i) {\n            var lineProps = getLineProps({\n              line: line,\n              key: i\n            });\n            return /*#__PURE__*/_jsxDEV(chakra.div, _objectSpread(_objectSpread({\n              px: \"5\",\n              bg: shouldHighlightLine(i) ? \"whiteAlpha.200\" : undefined\n            }, lineProps), {}, {\n              children: [showLines && /*#__PURE__*/_jsxDEV(chakra.span, {\n                opacity: 0.3,\n                mr: \"6\",\n                fontSize: \"xs\",\n                children: i + 1\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 62,\n                columnNumber: 21\n              }, _this), line.map(function (token, key) {\n                return /*#__PURE__*/_jsxDEV(\"span\", _objectSpread({}, getTokenProps({\n                  token: token,\n                  key: key\n                })), void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 67,\n                  columnNumber: 21\n                }, _this);\n              })]\n            }), void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 17\n            }, _this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, _this);\n    }\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n\n_c = Highlight;\nexport default Highlight;\n\nvar _c;\n\n$RefreshReg$(_c, \"Highlight\");","map":{"version":3,"sources":["/Users/sunfei/Downloads/website/src/components/codeblock/highlight.tsx"],"names":["chakra","BaseHighlight","defaultProps","theme","React","liveEditorStyle","RE","calculateLinesToHighlight","meta","test","lineNumbers","exec","split","map","v","x","parseInt","index","lineNumber","inRange","some","start","end","Highlight","codeString","language","metastring","showLines","props","shouldHighlightLine","className","style","tokens","getLineProps","getTokenProps","line","i","lineProps","key","undefined","token"],"mappings":"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","sourcesContent":["import { chakra } from \"@chakra-ui/react\"\nimport BaseHighlight, { defaultProps, Language } from \"prism-react-renderer\"\nimport theme from \"prism-react-renderer/themes/nightOwl\"\nimport React from \"react\"\nimport { liveEditorStyle } from \"./codeblock\"\n\nconst RE = /{([\\d,-]+)}/\n\nconst calculateLinesToHighlight = (meta: string) => {\n  if (!RE.test(meta)) {\n    return () => false\n  }\n  const lineNumbers = RE.exec(meta)[1]\n    .split(`,`)\n    .map((v) => v.split(`-`).map((x) => parseInt(x, 10)))\n\n  return (index: number) => {\n    const lineNumber = index + 1\n    const inRange = lineNumbers.some(([start, end]) =>\n      end ? lineNumber >= start && lineNumber <= end : lineNumber === start,\n    )\n    return inRange\n  }\n}\n\ninterface HighlightProps {\n  codeString: string\n  language: Language\n  metastring?: string\n  showLines?: boolean\n}\n\nfunction Highlight({\n  codeString,\n  language,\n  metastring,\n  showLines,\n  ...props\n}: HighlightProps) {\n  const shouldHighlightLine = calculateLinesToHighlight(metastring)\n\n  return (\n    <BaseHighlight\n      {...defaultProps}\n      code={codeString}\n      language={language}\n      theme={theme}\n      {...props}\n    >\n      {({ className, style, tokens, getLineProps, getTokenProps }) => (\n        <div style={liveEditorStyle} data-language={language}>\n          <pre className={className} style={style}>\n            {tokens.map((line, i) => {\n              const lineProps = getLineProps({ line, key: i })\n              return (\n                <chakra.div\n                  px=\"5\"\n                  bg={shouldHighlightLine(i) ? \"whiteAlpha.200\" : undefined}\n                  {...lineProps}\n                >\n                  {showLines && (\n                    <chakra.span opacity={0.3} mr=\"6\" fontSize=\"xs\">\n                      {i + 1}\n                    </chakra.span>\n                  )}\n                  {line.map((token, key) => (\n                    <span {...getTokenProps({ token, key })} />\n                  ))}\n                </chakra.div>\n              )\n            })}\n          </pre>\n        </div>\n      )}\n    </BaseHighlight>\n  )\n}\n\nexport default Highlight\n"]},"metadata":{},"sourceType":"module"}