{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/sunfei/Downloads/website/src/components/props-table.tsx\";\nimport * as React from \"react\";\nimport Link from \"next/link\";\nimport * as ComponentProps from \"@chakra-ui/props-docs\";\nimport MDXComponents from \"./mdx-components\";\nimport { theme } from \"@chakra-ui/react\";\n\nconst PropsTable = ({\n  of,\n  omit = [\"isTruncated\", \"layerStyle\", \"noOfLines\", \"textStyle\", \"orientation\", \"styleConfig\"],\n  only\n}) => {\n  var _themeComponent$defau, _themeComponent$defau2;\n\n  const info = ComponentProps[of];\n\n  if (!info || !info.props) {\n    return null;\n  }\n\n  const themeComponent = theme.components[of];\n  const sizeValues = (themeComponent === null || themeComponent === void 0 ? void 0 : themeComponent.sizes) && Object.keys(themeComponent.sizes);\n  const variantValues = (themeComponent === null || themeComponent === void 0 ? void 0 : themeComponent.variants) && Object.keys(themeComponent.variants);\n\n  const extendThemeLink = /*#__PURE__*/_jsxDEV(Link, {\n    href: \"/docs/theming/customize-theme#customizing-component-styles\",\n    passHref: true,\n    children: /*#__PURE__*/_jsxDEV(MDXComponents.a, {\n      children: \"extend the theme\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n  /**\n   * If component has size prop, override the rendered value\n   * for `size` prop with the component's size values formatted as TS type.\n   */\n\n\n  if (info.props.size) {\n    if (sizeValues) {\n      info.props.size.type.name = sizeValues.map(size => `\"${size}\"`).join(\" | \");\n    } else {\n      info.props.size.description = /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [\"Sizes for \", of, \" are not implemented in the default theme, but you can\", \" \", extendThemeLink, \" to implement them.\"]\n      }, void 0, true);\n    }\n  }\n  /**\n   * If component has variant prop, override the rendered value\n   * for `variant` prop with the component's variant values formatted as TS type.\n   */\n\n\n  if (info.props.variant) {\n    if (variantValues) {\n      info.props.variant.type.name = variantValues.map(variant => `\"${variant}\"`).join(\" | \");\n    } else {\n      info.props.variant.description = /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [\"Variants for \", of, \" are not implemented in the default theme, but you can \", extendThemeLink, \" to implement them.\"]\n      }, void 0, true);\n    }\n  }\n\n  const defaultSize = themeComponent === null || themeComponent === void 0 ? void 0 : (_themeComponent$defau = themeComponent.defaultProps) === null || _themeComponent$defau === void 0 ? void 0 : _themeComponent$defau.size;\n  const defaultVariant = themeComponent === null || themeComponent === void 0 ? void 0 : (_themeComponent$defau2 = themeComponent.defaultProps) === null || _themeComponent$defau2 === void 0 ? void 0 : _themeComponent$defau2.variant;\n\n  if (defaultSize != null) {\n    info.props.size.defaultValue = {\n      value: defaultSize\n    };\n  }\n\n  if (defaultVariant != null) {\n    info.props.variant.defaultValue = {\n      value: defaultVariant\n    };\n  }\n\n  const entries = React.useMemo(() => Object.entries(info.props).filter(([propName]) => {\n    if (Array.isArray(only)) {\n      return only.includes(propName);\n    }\n\n    if (Array.isArray(omit)) {\n      return !omit.includes(propName);\n    }\n\n    return true;\n  }).sort(([a, aDef], [b, bDef]) => {\n    const aRequired = aDef.required ? 1000 : 0;\n    const bRequired = bDef.required ? 1000 : 0;\n    const requiredOffset = aRequired - bRequired;\n    return String(a).localeCompare(b) - requiredOffset;\n  }), [info.props, omit, only]);\n\n  if (!entries.length) {\n    // this error breaks the build to notify you when there would be an empty table\n    throw new Error(`No props left to render for component ${of}.\nRemove the use of <PropsTable of=\"${of}\" /> for this component in the docs.`);\n  }\n\n  return /*#__PURE__*/_jsxDEV(MDXComponents.table, {\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(MDXComponents.th, {\n          children: \"Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MDXComponents.th, {\n          children: \"Type\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MDXComponents.th, {\n          children: \"Description\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MDXComponents.th, {\n          children: \"Default\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: entries.map(([propName, values]) => {\n        var _values$type, _values$defaultValue;\n\n        return /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(MDXComponents.td, {\n            children: propName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(MDXComponents.td, {\n            children: /*#__PURE__*/_jsxDEV(MDXComponents.inlineCode, {\n              whiteSpace: \"wrap\",\n              d: \"inline-block\",\n              lineHeight: \"tall\",\n              children: (_values$type = values.type) === null || _values$type === void 0 ? void 0 : _values$type.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(MDXComponents.td, {\n            children: values.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(MDXComponents.td, {\n            children: (_values$defaultValue = values.defaultValue) !== null && _values$defaultValue !== void 0 && _values$defaultValue.value ? /*#__PURE__*/_jsxDEV(MDXComponents.inlineCode, {\n              whiteSpace: \"wrap\",\n              d: \"inline-block\",\n              lineHeight: \"tall\",\n              children: values.defaultValue.value\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 17\n            }, this) : \"-\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 13\n          }, this)]\n        }, propName, true, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 5\n  }, this);\n};\n\nexport default PropsTable;","map":{"version":3,"sources":["/Users/sunfei/Downloads/website/src/components/props-table.tsx"],"names":["React","Link","ComponentProps","MDXComponents","theme","PropsTable","of","omit","only","info","props","themeComponent","components","sizeValues","sizes","Object","keys","variantValues","variants","extendThemeLink","size","type","name","map","join","description","variant","defaultSize","defaultProps","defaultVariant","defaultValue","value","entries","useMemo","filter","propName","Array","isArray","includes","sort","a","aDef","b","bDef","aRequired","required","bRequired","requiredOffset","String","localeCompare","length","Error","values"],"mappings":"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","sourcesContent":["import * as React from \"react\"\nimport Link from \"next/link\"\nimport * as ComponentProps from \"@chakra-ui/props-docs\"\nimport MDXComponents from \"./mdx-components\"\nimport { theme } from \"@chakra-ui/react\"\n\nexport type PropsTableProps = {\n  /**\n   * displayName of the target component\n   */\n  of: string\n  /**\n   * prop names to omit\n   */\n  omit?: string[] | null\n  /**\n   * Render only given prop names\n   * Has precedence over `omit`\n   */\n  only?: string[] | null\n}\n\nconst PropsTable = ({\n  of,\n  omit = [\n    \"isTruncated\",\n    \"layerStyle\",\n    \"noOfLines\",\n    \"textStyle\",\n    \"orientation\",\n    \"styleConfig\",\n  ],\n  only,\n}: PropsTableProps) => {\n  const info: { props: Record<string, any> } = ComponentProps[of]\n  if (!info || !info.props) {\n    return null\n  }\n\n  const themeComponent = theme.components[of]\n  const sizeValues = themeComponent?.sizes && Object.keys(themeComponent.sizes)\n  const variantValues =\n    themeComponent?.variants && Object.keys(themeComponent.variants)\n\n  const extendThemeLink = (\n    <Link\n      href=\"/docs/theming/customize-theme#customizing-component-styles\"\n      passHref\n    >\n      <MDXComponents.a>extend the theme</MDXComponents.a>\n    </Link>\n  )\n\n  /**\n   * If component has size prop, override the rendered value\n   * for `size` prop with the component's size values formatted as TS type.\n   */\n  if (info.props.size) {\n    if (sizeValues) {\n      info.props.size.type.name = sizeValues\n        .map((size) => `\"${size}\"`)\n        .join(\" | \")\n    } else {\n      info.props.size.description = (\n        <>\n          Sizes for {of} are not implemented in the default theme, but you can{\" \"}\n          {extendThemeLink} to implement them.\n        </>\n      )\n    }\n  }\n\n  /**\n   * If component has variant prop, override the rendered value\n   * for `variant` prop with the component's variant values formatted as TS type.\n   */\n  if (info.props.variant) {\n    if (variantValues) {\n      info.props.variant.type.name = variantValues\n        .map((variant) => `\"${variant}\"`)\n        .join(\" | \")\n    } else {\n      info.props.variant.description = (\n        <>\n          Variants for {of} are not implemented in the default theme, but you\n          can {extendThemeLink} to implement them.\n        </>\n      )\n    }\n  }\n\n  const defaultSize = themeComponent?.defaultProps?.size\n  const defaultVariant = themeComponent?.defaultProps?.variant\n\n  if (defaultSize != null) {\n    info.props.size.defaultValue = {\n      value: defaultSize,\n    }\n  }\n\n  if (defaultVariant != null) {\n    info.props.variant.defaultValue = {\n      value: defaultVariant,\n    }\n  }\n\n  const entries = React.useMemo(\n    () =>\n      Object.entries(info.props)\n        .filter(([propName]) => {\n          if (Array.isArray(only)) {\n            return only.includes(propName)\n          }\n          if (Array.isArray(omit)) {\n            return !omit.includes(propName)\n          }\n          return true\n        })\n        .sort(([a, aDef], [b, bDef]) => {\n          const aRequired = aDef.required ? 1000 : 0\n          const bRequired = bDef.required ? 1000 : 0\n          const requiredOffset = aRequired - bRequired\n          return String(a).localeCompare(b) - requiredOffset\n        }),\n    [info.props, omit, only],\n  )\n\n  if (!entries.length) {\n    // this error breaks the build to notify you when there would be an empty table\n    throw new Error(\n      `No props left to render for component ${of}.\nRemove the use of <PropsTable of=\"${of}\" /> for this component in the docs.`,\n    )\n  }\n\n  return (\n    <MDXComponents.table>\n      <thead>\n        <tr>\n          <MDXComponents.th>Name</MDXComponents.th>\n          <MDXComponents.th>Type</MDXComponents.th>\n          <MDXComponents.th>Description</MDXComponents.th>\n          <MDXComponents.th>Default</MDXComponents.th>\n          {/* <MDXComponents.th>Required</MDXComponents.th> */}\n        </tr>\n      </thead>\n      <tbody>\n        {entries.map(([propName, values]) => (\n          <tr key={propName}>\n            <MDXComponents.td>{propName}</MDXComponents.td>\n            <MDXComponents.td>\n              <MDXComponents.inlineCode\n                whiteSpace=\"wrap\"\n                d=\"inline-block\"\n                lineHeight=\"tall\"\n              >\n                {values.type?.name}\n              </MDXComponents.inlineCode>\n            </MDXComponents.td>\n            <MDXComponents.td>{values.description}</MDXComponents.td>\n            <MDXComponents.td>\n              {values.defaultValue?.value ? (\n                <MDXComponents.inlineCode\n                  whiteSpace=\"wrap\"\n                  d=\"inline-block\"\n                  lineHeight=\"tall\"\n                >\n                  {values.defaultValue.value}\n                </MDXComponents.inlineCode>\n              ) : (\n                \"-\"\n              )}\n            </MDXComponents.td>\n            {/* <MDXComponents.td>\n              {values.required ? \"required\" : \"-\"}\n            </MDXComponents.td> */}\n          </tr>\n        ))}\n      </tbody>\n    </MDXComponents.table>\n  )\n}\n\nexport default PropsTable\n"]},"metadata":{},"sourceType":"module"}