{"ast":null,"code":"var _jsxFileName = \"/Users/sunfei/Downloads/website/pages/docs/data-display/table.mdx\";\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport Layout from '/Users/sunfei/Downloads/website/layouts/index';\nexport const frontMatter = {\n  title: 'Table',\n  package: '@chakra-ui/table',\n  image: 'components/table.svg',\n  description: 'Table component is used to organize and display data efficiently. It renders a <table> element by default',\n  slug: '/docs/data-display/table',\n  lastEdited: undefined,\n  editUrl: 'https://github.com/chakra-ui/chakra-ui/edit/develop/website/pages/docs/data-display/table.mdx',\n  author: undefined,\n  tags: undefined,\n  __resourcePath: 'docs/data-display/table.mdx',\n  __scans: {},\n  layout: 'index'\n};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return mdx(\"div\", _objectSpread(_objectSpread({}, props), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 14\n    }\n  }));\n};\n\nconst ComponentLinks = makeShortcode(\"ComponentLinks\");\nconst PropsTable = makeShortcode(\"PropsTable\");\nconst layoutProps = {\n  frontMatter\n};\nconst MDXLayout = Layout;\nexport default function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _objectSpread(_objectSpread(_objectSpread({}, layoutProps), props), {}, {\n    components: components,\n    mdxType: \"MDXLayout\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 10\n    }\n  }), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, `Tables are used to organize and display data efficiently. It renders a `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 83\n    }\n  }, `<table>`), `\nelement by default.`), mdx(ComponentLinks, {\n    theme: {\n      componentName: \"table\"\n    },\n    github: {\n      package: \"table\"\n    },\n    npm: {\n      package: \"@chakra-ui/table\"\n    },\n    mdxType: \"ComponentLinks\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }), mdx(\"carbon-ad\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  }), mdx(\"h2\", _objectSpread(_objectSpread({}, {\n    \"id\": \"import\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }), `Import`), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 10\n    }\n  }), `import {\n  Table,\n  Thead,\n  Tbody,\n  Tfoot,\n  Tr,\n  Th,\n  Td,\n  TableCaption,\n} from \"@chakra-ui/react\"\n`)), mdx(\"h2\", _objectSpread(_objectSpread({}, {\n    \"id\": \"table-variants\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }), `Table Variants`), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }, `The table component comes in 3 variants: `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 53\n    }\n  }, `simple`), `, `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 109\n    }\n  }, `striped`), `, and `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 170\n    }\n  }, `unstyled`), `.\nThe default variant is `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 26\n    }\n  }, `simple`)), mdx(\"blockquote\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }\n  }, mdx(\"p\", {\n    parentName: \"blockquote\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, `Change the `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 49\n    }\n  }, `variant`), ` values to see the other variants.`)), mdx(\"h3\", _objectSpread(_objectSpread({}, {\n    \"id\": \"simple-table\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  }), `Simple Table`), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 10\n    }\n  }), `<Table variant=\"simple\">\n  <TableCaption>Imperial to metric conversion factors</TableCaption>\n  <Thead>\n    <Tr>\n      <Th>To convert</Th>\n      <Th>into</Th>\n      <Th isNumeric>multiply by</Th>\n    </Tr>\n  </Thead>\n  <Tbody>\n    <Tr>\n      <Td>inches</Td>\n      <Td>millimetres (mm)</Td>\n      <Td isNumeric>25.4</Td>\n    </Tr>\n    <Tr>\n      <Td>feet</Td>\n      <Td>centimetres (cm)</Td>\n      <Td isNumeric>30.48</Td>\n    </Tr>\n    <Tr>\n      <Td>yards</Td>\n      <Td>metres (m)</Td>\n      <Td isNumeric>0.91444</Td>\n    </Tr>\n  </Tbody>\n  <Tfoot>\n    <Tr>\n      <Th>To convert</Th>\n      <Th>into</Th>\n      <Th isNumeric>multiply by</Th>\n    </Tr>\n  </Tfoot>\n</Table>\n`)), mdx(\"h3\", _objectSpread(_objectSpread({}, {\n    \"id\": \"striped-table\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 5\n    }\n  }), `Striped Table`), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 10\n    }\n  }), `<Table variant=\"striped\" colorScheme=\"teal\">\n  <TableCaption>Imperial to metric conversion factors</TableCaption>\n  <Thead>\n    <Tr>\n      <Th>To convert</Th>\n      <Th>into</Th>\n      <Th isNumeric>multiply by</Th>\n    </Tr>\n  </Thead>\n  <Tbody>\n    <Tr>\n      <Td>inches</Td>\n      <Td>millimetres (mm)</Td>\n      <Td isNumeric>25.4</Td>\n    </Tr>\n    <Tr>\n      <Td>feet</Td>\n      <Td>centimetres (cm)</Td>\n      <Td isNumeric>30.48</Td>\n    </Tr>\n    <Tr>\n      <Td>yards</Td>\n      <Td>metres (m)</Td>\n      <Td isNumeric>0.91444</Td>\n    </Tr>\n  </Tbody>\n  <Tfoot>\n    <Tr>\n      <Th>To convert</Th>\n      <Th>into</Th>\n      <Th isNumeric>multiply by</Th>\n    </Tr>\n  </Tfoot>\n</Table>\n`)), mdx(\"h2\", _objectSpread(_objectSpread({}, {\n    \"id\": \"table-sizing\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 5\n    }\n  }), `Table Sizing`), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 5\n    }\n  }, `The table component is available in 3 sizes: `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 57\n    }\n  }, `sm`), `, `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 109\n    }\n  }, `md`), `, `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 161\n    }\n  }, `lg`), `. The default size\nis `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 6\n    }\n  }, `md`), `.`), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 10\n    }\n  }), `<Table size=\"sm\">\n  <Thead>\n    <Tr>\n      <Th>To convert</Th>\n      <Th>into</Th>\n      <Th isNumeric>multiply by</Th>\n    </Tr>\n  </Thead>\n  <Tbody>\n    <Tr>\n      <Td>inches</Td>\n      <Td>millimetres (mm)</Td>\n      <Td isNumeric>25.4</Td>\n    </Tr>\n    <Tr>\n      <Td>feet</Td>\n      <Td>centimetres (cm)</Td>\n      <Td isNumeric>30.48</Td>\n    </Tr>\n    <Tr>\n      <Td>yards</Td>\n      <Td>metres (m)</Td>\n      <Td isNumeric>0.91444</Td>\n    </Tr>\n  </Tbody>\n  <Tfoot>\n    <Tr>\n      <Th>To convert</Th>\n      <Th>into</Th>\n      <Th isNumeric>multiply by</Th>\n    </Tr>\n  </Tfoot>\n</Table>\n`)), mdx(\"h2\", _objectSpread(_objectSpread({}, {\n    \"id\": \"props\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 5\n    }\n  }), `Props`), mdx(\"h3\", _objectSpread(_objectSpread({}, {\n    \"id\": \"table\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 5\n    }\n  }), `Table`), mdx(PropsTable, {\n    of: \"Table\",\n    mdxType: \"PropsTable\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 5\n    }\n  }), mdx(\"h3\", _objectSpread(_objectSpread({}, {\n    \"id\": \"td\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 5\n    }\n  }), `Td`), mdx(PropsTable, {\n    of: \"Td\",\n    mdxType: \"PropsTable\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 5\n    }\n  }), mdx(\"h3\", _objectSpread(_objectSpread({}, {\n    \"id\": \"th\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 5\n    }\n  }), `Th`), mdx(PropsTable, {\n    of: \"Th\",\n    mdxType: \"PropsTable\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 5\n    }\n  }), mdx(\"h3\", _objectSpread(_objectSpread({}, {\n    \"id\": \"tablecaption\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 5\n    }\n  }), `TableCaption`), mdx(PropsTable, {\n    of: \"TableCaption\",\n    mdxType: \"PropsTable\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 5\n    }\n  }));\n}\n;\nMDXContent.isMDXComponent = true;","map":{"version":3,"sources":["/Users/sunfei/Downloads/website/pages/docs/data-display/table.mdx"],"names":["React","mdx","Layout","frontMatter","title","package","image","description","slug","lastEdited","undefined","editUrl","author","tags","__resourcePath","__scans","layout","makeShortcode","name","MDXDefaultShortcode","props","console","warn","ComponentLinks","PropsTable","layoutProps","MDXLayout","MDXContent","components","componentName","isMDXComponent"],"mappings":"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","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport Layout, {  } from '/Users/sunfei/Downloads/website/layouts/index'\nexport const frontMatter = {\n  title: 'Table',\n  package: '@chakra-ui/table',\n  image: 'components/table.svg',\n  description: 'Table component is used to organize and display data efficiently. It renders a <table> element by default',\n  slug: '/docs/data-display/table',\n  lastEdited: undefined,\n  editUrl: 'https://github.com/chakra-ui/chakra-ui/edit/develop/website/pages/docs/data-display/table.mdx',\n  author: undefined,\n  tags: undefined,\n  __resourcePath: 'docs/data-display/table.mdx',\n  __scans: {},\n  layout: 'index'\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n      console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n      return <div {...props}/>\n    };\nconst ComponentLinks = makeShortcode(\"ComponentLinks\");\nconst PropsTable = makeShortcode(\"PropsTable\");\nconst layoutProps = {\n  frontMatter\n};\nconst MDXLayout = Layout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <p>{`Tables are used to organize and display data efficiently. It renders a `}<inlineCode parentName=\"p\">{`<table>`}</inlineCode>{`\nelement by default.`}</p>\n    <ComponentLinks theme={{\n      componentName: \"table\"\n    }} github={{\n      package: \"table\"\n    }} npm={{\n      package: \"@chakra-ui/table\"\n    }} mdxType=\"ComponentLinks\" />\n    <carbon-ad />\n    <h2 {...{\n      \"id\": \"import\"\n    }}>{`Import`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import {\n  Table,\n  Thead,\n  Tbody,\n  Tfoot,\n  Tr,\n  Th,\n  Td,\n  TableCaption,\n} from \"@chakra-ui/react\"\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"table-variants\"\n    }}>{`Table Variants`}</h2>\n    <p>{`The table component comes in 3 variants: `}<inlineCode parentName=\"p\">{`simple`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`striped`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`unstyled`}</inlineCode>{`.\nThe default variant is `}<inlineCode parentName=\"p\">{`simple`}</inlineCode></p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Change the `}<inlineCode parentName=\"p\">{`variant`}</inlineCode>{` values to see the other variants.`}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"simple-table\"\n    }}>{`Simple Table`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Table variant=\"simple\">\n  <TableCaption>Imperial to metric conversion factors</TableCaption>\n  <Thead>\n    <Tr>\n      <Th>To convert</Th>\n      <Th>into</Th>\n      <Th isNumeric>multiply by</Th>\n    </Tr>\n  </Thead>\n  <Tbody>\n    <Tr>\n      <Td>inches</Td>\n      <Td>millimetres (mm)</Td>\n      <Td isNumeric>25.4</Td>\n    </Tr>\n    <Tr>\n      <Td>feet</Td>\n      <Td>centimetres (cm)</Td>\n      <Td isNumeric>30.48</Td>\n    </Tr>\n    <Tr>\n      <Td>yards</Td>\n      <Td>metres (m)</Td>\n      <Td isNumeric>0.91444</Td>\n    </Tr>\n  </Tbody>\n  <Tfoot>\n    <Tr>\n      <Th>To convert</Th>\n      <Th>into</Th>\n      <Th isNumeric>multiply by</Th>\n    </Tr>\n  </Tfoot>\n</Table>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"striped-table\"\n    }}>{`Striped Table`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Table variant=\"striped\" colorScheme=\"teal\">\n  <TableCaption>Imperial to metric conversion factors</TableCaption>\n  <Thead>\n    <Tr>\n      <Th>To convert</Th>\n      <Th>into</Th>\n      <Th isNumeric>multiply by</Th>\n    </Tr>\n  </Thead>\n  <Tbody>\n    <Tr>\n      <Td>inches</Td>\n      <Td>millimetres (mm)</Td>\n      <Td isNumeric>25.4</Td>\n    </Tr>\n    <Tr>\n      <Td>feet</Td>\n      <Td>centimetres (cm)</Td>\n      <Td isNumeric>30.48</Td>\n    </Tr>\n    <Tr>\n      <Td>yards</Td>\n      <Td>metres (m)</Td>\n      <Td isNumeric>0.91444</Td>\n    </Tr>\n  </Tbody>\n  <Tfoot>\n    <Tr>\n      <Th>To convert</Th>\n      <Th>into</Th>\n      <Th isNumeric>multiply by</Th>\n    </Tr>\n  </Tfoot>\n</Table>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"table-sizing\"\n    }}>{`Table Sizing`}</h2>\n    <p>{`The table component is available in 3 sizes: `}<inlineCode parentName=\"p\">{`sm`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`md`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`lg`}</inlineCode>{`. The default size\nis `}<inlineCode parentName=\"p\">{`md`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Table size=\"sm\">\n  <Thead>\n    <Tr>\n      <Th>To convert</Th>\n      <Th>into</Th>\n      <Th isNumeric>multiply by</Th>\n    </Tr>\n  </Thead>\n  <Tbody>\n    <Tr>\n      <Td>inches</Td>\n      <Td>millimetres (mm)</Td>\n      <Td isNumeric>25.4</Td>\n    </Tr>\n    <Tr>\n      <Td>feet</Td>\n      <Td>centimetres (cm)</Td>\n      <Td isNumeric>30.48</Td>\n    </Tr>\n    <Tr>\n      <Td>yards</Td>\n      <Td>metres (m)</Td>\n      <Td isNumeric>0.91444</Td>\n    </Tr>\n  </Tbody>\n  <Tfoot>\n    <Tr>\n      <Th>To convert</Th>\n      <Th>into</Th>\n      <Th isNumeric>multiply by</Th>\n    </Tr>\n  </Tfoot>\n</Table>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <h3 {...{\n      \"id\": \"table\"\n    }}>{`Table`}</h3>\n    <PropsTable of=\"Table\" mdxType=\"PropsTable\" />\n    <h3 {...{\n      \"id\": \"td\"\n    }}>{`Td`}</h3>\n    <PropsTable of=\"Td\" mdxType=\"PropsTable\" />\n    <h3 {...{\n      \"id\": \"th\"\n    }}>{`Th`}</h3>\n    <PropsTable of=\"Th\" mdxType=\"PropsTable\" />\n    <h3 {...{\n      \"id\": \"tablecaption\"\n    }}>{`TableCaption`}</h3>\n    <PropsTable of=\"TableCaption\" mdxType=\"PropsTable\" />\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"]},"metadata":{},"sourceType":"module"}