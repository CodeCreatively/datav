{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/sunfei/Downloads/website/pages/docs/form/button.mdx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport Layout from '/Users/sunfei/Downloads/website/layouts/index';\nexport var frontMatter = {\n  title: 'Button',\n  \"package\": '@chakra-ui/button',\n  image: 'components/button.svg',\n  description: 'Button component is used to trigger an action or event, such as submitting a form, opening a Dialog, canceling an action, or performing a delete operation.',\n  slug: '/docs/form/button',\n  lastEdited: undefined,\n  editUrl: 'https://github.com/chakra-ui/chakra-ui/edit/develop/website/pages/docs/form/button.mdx',\n  author: undefined,\n  tags: undefined,\n  __resourcePath: 'docs/form/button.mdx',\n  __scans: {},\n  layout: 'index'\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", _objectSpread(_objectSpread({}, props), {}, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 14\n      }\n    }));\n  };\n};\n\nvar ComponentLinks = makeShortcode(\"ComponentLinks\");\n_c = ComponentLinks;\nvar PropsTable = makeShortcode(\"PropsTable\");\n_c2 = PropsTable;\nvar layoutProps = {\n  frontMatter: frontMatter\n};\nvar MDXLayout = Layout;\nexport default function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _objectSpread(_objectSpread(_objectSpread({}, layoutProps), props), {}, {\n    components: components,\n    mdxType: \"MDXLayout\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 10\n    }\n  }), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, \"The Button component is used to trigger an action or event, such as submitting a\\nform, opening a dialog, canceling an action, or performing a delete operation.\"), mdx(ComponentLinks, {\n    theme: {\n      componentName: \"button\"\n    },\n    github: {\n      \"package\": \"button\"\n    },\n    npm: {\n      \"package\": \"@chakra-ui/button\"\n    },\n    mdxType: \"ComponentLinks\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  }, mdx(\"carbon-ad\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 8\n    }\n  })), mdx(\"h2\", _objectSpread(_objectSpread({}, {\n    \"id\": \"import\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }), \"Import\"), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 10\n    }\n  }), \"import { Button, ButtonGroup } from \\\"@chakra-ui/react\\\"\\n\")), mdx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, mdx(\"strong\", {\n    parentName: \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 27\n    }\n  }, \"Button:\"), \" The button component with support for custom icons, spinners, etc.\"), mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, mdx(\"strong\", {\n    parentName: \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 27\n    }\n  }, \"ButtonGroup:\"), \" Used to group buttons whose actions are related, with an\\noption to flush them together.\")), mdx(\"h2\", _objectSpread(_objectSpread({}, {\n    \"id\": \"usage\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }), \"Usage\"), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 10\n    }\n  }), \"<Button colorScheme=\\\"blue\\\">Button</Button>\\n\")), mdx(\"h3\", _objectSpread(_objectSpread({}, {\n    \"id\": \"button-sizes\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }), \"Button Sizes\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }\n  }, \"Use the \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 20\n    }\n  }, \"size\"), \" prop to change the size of the button. You can set the value to\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 3\n    }\n  }, \"xs\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 55\n    }\n  }, \"sm\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 107\n    }\n  }, \"md\"), \", or \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 162\n    }\n  }, \"lg\"), \".\"), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 10\n    }\n  }), \"<Stack spacing={4} direction=\\\"row\\\" align=\\\"center\\\">\\n  <Button colorScheme=\\\"teal\\\" size=\\\"xs\\\">\\n    Button\\n  </Button>\\n  <Button colorScheme=\\\"teal\\\" size=\\\"sm\\\">\\n    Button\\n  </Button>\\n  <Button colorScheme=\\\"teal\\\" size=\\\"md\\\">\\n    Button\\n  </Button>\\n  <Button colorScheme=\\\"teal\\\" size=\\\"lg\\\">\\n    Button\\n  </Button>\\n</Stack>\\n\")), mdx(\"h3\", _objectSpread(_objectSpread({}, {\n    \"id\": \"button-variants\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 5\n    }\n  }), \"Button variants\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 5\n    }\n  }, \"Use the \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 20\n    }\n  }, \"variant\"), \" prop to change the visual style of the Button. You can set the\\nvalue to \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 12\n    }\n  }, \"solid\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 67\n    }\n  }, \"ghost\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 122\n    }\n  }, \"outline\"), \", or \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 182\n    }\n  }, \"link\"), \".\"), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 10\n    }\n  }), \"<Stack direction=\\\"row\\\" spacing={4} align=\\\"center\\\">\\n  <Button colorScheme=\\\"teal\\\" variant=\\\"solid\\\">\\n    Button\\n  </Button>\\n  <Button colorScheme=\\\"teal\\\" variant=\\\"outline\\\">\\n    Button\\n  </Button>\\n  <Button colorScheme=\\\"teal\\\" variant=\\\"ghost\\\">\\n    Button\\n  </Button>\\n  <Button colorScheme=\\\"teal\\\" variant=\\\"link\\\">\\n    Button\\n  </Button>\\n</Stack>\\n\")), mdx(\"h3\", _objectSpread(_objectSpread({}, {\n    \"id\": \"button-with-icon\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 5\n    }\n  }), \"Button with icon\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 5\n    }\n  }, \"You can add left and right icons to the Button component using the \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 79\n    }\n  }, \"leftIcon\"), \"\\nand \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }\n  }, \"rightIcon\"), \" props respectively.\"), mdx(\"blockquote\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 5\n    }\n  }, mdx(\"p\", {\n    parentName: \"blockquote\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }\n  }, \"Note: The \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 48\n    }\n  }, \"leftIcon\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 109\n    }\n  }, \"rightIcon\"), \" prop values should be react elements NOT\\nstrings.\")), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 10\n    }\n  }), \"<Stack direction=\\\"row\\\" spacing={4}>\\n  <Button leftIcon={<EmailIcon />} colorScheme=\\\"teal\\\" variant=\\\"solid\\\">\\n    Email\\n  </Button>\\n  <Button rightIcon={<ArrowForwardIcon />} colorScheme=\\\"teal\\\" variant=\\\"outline\\\">\\n    Call us\\n  </Button>\\n</Stack>\\n\")), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 5\n    }\n  }, \"You can also use icons from popular libraries like\\n\", mdx(\"a\", _objectSpread(_objectSpread({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://react-icons.github.io/react-icons/\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 3\n    }\n  }), \"react-icons\"), \" and pass it into the\\nbutton.\"), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 10\n    }\n  }), \"// import { MdBuild , MdCall } from \\\"react-icons/md\\\"\\n\\n<Stack direction=\\\"row\\\" spacing={4}>\\n  <Button leftIcon={<MdBuild />} colorScheme=\\\"pink\\\" variant=\\\"solid\\\">\\n    Settings\\n  </Button>\\n  <Button rightIcon={<MdCall />} colorScheme=\\\"blue\\\" variant=\\\"outline\\\">\\n    Call us\\n  </Button>\\n</Stack>\\n\")), mdx(\"h3\", _objectSpread(_objectSpread({}, {\n    \"id\": \"button-loading-state\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 5\n    }\n  }), \"Button loading state\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 5\n    }\n  }, \"Pass the \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 21\n    }\n  }, \"isLoading\"), \" prop to show its loading state. By default, the button will\\nshow a spinner and leave the button's width unchanged.\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 5\n    }\n  }, \"You can also pass the \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 34\n    }\n  }, \"loadingText\"), \" prop to show a spinner and the loading text.\"), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 10\n    }\n  }), \"<Stack direction=\\\"row\\\" spacing={4}>\\n  <Button isLoading colorScheme=\\\"teal\\\" variant=\\\"solid\\\">\\n    Email\\n  </Button>\\n  <Button\\n    isLoading\\n    loadingText=\\\"Submitting\\\"\\n    colorScheme=\\\"teal\\\"\\n    variant=\\\"outline\\\"\\n  >\\n    Submit\\n  </Button>\\n</Stack>\\n\")), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 5\n    }\n  }, \"You can also change the spinner itself to use custom loaders as per your design\\nrequirements. Pass the \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 26\n    }\n  }, \"spinner\"), \" prop and set it to a custom react element.\"), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 10\n    }\n  }), \"<Button\\n  isLoading\\n  colorScheme=\\\"blue\\\"\\n  spinner={<BeatLoader size={8} color=\\\"white\\\" />}\\n>\\n  Click me\\n</Button>\\n\")), mdx(\"h3\", _objectSpread(_objectSpread({}, {\n    \"id\": \"social-buttons\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 5\n    }\n  }), \"Social Buttons\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 5\n    }\n  }, \"We've included the colors for common social media platforms, and you can simply\\nuse their buttons via the \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 29\n    }\n  }, \"colorScheme\"), \" prop.\"), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 10\n    }\n  }), \"<HStack>\\n  <Button colorScheme=\\\"facebook\\\" leftIcon={<FaFacebook />}>\\n    Facebook\\n  </Button>\\n  <Button colorScheme=\\\"twitter\\\" leftIcon={<FaTwitter />}>\\n    Twitter\\n  </Button>\\n</HStack>\\n\")), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 5\n    }\n  }, \"The Facebook and Twitter icons in the above example are available from\\n\", mdx(\"a\", _objectSpread(_objectSpread({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://react-icons.netlify.com/#/\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 3\n    }\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 10\n    }\n  }, \"react-icons\")), \" as \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 77\n    }\n  }, \"FaFacebook\"), \" and\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 3\n    }\n  }, \"FaTwitter\"), \", found in the \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 75\n    }\n  }, \"react-icons/fa\"), \" import.\"), mdx(\"h3\", _objectSpread(_objectSpread({}, {\n    \"id\": \"grouping-buttons\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 5\n    }\n  }), \"Grouping Buttons\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 5\n    }\n  }, \"You can use the \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 28\n    }\n  }, \"Stack\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 85\n    }\n  }, \"ButtonGroup\"), \" component to group buttons. When you\\nuse the \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 11\n    }\n  }, \"ButtonGroup\"), \" component, it allows you to:\"), mdx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 5\n    }\n  }, mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }\n  }, \"Set the \", mdx(\"inlineCode\", {\n    parentName: \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 39\n    }\n  }, \"size\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 97\n    }\n  }, \"variant\"), \" of all buttons within it.\"), mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }\n  }, \"Add \", mdx(\"inlineCode\", {\n    parentName: \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 35\n    }\n  }, \"spacing\"), \" between the buttons.\"), mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }\n  }, \"Flush the buttons together by removing the border radius of the its children\\nas needed.\")), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 10\n    }\n  }), \"<ButtonGroup variant=\\\"outline\\\" spacing=\\\"6\\\">\\n  <Button colorScheme=\\\"blue\\\">Save</Button>\\n  <Button>Cancel</Button>\\n</ButtonGroup>\\n\")), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 5\n    }\n  }, \"To flush the buttons, pass the \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 43\n    }\n  }, \"isAttached\"), \" prop.\"), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 10\n    }\n  }), \"<ButtonGroup size=\\\"sm\\\" isAttached variant=\\\"outline\\\">\\n  <Button mr=\\\"-px\\\">Save</Button>\\n  <IconButton aria-label=\\\"Add to friends\\\" icon={<AddIcon />} />\\n</ButtonGroup>\\n\")), mdx(\"h2\", _objectSpread(_objectSpread({}, {\n    \"id\": \"accessibility\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 5\n    }\n  }), \"Accessibility\"), mdx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 5\n    }\n  }, mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 7\n    }\n  }, \"Button has \", mdx(\"inlineCode\", {\n    parentName: \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 42\n    }\n  }, \"role\"), \" of \", mdx(\"inlineCode\", {\n    parentName: \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 99\n    }\n  }, \"button\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 7\n    }\n  }, \"When Button has focus, \", mdx(\"kbd\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 54\n    }\n  }, \"Space\"), \" or \", mdx(\"kbd\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 82\n    }\n  }, \"Enter\"), \" activates it.\")), mdx(\"h2\", _objectSpread(_objectSpread({}, {\n    \"id\": \"composition\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 5\n    }\n  }), \"Composition\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 5\n    }\n  }, \"All props you pass (\", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 32\n    }\n  }, \"variant\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 89\n    }\n  }, \"colorScheme\"), \", etc.) are converted to style\\nprops. This means you can override any style of the Button via props.\"), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 10\n    }\n  }), \"// The size prop affects the height of the button\\n// It can still be overriden by passing a custom height\\n<Button\\n  size=\\\"md\\\"\\n  height=\\\"48px\\\"\\n  width=\\\"200px\\\"\\n  border=\\\"2px\\\"\\n  borderColor=\\\"green.500\\\"\\n>\\n  Button\\n</Button>\\n\")), mdx(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 5\n    }\n  }), mdx(\"h2\", _objectSpread(_objectSpread({}, {\n    \"id\": \"custom-button\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 5\n    }\n  }), \"Custom Button\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 5\n    }\n  }, \"In the event that you need to make your own custom button, you can leverage the\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 3\n    }\n  }, \"Box\"), \" component. It provides the \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 82\n    }\n  }, \"hover\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 137\n    }\n  }, \"focus\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 192\n    }\n  }, \"active\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 251\n    }\n  }, \"disabled\"), \" style\\nprops to style the button.\"), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 10\n    }\n  }), \"// Button from facebook.com\\n<Box\\n  as=\\\"button\\\"\\n  height=\\\"24px\\\"\\n  lineHeight=\\\"1.2\\\"\\n  transition=\\\"all 0.2s cubic-bezier(.08,.52,.52,1)\\\"\\n  border=\\\"1px\\\"\\n  px=\\\"8px\\\"\\n  borderRadius=\\\"2px\\\"\\n  fontSize=\\\"14px\\\"\\n  fontWeight=\\\"semibold\\\"\\n  bg=\\\"#f5f6f7\\\"\\n  borderColor=\\\"#ccd0d5\\\"\\n  color=\\\"#4b4f56\\\"\\n  _hover={{ bg: \\\"#ebedf0\\\" }}\\n  _active={{\\n    bg: \\\"#dddfe2\\\",\\n    transform: \\\"scale(0.98)\\\",\\n    borderColor: \\\"#bec3c9\\\",\\n  }}\\n  _focus={{\\n    boxShadow:\\n      \\\"0 0 1px 2px rgba(88, 144, 255, .75), 0 1px 1px rgba(0, 0, 0, .15)\\\",\\n  }}\\n>\\n  Join Group\\n</Box>\\n\")), mdx(\"h2\", _objectSpread(_objectSpread({}, {\n    \"id\": \"props\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 5\n    }\n  }), \"Props\"), mdx(\"h3\", _objectSpread(_objectSpread({}, {\n    \"id\": \"button-props\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 5\n    }\n  }), \"Button Props\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 5\n    }\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 8\n    }\n  }, \"Button\"), \" composes the \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 76\n    }\n  }, \"Box\"), \" component, so you can pass all its props.\\nThese are props specific to the \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 35\n    }\n  }, \"Button\"), \" component:\"), mdx(PropsTable, {\n    of: \"Button\",\n    mdxType: \"PropsTable\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 5\n    }\n  }), mdx(\"h3\", _objectSpread(_objectSpread({}, {\n    \"id\": \"button-group-props\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 5\n    }\n  }), \"Button Group Props\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 5\n    }\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 8\n    }\n  }, \"ButtonGroup\"), \" composes the \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 81\n    }\n  }, \"Box\"), \" component, so you can pass all its props.\\nThese are props specific to the \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 35\n    }\n  }, \"ButtonGroup\"), \" component:\"), mdx(PropsTable, {\n    of: \"ButtonGroup\",\n    mdxType: \"PropsTable\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 5\n    }\n  }));\n}\n_c3 = MDXContent;\n;\nMDXContent.isMDXComponent = true;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"ComponentLinks\");\n$RefreshReg$(_c2, \"PropsTable\");\n$RefreshReg$(_c3, \"MDXContent\");","map":{"version":3,"sources":["/Users/sunfei/Downloads/website/pages/docs/form/button.mdx"],"names":["React","mdx","Layout","frontMatter","title","image","description","slug","lastEdited","undefined","editUrl","author","tags","__resourcePath","__scans","layout","makeShortcode","name","MDXDefaultShortcode","props","console","warn","ComponentLinks","PropsTable","layoutProps","MDXLayout","MDXContent","components","componentName","isMDXComponent"],"mappings":";;;;;;;;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,eAApB;AAEA;;AACA;;AACA,OAAOC,MAAP,MAAyB,+CAAzB;AACA,OAAO,IAAMC,WAAW,GAAG;AACzBC,EAAAA,KAAK,EAAE,QADkB;AAEzB,aAAS,mBAFgB;AAGzBC,EAAAA,KAAK,EAAE,uBAHkB;AAIzBC,EAAAA,WAAW,EAAE,6JAJY;AAKzBC,EAAAA,IAAI,EAAE,mBALmB;AAMzBC,EAAAA,UAAU,EAAEC,SANa;AAOzBC,EAAAA,OAAO,EAAE,wFAPgB;AAQzBC,EAAAA,MAAM,EAAEF,SARiB;AASzBG,EAAAA,IAAI,EAAEH,SATmB;AAUzBI,EAAAA,cAAc,EAAE,sBAVS;AAWzBC,EAAAA,OAAO,EAAE,EAXgB;AAYzBC,EAAAA,MAAM,EAAE;AAZiB,CAApB;;AAcP,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,IAAI;AAAA,SAAI,SAASC,mBAAT,CAA6BC,KAA7B,EAAoC;AAC5DC,IAAAA,OAAO,CAACC,IAAR,CAAa,eAAeJ,IAAf,GAAsB,yEAAnC;AACA,WAAO,2CAASE,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACD,GAHqB;AAAA,CAA1B;;AAIA,IAAMG,cAAc,GAAGN,aAAa,CAAC,gBAAD,CAApC;KAAMM,c;AACN,IAAMC,UAAU,GAAGP,aAAa,CAAC,YAAD,CAAhC;MAAMO,U;AACN,IAAMC,WAAW,GAAG;AAClBrB,EAAAA,WAAW,EAAXA;AADkB,CAApB;AAGA,IAAMsB,SAAS,GAAGvB,MAAlB;AACA,eAAe,SAASwB,UAAT,OAGZ;AAAA,MAFDC,UAEC,QAFDA,UAEC;AAAA,MADER,KACF;;AACD,SAAO,IAAC,SAAD,gDAAeK,WAAf,GAAgCL,KAAhC;AAAuC,IAAA,UAAU,EAAEQ,UAAnD;AAA+D,IAAA,OAAO,EAAC,WAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAIL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wKAJK,EAML,IAAC,cAAD;AAAgB,IAAA,KAAK,EAAE;AACrBC,MAAAA,aAAa,EAAE;AADM,KAAvB;AAEG,IAAA,MAAM,EAAE;AACT,iBAAS;AADA,KAFX;AAIG,IAAA,GAAG,EAAE;AACN,iBAAS;AADH,KAJR;AAMG,IAAA,OAAO,EAAC,gBANX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANK,EAaL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,CAbK,EAcL,0CAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAdK,EAiBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mEAAL,CAjBK,EAqBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoB;AAAQ,IAAA,UAAU,EAAC,IAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAApB,wEADF,EAEE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoB;AAAQ,IAAA,UAAU,EAAC,IAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAApB,8FAFF,CArBK,EA0BL,0CAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA1BK,EA6BL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uDAAL,CA7BK,EAiCL,0CAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAjCK,EAoCL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAe;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAf,wEACF;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADE,QACkD;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADlD,QACsG;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADtG,WAC6J;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAD7J,MApCK,EAsCL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mWAAL,CAtCK,EAuDL,0CAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAvDK,EA0DL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAe;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAf,gFACO;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADP,QAC8D;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAD9D,QACqH;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADrH,WACiL;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADjL,MA1DK,EA4DL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4XAAL,CA5DK,EA6EL,0CAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBA7EK,EAgFL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4EAA0E;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAA1E,YACE;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,yBAhFK,EAkFL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAG,IAAA,UAAU,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAyC;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAzC,WAAsG;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAtG,wDADF,CAlFK,EAsFL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8QAAL,CAtFK,EAiGL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6DACF;AAAG,IAAA,UAAU,EAAC;AAAd,KAAsB;AAChB,YAAQ;AADQ,GAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADE,mCAjGK,EAsGL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+TAAL,CAtGK,EAmHL,0CAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAnHK,EAsHL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAgB;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAhB,yHAtHK,EAwHL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAA6B;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAA7B,kDAxHK,EAyHL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0RAAL,CAzHK,EAyIL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iHACqB;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADrB,gDAzIK,EA2IL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sIAAL,CA3IK,EAqJL,0CAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBArJK,EAwJL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oHACwB;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADxB,WAxJK,EA0JL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+MAAL,CA1JK,EAqKL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iFACF;AAAG,IAAA,UAAU,EAAC;AAAd,KAAsB;AAChB,YAAQ;AADQ,GAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAEO;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAFP,CADE,UAGwE;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHxE,YAIF;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAJE,qBAIsE;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAJtE,aArKK,EA0KL,0CAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBA1KK,EA6KL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAuB;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAvB,UAAgF;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAhF,qDACM;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADN,kCA7KK,EA+KL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAgC;AAAY,IAAA,UAAU,EAAC,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAhC,WAA0F;AAAY,IAAA,UAAU,EAAC,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAA1F,+BADF,EAEE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAA4B;AAAY,IAAA,UAAU,EAAC,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAA5B,0BAFF,EAGE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gGAHF,CA/KK,EAqLL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mJAAL,CArLK,EA4LL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCAAsC;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAtC,WA5LK,EA6LL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0LAAL,CA7LK,EAoML,0CAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBApMK,EAuML;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAmC;AAAY,IAAA,UAAU,EAAC,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAnC,UAA4F;AAAY,IAAA,UAAU,EAAC,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAA5F,MADF,EAEE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAA+C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAA/C,UAA2E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAA3E,mBAFF,CAvMK,EA2ML,0CAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBA3MK,EA8ML;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAA2B;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAA3B,QAAoF;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAApF,0GA9MK,EAgNL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0PAAL,CAhNK,EA8NL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA9NK,EA+NL,0CAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBA/NK,EAkOL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0FACF;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADE,kCAC6E;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAD7E,QACoI;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADpI,QAC2L;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAD3L,WACsP;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADtP,uCAlOK,EAqOL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2lBAAL,CArOK,EAmQL,0CAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAnQK,EAsQL,0CAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAtQK,EAyQL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAG;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAH,oBAAuE;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAvE,kFAC8B;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAD9B,gBAzQK,EA2QL,IAAC,UAAD;AAAY,IAAA,EAAE,EAAC,QAAf;AAAwB,IAAA,OAAO,EAAC,YAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA3QK,EA4QL,0CAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BA5QK,EA+QL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAG;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAH,oBAA4E;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA5E,kFAC8B;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAD9B,gBA/QK,EAiRL,IAAC,UAAD;AAAY,IAAA,EAAE,EAAC,aAAf;AAA6B,IAAA,OAAO,EAAC,YAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAjRK,CAAP;AAmRD;MAvRuBF,U;AAyRxB;AACAA,UAAU,CAACG,cAAX,GAA4B,IAA5B","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport Layout, {  } from '/Users/sunfei/Downloads/website/layouts/index'\nexport const frontMatter = {\n  title: 'Button',\n  package: '@chakra-ui/button',\n  image: 'components/button.svg',\n  description: 'Button component is used to trigger an action or event, such as submitting a form, opening a Dialog, canceling an action, or performing a delete operation.',\n  slug: '/docs/form/button',\n  lastEdited: undefined,\n  editUrl: 'https://github.com/chakra-ui/chakra-ui/edit/develop/website/pages/docs/form/button.mdx',\n  author: undefined,\n  tags: undefined,\n  __resourcePath: 'docs/form/button.mdx',\n  __scans: {},\n  layout: 'index'\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n      console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n      return <div {...props}/>\n    };\nconst ComponentLinks = makeShortcode(\"ComponentLinks\");\nconst PropsTable = makeShortcode(\"PropsTable\");\nconst layoutProps = {\n  frontMatter\n};\nconst MDXLayout = Layout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <p>{`The Button component is used to trigger an action or event, such as submitting a\nform, opening a dialog, canceling an action, or performing a delete operation.`}</p>\n    <ComponentLinks theme={{\n      componentName: \"button\"\n    }} github={{\n      package: \"button\"\n    }} npm={{\n      package: \"@chakra-ui/button\"\n    }} mdxType=\"ComponentLinks\" />\n    <p><carbon-ad></carbon-ad></p>\n    <h2 {...{\n      \"id\": \"import\"\n    }}>{`Import`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { Button, ButtonGroup } from \"@chakra-ui/react\"\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Button:`}</strong>{` The button component with support for custom icons, spinners, etc.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`ButtonGroup:`}</strong>{` Used to group buttons whose actions are related, with an\noption to flush them together.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Button colorScheme=\"blue\">Button</Button>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"button-sizes\"\n    }}>{`Button Sizes`}</h3>\n    <p>{`Use the `}<inlineCode parentName=\"p\">{`size`}</inlineCode>{` prop to change the size of the button. You can set the value to\n`}<inlineCode parentName=\"p\">{`xs`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`sm`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`md`}</inlineCode>{`, or `}<inlineCode parentName=\"p\">{`lg`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Stack spacing={4} direction=\"row\" align=\"center\">\n  <Button colorScheme=\"teal\" size=\"xs\">\n    Button\n  </Button>\n  <Button colorScheme=\"teal\" size=\"sm\">\n    Button\n  </Button>\n  <Button colorScheme=\"teal\" size=\"md\">\n    Button\n  </Button>\n  <Button colorScheme=\"teal\" size=\"lg\">\n    Button\n  </Button>\n</Stack>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"button-variants\"\n    }}>{`Button variants`}</h3>\n    <p>{`Use the `}<inlineCode parentName=\"p\">{`variant`}</inlineCode>{` prop to change the visual style of the Button. You can set the\nvalue to `}<inlineCode parentName=\"p\">{`solid`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`ghost`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`outline`}</inlineCode>{`, or `}<inlineCode parentName=\"p\">{`link`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Stack direction=\"row\" spacing={4} align=\"center\">\n  <Button colorScheme=\"teal\" variant=\"solid\">\n    Button\n  </Button>\n  <Button colorScheme=\"teal\" variant=\"outline\">\n    Button\n  </Button>\n  <Button colorScheme=\"teal\" variant=\"ghost\">\n    Button\n  </Button>\n  <Button colorScheme=\"teal\" variant=\"link\">\n    Button\n  </Button>\n</Stack>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"button-with-icon\"\n    }}>{`Button with icon`}</h3>\n    <p>{`You can add left and right icons to the Button component using the `}<inlineCode parentName=\"p\">{`leftIcon`}</inlineCode>{`\nand `}<inlineCode parentName=\"p\">{`rightIcon`}</inlineCode>{` props respectively.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Note: The `}<inlineCode parentName=\"p\">{`leftIcon`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`rightIcon`}</inlineCode>{` prop values should be react elements NOT\nstrings.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Stack direction=\"row\" spacing={4}>\n  <Button leftIcon={<EmailIcon />} colorScheme=\"teal\" variant=\"solid\">\n    Email\n  </Button>\n  <Button rightIcon={<ArrowForwardIcon />} colorScheme=\"teal\" variant=\"outline\">\n    Call us\n  </Button>\n</Stack>\n`}</code></pre>\n    <p>{`You can also use icons from popular libraries like\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://react-icons.github.io/react-icons/\"\n      }}>{`react-icons`}</a>{` and pass it into the\nbutton.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// import { MdBuild , MdCall } from \"react-icons/md\"\n\n<Stack direction=\"row\" spacing={4}>\n  <Button leftIcon={<MdBuild />} colorScheme=\"pink\" variant=\"solid\">\n    Settings\n  </Button>\n  <Button rightIcon={<MdCall />} colorScheme=\"blue\" variant=\"outline\">\n    Call us\n  </Button>\n</Stack>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"button-loading-state\"\n    }}>{`Button loading state`}</h3>\n    <p>{`Pass the `}<inlineCode parentName=\"p\">{`isLoading`}</inlineCode>{` prop to show its loading state. By default, the button will\nshow a spinner and leave the button's width unchanged.`}</p>\n    <p>{`You can also pass the `}<inlineCode parentName=\"p\">{`loadingText`}</inlineCode>{` prop to show a spinner and the loading text.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Stack direction=\"row\" spacing={4}>\n  <Button isLoading colorScheme=\"teal\" variant=\"solid\">\n    Email\n  </Button>\n  <Button\n    isLoading\n    loadingText=\"Submitting\"\n    colorScheme=\"teal\"\n    variant=\"outline\"\n  >\n    Submit\n  </Button>\n</Stack>\n`}</code></pre>\n    <p>{`You can also change the spinner itself to use custom loaders as per your design\nrequirements. Pass the `}<inlineCode parentName=\"p\">{`spinner`}</inlineCode>{` prop and set it to a custom react element.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Button\n  isLoading\n  colorScheme=\"blue\"\n  spinner={<BeatLoader size={8} color=\"white\" />}\n>\n  Click me\n</Button>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"social-buttons\"\n    }}>{`Social Buttons`}</h3>\n    <p>{`We've included the colors for common social media platforms, and you can simply\nuse their buttons via the `}<inlineCode parentName=\"p\">{`colorScheme`}</inlineCode>{` prop.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<HStack>\n  <Button colorScheme=\"facebook\" leftIcon={<FaFacebook />}>\n    Facebook\n  </Button>\n  <Button colorScheme=\"twitter\" leftIcon={<FaTwitter />}>\n    Twitter\n  </Button>\n</HStack>\n`}</code></pre>\n    <p>{`The Facebook and Twitter icons in the above example are available from\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://react-icons.netlify.com/#/\"\n      }}><inlineCode parentName=\"a\">{`react-icons`}</inlineCode></a>{` as `}<inlineCode parentName=\"p\">{`FaFacebook`}</inlineCode>{` and\n`}<inlineCode parentName=\"p\">{`FaTwitter`}</inlineCode>{`, found in the `}<inlineCode parentName=\"p\">{`react-icons/fa`}</inlineCode>{` import.`}</p>\n    <h3 {...{\n      \"id\": \"grouping-buttons\"\n    }}>{`Grouping Buttons`}</h3>\n    <p>{`You can use the `}<inlineCode parentName=\"p\">{`Stack`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`ButtonGroup`}</inlineCode>{` component to group buttons. When you\nuse the `}<inlineCode parentName=\"p\">{`ButtonGroup`}</inlineCode>{` component, it allows you to:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Set the `}<inlineCode parentName=\"li\">{`size`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`variant`}</inlineCode>{` of all buttons within it.`}</li>\n      <li parentName=\"ul\">{`Add `}<inlineCode parentName=\"li\">{`spacing`}</inlineCode>{` between the buttons.`}</li>\n      <li parentName=\"ul\">{`Flush the buttons together by removing the border radius of the its children\nas needed.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<ButtonGroup variant=\"outline\" spacing=\"6\">\n  <Button colorScheme=\"blue\">Save</Button>\n  <Button>Cancel</Button>\n</ButtonGroup>\n`}</code></pre>\n    <p>{`To flush the buttons, pass the `}<inlineCode parentName=\"p\">{`isAttached`}</inlineCode>{` prop.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<ButtonGroup size=\"sm\" isAttached variant=\"outline\">\n  <Button mr=\"-px\">Save</Button>\n  <IconButton aria-label=\"Add to friends\" icon={<AddIcon />} />\n</ButtonGroup>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"accessibility\"\n    }}>{`Accessibility`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Button has `}<inlineCode parentName=\"li\">{`role`}</inlineCode>{` of `}<inlineCode parentName=\"li\">{`button`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\">{`When Button has focus, `}<kbd>{`Space`}</kbd>{` or `}<kbd>{`Enter`}</kbd>{` activates it.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"composition\"\n    }}>{`Composition`}</h2>\n    <p>{`All props you pass (`}<inlineCode parentName=\"p\">{`variant`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`colorScheme`}</inlineCode>{`, etc.) are converted to style\nprops. This means you can override any style of the Button via props.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// The size prop affects the height of the button\n// It can still be overriden by passing a custom height\n<Button\n  size=\"md\"\n  height=\"48px\"\n  width=\"200px\"\n  border=\"2px\"\n  borderColor=\"green.500\"\n>\n  Button\n</Button>\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"custom-button\"\n    }}>{`Custom Button`}</h2>\n    <p>{`In the event that you need to make your own custom button, you can leverage the\n`}<inlineCode parentName=\"p\">{`Box`}</inlineCode>{` component. It provides the `}<inlineCode parentName=\"p\">{`hover`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`focus`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`active`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`disabled`}</inlineCode>{` style\nprops to style the button.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// Button from facebook.com\n<Box\n  as=\"button\"\n  height=\"24px\"\n  lineHeight=\"1.2\"\n  transition=\"all 0.2s cubic-bezier(.08,.52,.52,1)\"\n  border=\"1px\"\n  px=\"8px\"\n  borderRadius=\"2px\"\n  fontSize=\"14px\"\n  fontWeight=\"semibold\"\n  bg=\"#f5f6f7\"\n  borderColor=\"#ccd0d5\"\n  color=\"#4b4f56\"\n  _hover={{ bg: \"#ebedf0\" }}\n  _active={{\n    bg: \"#dddfe2\",\n    transform: \"scale(0.98)\",\n    borderColor: \"#bec3c9\",\n  }}\n  _focus={{\n    boxShadow:\n      \"0 0 1px 2px rgba(88, 144, 255, .75), 0 1px 1px rgba(0, 0, 0, .15)\",\n  }}\n>\n  Join Group\n</Box>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <h3 {...{\n      \"id\": \"button-props\"\n    }}>{`Button Props`}</h3>\n    <p><inlineCode parentName=\"p\">{`Button`}</inlineCode>{` composes the `}<inlineCode parentName=\"p\">{`Box`}</inlineCode>{` component, so you can pass all its props.\nThese are props specific to the `}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{` component:`}</p>\n    <PropsTable of=\"Button\" mdxType=\"PropsTable\" />\n    <h3 {...{\n      \"id\": \"button-group-props\"\n    }}>{`Button Group Props`}</h3>\n    <p><inlineCode parentName=\"p\">{`ButtonGroup`}</inlineCode>{` composes the `}<inlineCode parentName=\"p\">{`Box`}</inlineCode>{` component, so you can pass all its props.\nThese are props specific to the `}<inlineCode parentName=\"p\">{`ButtonGroup`}</inlineCode>{` component:`}</p>\n    <PropsTable of=\"ButtonGroup\" mdxType=\"PropsTable\" />\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"]},"metadata":{},"sourceType":"module"}