{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/sunfei/Downloads/website/pages/docs/comparison.mdx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport Layout from '/Users/sunfei/Downloads/website/layouts/index';\nexport var frontMatter = {\n  title: 'Comparison',\n  description: 'What makes Chakra UI different from other UI libraries',\n  slug: '/docs/comparison',\n  lastEdited: undefined,\n  editUrl: 'https://github.com/chakra-ui/chakra-ui/edit/develop/website/pages/docs/comparison.mdx',\n  author: undefined,\n  tags: undefined,\n  __resourcePath: 'docs/comparison.mdx',\n  __scans: {},\n  layout: 'index'\n};\nvar layoutProps = {\n  frontMatter: frontMatter\n};\nvar MDXLayout = Layout;\nexport default function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _objectSpread(_objectSpread(_objectSpread({}, layoutProps), props), {}, {\n    components: components,\n    mdxType: \"MDXLayout\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 10\n    }\n  }), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, \"When building a product, website, or application, it is a common question to\\nconsider the design system or component library to use to help you ship quality\\nproducts fast, and deliver value to your customers in a way that scales with\\nyour team.\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, \"Here's a comparison between Chakra UI and other popular UI or CSS frameworks\\nlike Theme UI, Tailwind CSS, and Material UI to help you make the best decision.\"), mdx(\"blockquote\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }, mdx(\"p\", {\n    parentName: \"blockquote\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }, \"This comparison strives to be as accurate and unbiased as possible. If you use\\nany of these libraries and feel this information could be improved, feel free\\nto suggest changes (with notes or evidence of claims) using the \\\"Edit this\\npage on Github\\\" link at the bottom of this page.\")), mdx(\"h2\", _objectSpread(_objectSpread({}, {\n    \"id\": \"how-is-chakra-different-from-tailwind-css\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }), \"How is Chakra different from Tailwind CSS?\"), mdx(\"h3\", _objectSpread(_objectSpread({}, {\n    \"id\": \"overview-\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }), \"Overview \\uD83D\\uDEA9\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, mdx(\"strong\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 8\n    }\n  }, \"Tailwind CSS\"), \": CSS Framework that provides atomic CSS classes to help you\\n\", mdx(\"strong\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 3\n    }\n  }, \"style\"), \" components, leaving you to handle lots of other things like\\naccessibility, component composition, keyboard navigation, style overrides, etc.\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }, mdx(\"strong\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 8\n    }\n  }, \"Chakra UI\"), \": A library of carefully created React components that comes with\\nall the styling benefits of Tailwind and takes care of all the details.\"), mdx(\"h3\", _objectSpread(_objectSpread({}, {\n    \"id\": \"learning-curve-\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }), \"Learning Curve \\uD83C\\uDF00\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, mdx(\"strong\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 8\n    }\n  }, \"Tailwind CSS:\"), \" If you come from a bootstrap or bulma CSS background, you\\nmight find it easy to pick up Tailwind. However, from a \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 59\n    }\n  }, \"styled-components\"), \" or\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 3\n    }\n  }, \"emotion\"), \" background, the learning curve can be rather steep.\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, mdx(\"strong\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 8\n    }\n  }, \"Chakra UI\"), \": Comes with a very intuitive, CSS-like, and prop based model of\\nstyling components, making it easy to learn. The components name and prop names\\nare also very easy to understand.\"), mdx(\"h3\", _objectSpread(_objectSpread({}, {\n    \"id\": \"responsive-styles-\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }), \"Responsive Styles \\uD83D\\uDCF1\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 5\n    }\n  }, mdx(\"strong\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 8\n    }\n  }, \"Tailwind CSS\"), \": Authoring responsive styles in tailwind requires a combination\\nof pseudo-classes. This can get rather lengthy as your project grows. The API:\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 3\n    }\n  }, \"<img class=\\\"w-16 md:w-32 lg:w-48\\\" src=\\\"...\\\">\")), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }\n  }, mdx(\"strong\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 8\n    }\n  }, \"Chakra UI\"), \": Authoring responsive styles in a very easy and intuitive way. You\\ncan use either the array or object notation.\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }\n  }, \"The API:\"), mdx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  }, mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }, \"Array syntax: \", mdx(\"inlineCode\", {\n    parentName: \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 45\n    }\n  }, \"<Img w={[16, 32, 48]} src=\\\"...\\\">\")), mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, \"Object syntax: \", mdx(\"inlineCode\", {\n    parentName: \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 46\n    }\n  }, \"<Img w={{ base: 16, md: 32, lg: 48 }} src=\\\"...\\\" />\"))), mdx(\"h3\", _objectSpread(_objectSpread({}, {\n    \"id\": \"style-overrides-\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }\n  }), \"Style Overrides \\uD83D\\uDCAB\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 5\n    }\n  }, \"In most applications, it is a common challenge to want to override styles for a\\nspecific context to match design requirements.\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }, mdx(\"strong\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 8\n    }\n  }, \"Tailwind CSS\"), \": Given that Tailwind is a CSS utility framework, you may need\\nto figure out the best way to override specific classNames, or write custom CSS.\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 5\n    }\n  }, mdx(\"strong\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 8\n    }\n  }, \"Chakra UI\"), \": Given that Chakra UI styles are prop-based, overrides is as easy\\nas passing a prop.\"), mdx(\"h3\", _objectSpread(_objectSpread({}, {\n    \"id\": \"accessibility-️\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 5\n    }\n  }), \"Accessibility \\u267F\\uFE0F\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 5\n    }\n  }, \"As mentioned earlier, Tailwind CSS is simply a CSS framework similar to\\nBootstrap or Bulma CSS. This leaves the user to handle semantic html structure,\\nmeeting the WAI-ARIA requirements, keyboard navigation, etc.\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }\n  }, \"Chakra provides the convenience of Tailwind and all these other benefits out the\\nbox.\"), mdx(\"h3\", _objectSpread(_objectSpread({}, {\n    \"id\": \"dark-mode-\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 5\n    }\n  }), \"Dark Mode \\uD83C\\uDF1C\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 5\n    }\n  }, mdx(\"strong\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 8\n    }\n  }, \"Tailwind CSS\"), \": Experimental\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 5\n    }\n  }, mdx(\"strong\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 8\n    }\n  }, \"Chakra UI\"), \": All components are light and dark mode compatible. You can also\\nauthor your own light and dark mode experience across your application.\"), mdx(\"h2\", _objectSpread(_objectSpread({}, {\n    \"id\": \"how-is-chakra-different-from-theme-ui\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 5\n    }\n  }), \"How is Chakra different from Theme UI?\"), mdx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 5\n    }\n  }, mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  }, \"Chakra UI was heavily inspired by Theme UI and follows the system UI\\nspecifications.\"), mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }\n  }, \"Chakra UI provide more components, improved styling API, accessibility, and\\nintuitive component APIs than Theme UI.\"), mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }\n  }, \"Think of Chakra as a more robust version of Theme UI that leverages the full\\npower of \", mdx(\"inlineCode\", {\n    parentName: \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 12\n    }\n  }, \"styled-system\"), \" to provide better component styles and theming.\")), mdx(\"h2\", _objectSpread(_objectSpread({}, {\n    \"id\": \"how-is-chakra-different-from-material-ui\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 5\n    }\n  }), \"How is Chakra different from Material UI?\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 5\n    }\n  }, \"// TO DO (Feel free to submit a PR)\"), mdx(\"h2\", _objectSpread(_objectSpread({}, {\n    \"id\": \"how-is-chakra-different-from-ant-design\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 5\n    }\n  }), \"How is Chakra different from Ant Design?\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 5\n    }\n  }, \"// TO DO (Feel free to submit a PR)\"), mdx(\"h2\", _objectSpread(_objectSpread({}, {\n    \"id\": \"the-runtime-trade-off-️\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 5\n    }\n  }), \"The Runtime Trade-off \\u26A0\\uFE0F\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 5\n    }\n  }, \"Since Chakra UI uses CSS-in-JS under the hood (\", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 59\n    }\n  }, \"emotion\"), \" + \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 117\n    }\n  }, \"styled-system\"), \"),\\nthis flexibility comes with a small price to pay when it comes to runtime. This\\nruntime footprint is caused by style computations by \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 56\n    }\n  }, \"styled-system\"), \", and\\nclassName generation by \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 27\n    }\n  }, \"emotion\"), \".\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 5\n    }\n  }, \"If your app deals with high, frequently changing data that is performance\\nsensitive, you might notice this footprint as your app grows.\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 5\n    }\n  }, \"We recommend you compare with alternatives before making the decision to use\\nChakra. However, for most small or medium data-driven applications, we think\\nChakra UI is a perfect fit.\"), mdx(\"h2\", _objectSpread(_objectSpread({}, {\n    \"id\": \"the-community-\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 5\n    }\n  }), \"The Community \\uD83D\\uDC96\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 5\n    }\n  }, \"My favourite thing about Chakra UI is the community around it. Despite the fact\\nthat it is still small for now, it is growing daily and everyone is so helpful\\nand we keep striving for better ways to improve Chakra UI's speed, performance\\nand developer experience.\"), mdx(\"h2\", _objectSpread(_objectSpread({}, {\n    \"id\": \"community-remarks-\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 5\n    }\n  }), \"Community Remarks \\uD83D\\uDCAC\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 5\n    }\n  }, \"\\\"When I'm pitching Chakra, my main selling point is that Chakra makes it easier\\nto customize components to be entirely your own. MUI has a distinctly \\\"material\\\"\\nlook that is difficult to get rid of even if you want to. Chakra strikes a\\nbalance of look nice out of the box and can morph into anything\\\".\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 5\n    }\n  }, mdx(\"strong\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 8\n    }\n  }, \"\\u2014 Vynlar\"), \"\\n\", mdx(\"a\", _objectSpread(_objectSpread({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/chakra-ui/chakra-ui/issues/1421#issuecomment-664423035\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 3\n    }\n  }), \"(View Quote)\")), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 5\n    }\n  }, \"\\\"When we were in the process of choosing a component library, like most others\\nthat found Chakra, we were looking for something that did a lot of the heavy\\nlifting for us whilst being as unopinionated as possible. This was a big reason\\nthat ruled most of the big players out (MUI, Ant). These big players are\\nawesome, don't get me wrong, but because they come with their own design\\nlanguages, you're kinda stuck with their look.\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 5\n    }\n  }, \"Then there were a bunch of other medium/small players, such as variations of\\nBootstrap in React. Among other small issues, these libraries generally don't\\nhave large hyper-active communities.\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 5\n    }\n  }, \"Then, I found Chakra.\"), mdx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 5\n    }\n  }, mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }\n  }, \"\\u2705 A wide range of well-thought components.\"), mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }\n  }, \"\\u2705 Unopinionated. Chakra gives you the tools to easily make your components\\nlook the way you want.\"), mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }\n  }, \"\\u2705 Built with accessibility in mind! You mean I don't have to worry about that\\nanymore!?\"), mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }\n  }, \"\\u2705 Amazing community, lead by a great team. \\u2764\\uFE0F\")), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 5\n    }\n  }, \"I feel like Chakra is becoming a movement, and I'm excited for it.\\\"\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 5\n    }\n  }, mdx(\"strong\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 8\n    }\n  }, \"\\u2014 ChasinHues\"), \"\\n\", mdx(\"a\", _objectSpread(_objectSpread({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/chakra-ui/chakra-ui/issues/1421#issuecomment-692369895\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 3\n    }\n  }), \"(View Quote)\")));\n}\n_c = MDXContent;\n;\nMDXContent.isMDXComponent = true;\n\nvar _c;\n\n$RefreshReg$(_c, \"MDXContent\");","map":{"version":3,"sources":["/Users/sunfei/Downloads/website/pages/docs/comparison.mdx"],"names":["React","mdx","Layout","frontMatter","title","description","slug","lastEdited","undefined","editUrl","author","tags","__resourcePath","__scans","layout","layoutProps","MDXLayout","MDXContent","components","props","isMDXComponent"],"mappings":"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","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport Layout, {  } from '/Users/sunfei/Downloads/website/layouts/index'\nexport const frontMatter = {\n  title: 'Comparison',\n  description: 'What makes Chakra UI different from other UI libraries',\n  slug: '/docs/comparison',\n  lastEdited: undefined,\n  editUrl: 'https://github.com/chakra-ui/chakra-ui/edit/develop/website/pages/docs/comparison.mdx',\n  author: undefined,\n  tags: undefined,\n  __resourcePath: 'docs/comparison.mdx',\n  __scans: {},\n  layout: 'index'\n};\n\nconst layoutProps = {\n  frontMatter\n};\nconst MDXLayout = Layout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <p>{`When building a product, website, or application, it is a common question to\nconsider the design system or component library to use to help you ship quality\nproducts fast, and deliver value to your customers in a way that scales with\nyour team.`}</p>\n    <p>{`Here's a comparison between Chakra UI and other popular UI or CSS frameworks\nlike Theme UI, Tailwind CSS, and Material UI to help you make the best decision.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`This comparison strives to be as accurate and unbiased as possible. If you use\nany of these libraries and feel this information could be improved, feel free\nto suggest changes (with notes or evidence of claims) using the \"Edit this\npage on Github\" link at the bottom of this page.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"how-is-chakra-different-from-tailwind-css\"\n    }}>{`How is Chakra different from Tailwind CSS?`}</h2>\n    <h3 {...{\n      \"id\": \"overview-\"\n    }}>{`Overview 🚩`}</h3>\n    <p><strong parentName=\"p\">{`Tailwind CSS`}</strong>{`: CSS Framework that provides atomic CSS classes to help you\n`}<strong parentName=\"p\">{`style`}</strong>{` components, leaving you to handle lots of other things like\naccessibility, component composition, keyboard navigation, style overrides, etc.`}</p>\n    <p><strong parentName=\"p\">{`Chakra UI`}</strong>{`: A library of carefully created React components that comes with\nall the styling benefits of Tailwind and takes care of all the details.`}</p>\n    <h3 {...{\n      \"id\": \"learning-curve-\"\n    }}>{`Learning Curve 🌀`}</h3>\n    <p><strong parentName=\"p\">{`Tailwind CSS:`}</strong>{` If you come from a bootstrap or bulma CSS background, you\nmight find it easy to pick up Tailwind. However, from a `}<inlineCode parentName=\"p\">{`styled-components`}</inlineCode>{` or\n`}<inlineCode parentName=\"p\">{`emotion`}</inlineCode>{` background, the learning curve can be rather steep.`}</p>\n    <p><strong parentName=\"p\">{`Chakra UI`}</strong>{`: Comes with a very intuitive, CSS-like, and prop based model of\nstyling components, making it easy to learn. The components name and prop names\nare also very easy to understand.`}</p>\n    <h3 {...{\n      \"id\": \"responsive-styles-\"\n    }}>{`Responsive Styles 📱`}</h3>\n    <p><strong parentName=\"p\">{`Tailwind CSS`}</strong>{`: Authoring responsive styles in tailwind requires a combination\nof pseudo-classes. This can get rather lengthy as your project grows. The API:\n`}<inlineCode parentName=\"p\">{`<img class=\"w-16 md:w-32 lg:w-48\" src=\"...\">`}</inlineCode></p>\n    <p><strong parentName=\"p\">{`Chakra UI`}</strong>{`: Authoring responsive styles in a very easy and intuitive way. You\ncan use either the array or object notation.`}</p>\n    <p>{`The API:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Array syntax: `}<inlineCode parentName=\"li\">{`<Img w={[16, 32, 48]} src=\"...\">`}</inlineCode></li>\n      <li parentName=\"ul\">{`Object syntax: `}<inlineCode parentName=\"li\">{`<Img w={{ base: 16, md: 32, lg: 48 }} src=\"...\" />`}</inlineCode></li>\n    </ul>\n    <h3 {...{\n      \"id\": \"style-overrides-\"\n    }}>{`Style Overrides 💫`}</h3>\n    <p>{`In most applications, it is a common challenge to want to override styles for a\nspecific context to match design requirements.`}</p>\n    <p><strong parentName=\"p\">{`Tailwind CSS`}</strong>{`: Given that Tailwind is a CSS utility framework, you may need\nto figure out the best way to override specific classNames, or write custom CSS.`}</p>\n    <p><strong parentName=\"p\">{`Chakra UI`}</strong>{`: Given that Chakra UI styles are prop-based, overrides is as easy\nas passing a prop.`}</p>\n    <h3 {...{\n      \"id\": \"accessibility-️\"\n    }}>{`Accessibility ♿️`}</h3>\n    <p>{`As mentioned earlier, Tailwind CSS is simply a CSS framework similar to\nBootstrap or Bulma CSS. This leaves the user to handle semantic html structure,\nmeeting the WAI-ARIA requirements, keyboard navigation, etc.`}</p>\n    <p>{`Chakra provides the convenience of Tailwind and all these other benefits out the\nbox.`}</p>\n    <h3 {...{\n      \"id\": \"dark-mode-\"\n    }}>{`Dark Mode 🌜`}</h3>\n    <p><strong parentName=\"p\">{`Tailwind CSS`}</strong>{`: Experimental`}</p>\n    <p><strong parentName=\"p\">{`Chakra UI`}</strong>{`: All components are light and dark mode compatible. You can also\nauthor your own light and dark mode experience across your application.`}</p>\n    <h2 {...{\n      \"id\": \"how-is-chakra-different-from-theme-ui\"\n    }}>{`How is Chakra different from Theme UI?`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Chakra UI was heavily inspired by Theme UI and follows the system UI\nspecifications.`}</li>\n      <li parentName=\"ul\">{`Chakra UI provide more components, improved styling API, accessibility, and\nintuitive component APIs than Theme UI.`}</li>\n      <li parentName=\"ul\">{`Think of Chakra as a more robust version of Theme UI that leverages the full\npower of `}<inlineCode parentName=\"li\">{`styled-system`}</inlineCode>{` to provide better component styles and theming.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"how-is-chakra-different-from-material-ui\"\n    }}>{`How is Chakra different from Material UI?`}</h2>\n    <p>{`// TO DO (Feel free to submit a PR)`}</p>\n    <h2 {...{\n      \"id\": \"how-is-chakra-different-from-ant-design\"\n    }}>{`How is Chakra different from Ant Design?`}</h2>\n    <p>{`// TO DO (Feel free to submit a PR)`}</p>\n    <h2 {...{\n      \"id\": \"the-runtime-trade-off-️\"\n    }}>{`The Runtime Trade-off ⚠️`}</h2>\n    <p>{`Since Chakra UI uses CSS-in-JS under the hood (`}<inlineCode parentName=\"p\">{`emotion`}</inlineCode>{` + `}<inlineCode parentName=\"p\">{`styled-system`}</inlineCode>{`),\nthis flexibility comes with a small price to pay when it comes to runtime. This\nruntime footprint is caused by style computations by `}<inlineCode parentName=\"p\">{`styled-system`}</inlineCode>{`, and\nclassName generation by `}<inlineCode parentName=\"p\">{`emotion`}</inlineCode>{`.`}</p>\n    <p>{`If your app deals with high, frequently changing data that is performance\nsensitive, you might notice this footprint as your app grows.`}</p>\n    <p>{`We recommend you compare with alternatives before making the decision to use\nChakra. However, for most small or medium data-driven applications, we think\nChakra UI is a perfect fit.`}</p>\n    <h2 {...{\n      \"id\": \"the-community-\"\n    }}>{`The Community 💖`}</h2>\n    <p>{`My favourite thing about Chakra UI is the community around it. Despite the fact\nthat it is still small for now, it is growing daily and everyone is so helpful\nand we keep striving for better ways to improve Chakra UI's speed, performance\nand developer experience.`}</p>\n    <h2 {...{\n      \"id\": \"community-remarks-\"\n    }}>{`Community Remarks 💬`}</h2>\n    <p>{`\"When I'm pitching Chakra, my main selling point is that Chakra makes it easier\nto customize components to be entirely your own. MUI has a distinctly \"material\"\nlook that is difficult to get rid of even if you want to. Chakra strikes a\nbalance of look nice out of the box and can morph into anything\".`}</p>\n    <p><strong parentName=\"p\">{`— Vynlar`}</strong>{`\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/chakra-ui/chakra-ui/issues/1421#issuecomment-664423035\"\n      }}>{`(View Quote)`}</a></p>\n    <p>{`\"When we were in the process of choosing a component library, like most others\nthat found Chakra, we were looking for something that did a lot of the heavy\nlifting for us whilst being as unopinionated as possible. This was a big reason\nthat ruled most of the big players out (MUI, Ant). These big players are\nawesome, don't get me wrong, but because they come with their own design\nlanguages, you're kinda stuck with their look.`}</p>\n    <p>{`Then there were a bunch of other medium/small players, such as variations of\nBootstrap in React. Among other small issues, these libraries generally don't\nhave large hyper-active communities.`}</p>\n    <p>{`Then, I found Chakra.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`✅ A wide range of well-thought components.`}</li>\n      <li parentName=\"ul\">{`✅ Unopinionated. Chakra gives you the tools to easily make your components\nlook the way you want.`}</li>\n      <li parentName=\"ul\">{`✅ Built with accessibility in mind! You mean I don't have to worry about that\nanymore!?`}</li>\n      <li parentName=\"ul\">{`✅ Amazing community, lead by a great team. ❤️`}</li>\n    </ul>\n    <p>{`I feel like Chakra is becoming a movement, and I'm excited for it.\"`}</p>\n    <p><strong parentName=\"p\">{`— ChasinHues`}</strong>{`\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/chakra-ui/chakra-ui/issues/1421#issuecomment-692369895\"\n      }}>{`(View Quote)`}</a></p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"]},"metadata":{},"sourceType":"module"}