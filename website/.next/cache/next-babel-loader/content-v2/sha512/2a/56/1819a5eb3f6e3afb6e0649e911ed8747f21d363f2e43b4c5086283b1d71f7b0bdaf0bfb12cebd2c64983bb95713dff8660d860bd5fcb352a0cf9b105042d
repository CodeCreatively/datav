{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/sunfei/Downloads/website/pages/docs/theming/customize-theme.mdx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport Layout from '/Users/sunfei/Downloads/website/layouts/index';\nexport var frontMatter = {\n  title: 'Customize Theme',\n  description: 'How to modify Chakra UI\\'s default theme',\n  slug: '/docs/theming/customize-theme',\n  lastEdited: undefined,\n  editUrl: 'https://github.com/chakra-ui/chakra-ui/edit/develop/website/pages/docs/theming/customize-theme.mdx',\n  author: undefined,\n  tags: undefined,\n  __resourcePath: 'docs/theming/customize-theme.mdx',\n  __scans: {},\n  layout: 'index'\n};\nvar layoutProps = {\n  frontMatter: frontMatter\n};\nvar MDXLayout = Layout;\nexport default function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _objectSpread(_objectSpread(_objectSpread({}, layoutProps), props), {}, {\n    components: components,\n    mdxType: \"MDXLayout\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 10\n    }\n  }), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, \"By default, all Chakra components inherit values from the default theme. In some\\nscenarios, you might need to customize the theme tokens to match your design\\nrequirements.\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }, \"Here are some options depending on your goals:\"), mdx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, \"Customize the theme tokens like colors, font sizes, line heights, etc.\"), mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, \"Customize the component styles, changing the base styles, sizes, or variants.\"), mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }, \"Customize the global styles.\")), mdx(\"h2\", _objectSpread(_objectSpread({}, {\n    \"id\": \"customizing-theme-tokens\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }), \"Customizing theme tokens\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, \"To extend or override a token in the default theme, import the \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 75\n    }\n  }, \"extendTheme\"), \"\\nfunction and add the keys you'd like to override. You can also add new values to\\nthe theme.\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, \"For example, if you'd like to update the colors in the theme to include your\\nbrand colors, here's what you'll do:\"), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 10\n    }\n  }), \"// 1. Import `extendTheme`\\nimport { extendTheme } from \\\"@chakra-ui/react\\\"\\n\\n// 2. Call `extendTheme` and pass your custom values\\nconst theme = extendTheme({\\n  colors: {\\n    brand: {\\n      100: \\\"#f7fafc\\\",\\n      // ...\\n      900: \\\"#1a202c\\\",\\n    },\\n  },\\n})\\n\\n// 3. Pass the new theme to `ChakraProvider`\\n<ChakraProvider theme={theme}>\\n  <App />\\n</ChakraProvider>\\n\\n// 4. Now you can use these colors in your components\\nfunction Usage() {\\n  return <Box bg=\\\"brand.100\\\">Welcome</Box>\\n}\\n\")), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }\n  }, \"You can also use the color for the \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 47\n    }\n  }, \"colorScheme\"), \" prop like this:\"), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 10\n    }\n  }), \"<Button colorScheme=\\\"brand\\\">Click me</Button>\\n\")), mdx(\"blockquote\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 5\n    }\n  }, mdx(\"p\", {\n    parentName: \"blockquote\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }, \"If you're curious as to what theme styles you can override, please reference\\nthe\\n\", mdx(\"a\", _objectSpread(_objectSpread({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/chakra-ui/chakra-ui/tree/master/packages/theme/src/foundations\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 3\n    }\n  }), \"default theme foundation style files\"), \".\")), mdx(\"h2\", _objectSpread(_objectSpread({}, {\n    \"id\": \"customizing-component-styles\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 5\n    }\n  }), \"Customizing component styles\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 5\n    }\n  }, \"Chakra has a specific approach or API for styling components. The main idea is\\nmost components have default or base styles (\", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 48\n    }\n  }, \"baseStyle\"), \"), styles for different\\nsizes (\", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 10\n    }\n  }, \"sizes\"), \"), and styles for different visual variants (\", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 108\n    }\n  }, \"variants\"), \").\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 5\n    }\n  }, \"It is important to understand this so you can override any component style\\neffectively.\"), mdx(\"blockquote\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 5\n    }\n  }, mdx(\"p\", {\n    parentName: \"blockquote\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }\n  }, \"You're not limited to the component styles that Chakra provides, you can also\\ncreate your own custom component styles.\\n\", mdx(\"a\", _objectSpread(_objectSpread({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/docs/theming/component-style\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 3\n    }\n  }), \"Learn more\"), \".\")), mdx(\"h3\", _objectSpread(_objectSpread({}, {\n    \"id\": \"customizing-single-components\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 5\n    }\n  }), \"Customizing single components\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 5\n    }\n  }, \"As we mentioned earlier, a component style consists of \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 67\n    }\n  }, \"baseStyles\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 127\n    }\n  }, \"sizes\"), \",\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 3\n    }\n  }, \"variants\"), \" and an optional \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 76\n    }\n  }, \"defaultProps\"), \" to denote the default \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 159\n    }\n  }, \"size\"), \" or\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 3\n    }\n  }, \"variant\"), \".\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 5\n    }\n  }, \"Here's what the component style object looks like:\"), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 10\n    }\n  }), \"const ComponentStyle = {\\n  // style object for base or default style\\n  baseStyle: {},\\n  // styles for different sizes (\\\"sm\\\", \\\"md\\\", \\\"lg\\\")\\n  sizes: {},\\n  // styles for different visual variants (\\\"outline\\\", \\\"solid\\\")\\n  variants: {},\\n  // default values for `size` and `variant`\\n  defaultProps: {\\n    size: \\\"\\\",\\n    variant: \\\"\\\",\\n  },\\n}\\n\")), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 5\n    }\n  }, \"For example, let's override the component styles for Chakra's Button component.\"), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 10\n    }\n  }), \"// theme.js\\nimport { extendTheme } from \\\"@chakra-ui/react\\\"\\n\\nconst theme = extendTheme({\\n  components: {\\n    Button: {\\n      // 1. We can update the base styles\\n      baseStyle: {\\n        fontWeight: \\\"bold\\\", // Normally, it is \\\"semibold\\\"\\n      },\\n      // 2. We can add a new button size or extend existing\\n      sizes: {\\n        xl: {\\n          h: \\\"56px\\\",\\n          fontSize: \\\"lg\\\",\\n          px: \\\"32px\\\",\\n        },\\n      },\\n      // 3. We can add a new visual variant\\n      variants: {\\n        \\\"with-shadow\\\": {\\n          bg: \\\"red.400\\\",\\n          boxShadow: \\\"0 0 2px 2px #efdfde\\\",\\n        },\\n        // 4. We can override existing variants\\n        solid: (props) => ({\\n          bg: props.colorMode === \\\"dark\\\" ? \\\"red.300\\\" : \\\"red.500\\\",\\n        }),\\n      },\\n    },\\n  },\\n})\\n\\nexport default theme\\n\")), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 5\n    }\n  }, \"That's it! When you use the Button from Chakra, these updates will be\\nautomatically applied.\"), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 10\n    }\n  }), \"<Button size=\\\"xl\\\" variant=\\\"with-shadow\\\">\\n  Welcome\\n</Button>\\n\")), mdx(\"blockquote\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 5\n    }\n  }, mdx(\"p\", {\n    parentName: \"blockquote\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }\n  }, \"If you're curious as to what component styles you can override, please\\nreference the\\n\", mdx(\"a\", _objectSpread(_objectSpread({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/chakra-ui/chakra-ui/tree/master/packages/theme/src/components\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 3\n    }\n  }), \"default component style files\"), \".\")), mdx(\"h3\", _objectSpread(_objectSpread({}, {\n    \"id\": \"customizing-global-styles\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 5\n    }\n  }), \"Customizing global styles\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 5\n    }\n  }, \"Global styles are theme-aware styles you can apply to any html element globally.\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 5\n    }\n  }, \"To add global styles, update the \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 45\n    }\n  }, \"theme.styles.global\"), \" key in the theme. Global\\nstyles can be a style object or a function that returns a style object.\"), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 10\n    }\n  }), \"// theme.js\\nimport { extendTheme } from \\\"@chakra-ui/react\\\"\\nimport { mode } from \\\"@chakra-ui/theme-tools\\\"\\n\\n// Version 1: Using objects\\nconst theme = extendTheme({\\n  styles: {\\n    global: {\\n      // styles for the `body`\\n      body: {\\n        bg: \\\"gray.400\\\",\\n        color: \\\"white\\\",\\n      },\\n      // styles for the `a`\\n      a: {\\n        color: \\\"teal.500\\\",\\n        _hover: {\\n          textDecoration: \\\"underline\\\",\\n        },\\n      },\\n    },\\n  },\\n})\\n\\n// Version 2: Using functions\\nconst overrides = extendTheme({\\n  styles: {\\n    global: (props) => ({\\n      body: {\\n        fontFamily: \\\"body\\\",\\n        color: mode(\\\"gray.800\\\", \\\"whiteAlpha.900\\\")(props),\\n        bg: mode(\\\"white\\\", \\\"gray.800\\\")(props),\\n        lineHeight: \\\"base\\\",\\n      },\\n    }),\\n  },\\n})\\n\")), mdx(\"h2\", _objectSpread(_objectSpread({}, {\n    \"id\": \"scaling-out-your-project\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 5\n    }\n  }), \"Scaling out your project\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 5\n    }\n  }, \"As your project grows in size, it is best to keep things organized. We highly\\nsuggest that instead of using a single \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 42\n    }\n  }, \"theme.js\"), \" (or \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 103\n    }\n  }, \"theme.ts\"), \") file, you\\ncreate a \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 12\n    }\n  }, \"/theme\"), \" folder in its place. Inside this folder, you could have a\\ndirectory structure that looks like this:\"), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 10\n    }\n  }), \"\\uD83D\\uDCC1 theme\\n  \\uD83D\\uDCC4 index.js  # my main theme entrypoint\\n  \\uD83D\\uDCC4 styles.js  # all my global style overrides\\n  \\uD83D\\uDCC1 foundations\\n    \\uD83D\\uDCC4 borders.js  # all my border overrides\\n  \\uD83D\\uDCC1 components\\n    \\uD83D\\uDCC4 button.js  # all my button overrides\\n\")), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 5\n    }\n  }, \"This way, you can structure your main theme entrypoint file to be much cleaner,\\nlike this:\"), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 10\n    }\n  }), \"// theme.js\\nimport { extendTheme } from \\\"@chakra-ui/react\\\"\\n\\n// Global style overrides\\nimport styles from \\\"./styles\\\"\\n\\n// Foundational style overrides\\nimport borders from \\\"./foundations/borders\\\"\\n\\n// Component style overrides\\nimport Button from \\\"./components/button\\\"\\n\\nconst overrides = {\\n  styles,\\n  borders,\\n  // Other foundational style overrides go here\\n  components: {\\n    Button,\\n    // Other components go here\\n  },\\n}\\n\\nexport default extendTheme(overrides)\\n\")), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 5\n    }\n  }, \"None of these is strictly required to use Chakra - but we've learned some hard\\nlessons on the \\\"right\\\" way and the \\\"wrong\\\" way to write styles. The above is our\\nbest suggestion on how to write style overrides and organize your custom theme.\"), mdx(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 5\n    }\n  }), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 5\n    }\n  }, mdx(\"a\", _objectSpread(_objectSpread({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/docs/theming/component-style\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 8\n    }\n  }), \"In the next section\"), \", we'll show some examples\\nof how to create custom component styles and use them in your components!\"));\n}\n_c = MDXContent;\n;\nMDXContent.isMDXComponent = true;\n\nvar _c;\n\n$RefreshReg$(_c, \"MDXContent\");","map":{"version":3,"sources":["/Users/sunfei/Downloads/website/pages/docs/theming/customize-theme.mdx"],"names":["React","mdx","Layout","frontMatter","title","description","slug","lastEdited","undefined","editUrl","author","tags","__resourcePath","__scans","layout","layoutProps","MDXLayout","MDXContent","components","props","isMDXComponent"],"mappings":"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","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport Layout, {  } from '/Users/sunfei/Downloads/website/layouts/index'\nexport const frontMatter = {\n  title: 'Customize Theme',\n  description: 'How to modify Chakra UI\\'s default theme',\n  slug: '/docs/theming/customize-theme',\n  lastEdited: undefined,\n  editUrl: 'https://github.com/chakra-ui/chakra-ui/edit/develop/website/pages/docs/theming/customize-theme.mdx',\n  author: undefined,\n  tags: undefined,\n  __resourcePath: 'docs/theming/customize-theme.mdx',\n  __scans: {},\n  layout: 'index'\n};\n\nconst layoutProps = {\n  frontMatter\n};\nconst MDXLayout = Layout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <p>{`By default, all Chakra components inherit values from the default theme. In some\nscenarios, you might need to customize the theme tokens to match your design\nrequirements.`}</p>\n    <p>{`Here are some options depending on your goals:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Customize the theme tokens like colors, font sizes, line heights, etc.`}</li>\n      <li parentName=\"ul\">{`Customize the component styles, changing the base styles, sizes, or variants.`}</li>\n      <li parentName=\"ul\">{`Customize the global styles.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"customizing-theme-tokens\"\n    }}>{`Customizing theme tokens`}</h2>\n    <p>{`To extend or override a token in the default theme, import the `}<inlineCode parentName=\"p\">{`extendTheme`}</inlineCode>{`\nfunction and add the keys you'd like to override. You can also add new values to\nthe theme.`}</p>\n    <p>{`For example, if you'd like to update the colors in the theme to include your\nbrand colors, here's what you'll do:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live=false\",\n        \"live\": \"false\"\n      }}>{`// 1. Import \\`extendTheme\\`\nimport { extendTheme } from \"@chakra-ui/react\"\n\n// 2. Call \\`extendTheme\\` and pass your custom values\nconst theme = extendTheme({\n  colors: {\n    brand: {\n      100: \"#f7fafc\",\n      // ...\n      900: \"#1a202c\",\n    },\n  },\n})\n\n// 3. Pass the new theme to \\`ChakraProvider\\`\n<ChakraProvider theme={theme}>\n  <App />\n</ChakraProvider>\n\n// 4. Now you can use these colors in your components\nfunction Usage() {\n  return <Box bg=\"brand.100\">Welcome</Box>\n}\n`}</code></pre>\n    <p>{`You can also use the color for the `}<inlineCode parentName=\"p\">{`colorScheme`}</inlineCode>{` prop like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live=false\",\n        \"live\": \"false\"\n      }}>{`<Button colorScheme=\"brand\">Click me</Button>\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`If you're curious as to what theme styles you can override, please reference\nthe\n`}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/chakra-ui/chakra-ui/tree/master/packages/theme/src/foundations\"\n        }}>{`default theme foundation style files`}</a>{`.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"customizing-component-styles\"\n    }}>{`Customizing component styles`}</h2>\n    <p>{`Chakra has a specific approach or API for styling components. The main idea is\nmost components have default or base styles (`}<inlineCode parentName=\"p\">{`baseStyle`}</inlineCode>{`), styles for different\nsizes (`}<inlineCode parentName=\"p\">{`sizes`}</inlineCode>{`), and styles for different visual variants (`}<inlineCode parentName=\"p\">{`variants`}</inlineCode>{`).`}</p>\n    <p>{`It is important to understand this so you can override any component style\neffectively.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`You're not limited to the component styles that Chakra provides, you can also\ncreate your own custom component styles.\n`}<a parentName=\"p\" {...{\n          \"href\": \"/docs/theming/component-style\"\n        }}>{`Learn more`}</a>{`.`}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"customizing-single-components\"\n    }}>{`Customizing single components`}</h3>\n    <p>{`As we mentioned earlier, a component style consists of `}<inlineCode parentName=\"p\">{`baseStyles`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`sizes`}</inlineCode>{`,\n`}<inlineCode parentName=\"p\">{`variants`}</inlineCode>{` and an optional `}<inlineCode parentName=\"p\">{`defaultProps`}</inlineCode>{` to denote the default `}<inlineCode parentName=\"p\">{`size`}</inlineCode>{` or\n`}<inlineCode parentName=\"p\">{`variant`}</inlineCode>{`.`}</p>\n    <p>{`Here's what the component style object looks like:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live=false\",\n        \"live\": \"false\"\n      }}>{`const ComponentStyle = {\n  // style object for base or default style\n  baseStyle: {},\n  // styles for different sizes (\"sm\", \"md\", \"lg\")\n  sizes: {},\n  // styles for different visual variants (\"outline\", \"solid\")\n  variants: {},\n  // default values for \\`size\\` and \\`variant\\`\n  defaultProps: {\n    size: \"\",\n    variant: \"\",\n  },\n}\n`}</code></pre>\n    <p>{`For example, let's override the component styles for Chakra's Button component.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live=false\",\n        \"live\": \"false\"\n      }}>{`// theme.js\nimport { extendTheme } from \"@chakra-ui/react\"\n\nconst theme = extendTheme({\n  components: {\n    Button: {\n      // 1. We can update the base styles\n      baseStyle: {\n        fontWeight: \"bold\", // Normally, it is \"semibold\"\n      },\n      // 2. We can add a new button size or extend existing\n      sizes: {\n        xl: {\n          h: \"56px\",\n          fontSize: \"lg\",\n          px: \"32px\",\n        },\n      },\n      // 3. We can add a new visual variant\n      variants: {\n        \"with-shadow\": {\n          bg: \"red.400\",\n          boxShadow: \"0 0 2px 2px #efdfde\",\n        },\n        // 4. We can override existing variants\n        solid: (props) => ({\n          bg: props.colorMode === \"dark\" ? \"red.300\" : \"red.500\",\n        }),\n      },\n    },\n  },\n})\n\nexport default theme\n`}</code></pre>\n    <p>{`That's it! When you use the Button from Chakra, these updates will be\nautomatically applied.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live=false\",\n        \"live\": \"false\"\n      }}>{`<Button size=\"xl\" variant=\"with-shadow\">\n  Welcome\n</Button>\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`If you're curious as to what component styles you can override, please\nreference the\n`}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/chakra-ui/chakra-ui/tree/master/packages/theme/src/components\"\n        }}>{`default component style files`}</a>{`.`}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"customizing-global-styles\"\n    }}>{`Customizing global styles`}</h3>\n    <p>{`Global styles are theme-aware styles you can apply to any html element globally.`}</p>\n    <p>{`To add global styles, update the `}<inlineCode parentName=\"p\">{`theme.styles.global`}</inlineCode>{` key in the theme. Global\nstyles can be a style object or a function that returns a style object.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live=false\",\n        \"live\": \"false\"\n      }}>{`// theme.js\nimport { extendTheme } from \"@chakra-ui/react\"\nimport { mode } from \"@chakra-ui/theme-tools\"\n\n// Version 1: Using objects\nconst theme = extendTheme({\n  styles: {\n    global: {\n      // styles for the \\`body\\`\n      body: {\n        bg: \"gray.400\",\n        color: \"white\",\n      },\n      // styles for the \\`a\\`\n      a: {\n        color: \"teal.500\",\n        _hover: {\n          textDecoration: \"underline\",\n        },\n      },\n    },\n  },\n})\n\n// Version 2: Using functions\nconst overrides = extendTheme({\n  styles: {\n    global: (props) => ({\n      body: {\n        fontFamily: \"body\",\n        color: mode(\"gray.800\", \"whiteAlpha.900\")(props),\n        bg: mode(\"white\", \"gray.800\")(props),\n        lineHeight: \"base\",\n      },\n    }),\n  },\n})\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"scaling-out-your-project\"\n    }}>{`Scaling out your project`}</h2>\n    <p>{`As your project grows in size, it is best to keep things organized. We highly\nsuggest that instead of using a single `}<inlineCode parentName=\"p\">{`theme.js`}</inlineCode>{` (or `}<inlineCode parentName=\"p\">{`theme.ts`}</inlineCode>{`) file, you\ncreate a `}<inlineCode parentName=\"p\">{`/theme`}</inlineCode>{` folder in its place. Inside this folder, you could have a\ndirectory structure that looks like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`📁 theme\n  📄 index.js  # my main theme entrypoint\n  📄 styles.js  # all my global style overrides\n  📁 foundations\n    📄 borders.js  # all my border overrides\n  📁 components\n    📄 button.js  # all my button overrides\n`}</code></pre>\n    <p>{`This way, you can structure your main theme entrypoint file to be much cleaner,\nlike this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live=false\",\n        \"live\": \"false\"\n      }}>{`// theme.js\nimport { extendTheme } from \"@chakra-ui/react\"\n\n// Global style overrides\nimport styles from \"./styles\"\n\n// Foundational style overrides\nimport borders from \"./foundations/borders\"\n\n// Component style overrides\nimport Button from \"./components/button\"\n\nconst overrides = {\n  styles,\n  borders,\n  // Other foundational style overrides go here\n  components: {\n    Button,\n    // Other components go here\n  },\n}\n\nexport default extendTheme(overrides)\n`}</code></pre>\n    <p>{`None of these is strictly required to use Chakra - but we've learned some hard\nlessons on the \"right\" way and the \"wrong\" way to write styles. The above is our\nbest suggestion on how to write style overrides and organize your custom theme.`}</p>\n    <hr></hr>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"/docs/theming/component-style\"\n      }}>{`In the next section`}</a>{`, we'll show some examples\nof how to create custom component styles and use them in your components!`}</p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"]},"metadata":{},"sourceType":"module"}