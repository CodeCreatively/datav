{"ast":null,"code":"var _jsxFileName = \"/Users/sunfei/Downloads/website/pages/docs/features/global-styles.mdx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport Layout from '/Users/sunfei/Downloads/website/layouts/index';\nexport const frontMatter = {\n  title: 'Global Styles',\n  description: 'How to manage and inject global styles in Chakra UI',\n  slug: '/docs/features/global-styles',\n  lastEdited: undefined,\n  editUrl: 'https://github.com/chakra-ui/chakra-ui/edit/develop/website/pages/docs/features/global-styles.mdx',\n  author: undefined,\n  tags: undefined,\n  __resourcePath: 'docs/features/global-styles.mdx',\n  __scans: {},\n  layout: 'index'\n};\nconst layoutProps = {\n  frontMatter\n};\nconst MDXLayout = Layout;\nexport default function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _objectSpread(_objectSpread(_objectSpread({}, layoutProps), props), {}, {\n    components: components,\n    mdxType: \"MDXLayout\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 10\n    }\n  }), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 8\n    }\n  }, `GlobalStyle`), ` is a new component in v1 that injects styles defined in\n`, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 3\n    }\n  }, `theme.styles.global`), ` into the global styles of your app or website.`), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }\n  }, `This allows you define theme-aware styles for any elements.`), mdx(\"h2\", _objectSpread(_objectSpread({}, {\n    \"id\": \"how-it-works\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }), `How it works`), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }, `By using `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 21\n    }\n  }, `ChakraProvider`), ` at the root of your application, we automatically\nrender a `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 12\n    }\n  }, `GlobalStyle`), ` component. Here's what `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 95\n    }\n  }, `GlobalStyle`), ` does under the hood:`), mdx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }, `Reads the styles defined in `, mdx(\"inlineCode\", {\n    parentName: \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 59\n    }\n  }, `theme.styles.global`), `, this style can be a style\nobject or a function that returns a style object.`), mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, `Process the styles and pass it to emotion's `, mdx(\"inlineCode\", {\n    parentName: \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 75\n    }\n  }, `Global`), ` component which is used\nto handle global style injection.`)), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 10\n    }\n  }), `// 1. Using a style object\nconst theme = {\n  styles: {\n    global: {\n      \"html, body\": {\n        fontSize: \"sm\",\n        color: \"gray.600\",\n        lineHeight: \"tall\",\n      },\n      a: {\n        color: \"teal.500\",\n      },\n    },\n  },\n}\n\n// 2. Using a function\n// NB: Chakra gives you access to \\`colorMode\\` and \\`theme\\` in \\`props\\`\nconst theme = {\n  styles: {\n    global: (props) => ({\n      \"html, body\": {\n        fontSize: \"sm\",\n        color: props.colorMode === \"dark\" ? \"white\" : \"gray.600\",\n        lineHeight: \"tall\",\n      },\n      a: {\n        color: props.colorMode === \"dark\" ? \"teal.300\" : \"teal.500\",\n      },\n    }),\n  },\n}\n`)), mdx(\"h2\", _objectSpread(_objectSpread({}, {\n    \"id\": \"default-styles\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }\n  }), `Default styles`), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 5\n    }\n  }, `The default Chakra theme provides sensible global styles. Here's what it looks\nlike:`), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 10\n    }\n  }), `const styles = {\n  global: (props) => ({\n    fontFamily: \"body\",\n    color: mode(\"gray.800\", \"whiteAlpha.900\")(props),\n    bg: mode(\"white\", \"gray.800\")(props),\n    lineHeight: \"base\",\n    \"*::placeholder\": {\n      color: mode(\"gray.400\", \"whiteAlpha.400\")(props),\n    },\n    \"*, *::before, &::after\": {\n      borderColor: mode(\"gray.200\", \"whiteAlpha.300\")(props),\n      wordWrap: \"break-word\",\n    },\n    fontFeatureSettings: \\`\"pnum\"\\`,\n    fontVariantNumeric: \"proportional-nums\",\n  }),\n}\n`)), mdx(\"blockquote\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 5\n    }\n  }, mdx(\"p\", {\n    parentName: \"blockquote\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }\n  }, mdx(\"strong\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 34\n    }\n  }, `Note ðŸš¨:`), ` `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 83\n    }\n  }, `mode(lightMode, darkMode)(props)`), ` function is the same as\n`, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 3\n    }\n  }, `props.colorMode === \"dark\" ? darkMode : lightMode`))), mdx(\"h2\", _objectSpread(_objectSpread({}, {\n    \"id\": \"styling-non-chakra-elements-globally\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 5\n    }\n  }), `Styling non-Chakra elements globally`), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 5\n    }\n  }, `When combining Chakra with other libraries, you might need a way to style some\nelements in those libraries using the theme defined tokens.`), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 5\n    }\n  }, `Let's say you have a blog written in `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 49\n    }\n  }, `mdx`), ` and you'd like to style all the MDX\nelements globally. Here's what you'll do.`), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 10\n    }\n  }), `// 1. Wrap the rendered mdx in a container\nconst MDXWrapper = (props) => <div className=\"mdx-prose\" {...props} />\n\n// 2. Define global styles\n// PRO TIP: Again, you can also use the function version here\nconst theme = {\n  styles: {\n    global: {\n      \".mdx-prose\": {\n        h1: {\n          fontSize: \"xl\",\n          mb: \"4\",\n        },\n        p: {\n          fontSize: \"sm\",\n          lineHeight: \"1.4\",\n        },\n      },\n    },\n  },\n}\n\n// 3. That's it! Your app will now read and use the global styles\n`)), mdx(\"h2\", _objectSpread(_objectSpread({}, {\n    \"id\": \"community-examples\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 5\n    }\n  }), `Community examples`), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 5\n    }\n  }, `To help you better understand this concept, here are links to community projects\nthat use custom global styles.`), mdx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 5\n    }\n  }, mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }\n  }, mdx(\"a\", _objectSpread(_objectSpread({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://git.habd.as/comfusion/gatsby-starter-i18n-react-i18next/src/branch/master/src/utils/theme.tsx\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 27\n    }\n  }), `Gatsby Starter i18n`))));\n}\n;\nMDXContent.isMDXComponent = true;","map":{"version":3,"sources":["/Users/sunfei/Downloads/website/pages/docs/features/global-styles.mdx"],"names":["React","mdx","Layout","frontMatter","title","description","slug","lastEdited","undefined","editUrl","author","tags","__resourcePath","__scans","layout","layoutProps","MDXLayout","MDXContent","components","props","isMDXComponent"],"mappings":"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","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport Layout, {  } from '/Users/sunfei/Downloads/website/layouts/index'\nexport const frontMatter = {\n  title: 'Global Styles',\n  description: 'How to manage and inject global styles in Chakra UI',\n  slug: '/docs/features/global-styles',\n  lastEdited: undefined,\n  editUrl: 'https://github.com/chakra-ui/chakra-ui/edit/develop/website/pages/docs/features/global-styles.mdx',\n  author: undefined,\n  tags: undefined,\n  __resourcePath: 'docs/features/global-styles.mdx',\n  __scans: {},\n  layout: 'index'\n};\n\nconst layoutProps = {\n  frontMatter\n};\nconst MDXLayout = Layout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <p><inlineCode parentName=\"p\">{`GlobalStyle`}</inlineCode>{` is a new component in v1 that injects styles defined in\n`}<inlineCode parentName=\"p\">{`theme.styles.global`}</inlineCode>{` into the global styles of your app or website.`}</p>\n    <p>{`This allows you define theme-aware styles for any elements.`}</p>\n    <h2 {...{\n      \"id\": \"how-it-works\"\n    }}>{`How it works`}</h2>\n    <p>{`By using `}<inlineCode parentName=\"p\">{`ChakraProvider`}</inlineCode>{` at the root of your application, we automatically\nrender a `}<inlineCode parentName=\"p\">{`GlobalStyle`}</inlineCode>{` component. Here's what `}<inlineCode parentName=\"p\">{`GlobalStyle`}</inlineCode>{` does under the hood:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Reads the styles defined in `}<inlineCode parentName=\"li\">{`theme.styles.global`}</inlineCode>{`, this style can be a style\nobject or a function that returns a style object.`}</li>\n      <li parentName=\"ul\">{`Process the styles and pass it to emotion's `}<inlineCode parentName=\"li\">{`Global`}</inlineCode>{` component which is used\nto handle global style injection.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// 1. Using a style object\nconst theme = {\n  styles: {\n    global: {\n      \"html, body\": {\n        fontSize: \"sm\",\n        color: \"gray.600\",\n        lineHeight: \"tall\",\n      },\n      a: {\n        color: \"teal.500\",\n      },\n    },\n  },\n}\n\n// 2. Using a function\n// NB: Chakra gives you access to \\`colorMode\\` and \\`theme\\` in \\`props\\`\nconst theme = {\n  styles: {\n    global: (props) => ({\n      \"html, body\": {\n        fontSize: \"sm\",\n        color: props.colorMode === \"dark\" ? \"white\" : \"gray.600\",\n        lineHeight: \"tall\",\n      },\n      a: {\n        color: props.colorMode === \"dark\" ? \"teal.300\" : \"teal.500\",\n      },\n    }),\n  },\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"default-styles\"\n    }}>{`Default styles`}</h2>\n    <p>{`The default Chakra theme provides sensible global styles. Here's what it looks\nlike:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const styles = {\n  global: (props) => ({\n    fontFamily: \"body\",\n    color: mode(\"gray.800\", \"whiteAlpha.900\")(props),\n    bg: mode(\"white\", \"gray.800\")(props),\n    lineHeight: \"base\",\n    \"*::placeholder\": {\n      color: mode(\"gray.400\", \"whiteAlpha.400\")(props),\n    },\n    \"*, *::before, &::after\": {\n      borderColor: mode(\"gray.200\", \"whiteAlpha.300\")(props),\n      wordWrap: \"break-word\",\n    },\n    fontFeatureSettings: \\`\"pnum\"\\`,\n    fontVariantNumeric: \"proportional-nums\",\n  }),\n}\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Note ðŸš¨:`}</strong>{` `}<inlineCode parentName=\"p\">{`mode(lightMode, darkMode)(props)`}</inlineCode>{` function is the same as\n`}<inlineCode parentName=\"p\">{`props.colorMode === \"dark\" ? darkMode : lightMode`}</inlineCode></p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"styling-non-chakra-elements-globally\"\n    }}>{`Styling non-Chakra elements globally`}</h2>\n    <p>{`When combining Chakra with other libraries, you might need a way to style some\nelements in those libraries using the theme defined tokens.`}</p>\n    <p>{`Let's say you have a blog written in `}<inlineCode parentName=\"p\">{`mdx`}</inlineCode>{` and you'd like to style all the MDX\nelements globally. Here's what you'll do.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// 1. Wrap the rendered mdx in a container\nconst MDXWrapper = (props) => <div className=\"mdx-prose\" {...props} />\n\n// 2. Define global styles\n// PRO TIP: Again, you can also use the function version here\nconst theme = {\n  styles: {\n    global: {\n      \".mdx-prose\": {\n        h1: {\n          fontSize: \"xl\",\n          mb: \"4\",\n        },\n        p: {\n          fontSize: \"sm\",\n          lineHeight: \"1.4\",\n        },\n      },\n    },\n  },\n}\n\n// 3. That's it! Your app will now read and use the global styles\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"community-examples\"\n    }}>{`Community examples`}</h2>\n    <p>{`To help you better understand this concept, here are links to community projects\nthat use custom global styles.`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://git.habd.as/comfusion/gatsby-starter-i18n-react-i18next/src/branch/master/src/utils/theme.tsx\"\n        }}>{`Gatsby Starter i18n`}</a></li>\n    </ul>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"]},"metadata":{},"sourceType":"module"}