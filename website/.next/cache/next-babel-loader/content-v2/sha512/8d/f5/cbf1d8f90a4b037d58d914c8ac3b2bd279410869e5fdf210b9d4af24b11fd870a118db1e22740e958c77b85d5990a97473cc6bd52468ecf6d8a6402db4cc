{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/sunfei/Downloads/website/pages/docs/typography/text.mdx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport Layout from '/Users/sunfei/Downloads/website/layouts/index';\nimport ComponentLinks from \"../../../src/components/component-links\";\nexport var frontMatter = {\n  title: 'Text',\n  \"package\": '@chakra-ui/layout',\n  description: 'Text is the used to render text and paragraphs within an interface.',\n  slug: '/docs/typography/text',\n  lastEdited: undefined,\n  editUrl: 'https://github.com/chakra-ui/chakra-ui/edit/develop/website/pages/docs/typography/text.mdx',\n  author: undefined,\n  tags: undefined,\n  __resourcePath: 'docs/typography/text.mdx',\n  __scans: {},\n  layout: 'index'\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", _objectSpread(_objectSpread({}, props), {}, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 14\n      }\n    }));\n  };\n};\n\nvar PropsTable = makeShortcode(\"PropsTable\");\n_c = PropsTable;\nvar layoutProps = {\n  frontMatter: frontMatter\n};\nvar MDXLayout = Layout;\nexport default function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _objectSpread(_objectSpread(_objectSpread({}, layoutProps), props), {}, {\n    components: components,\n    mdxType: \"MDXLayout\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 10\n    }\n  }), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 8\n    }\n  }, \"Text\"), \" component is the used to render text and paragraphs within an interface.\\nIt renders a \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 16\n    }\n  }, \"<p>\"), \" tag by default.\"), mdx(ComponentLinks, {\n    github: {\n      \"package\": \"layout\"\n    },\n    npm: {\n      \"package\": \"@chakra-ui/layout\"\n    },\n    mdxType: \"ComponentLinks\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, mdx(\"carbon-ad\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 8\n    }\n  })), mdx(\"h2\", _objectSpread(_objectSpread({}, {\n    \"id\": \"import\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }), \"Import\"), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 10\n    }\n  }), \"import { Text } from \\\"@chakra-ui/react\\\"\\n\")), mdx(\"h2\", _objectSpread(_objectSpread({}, {\n    \"id\": \"changing-the-font-size\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }), \"Changing the font size\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }\n  }, \"To increase the font size of the text, you can pass the \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 68\n    }\n  }, \"fontSize\"), \" prop.\"), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 10\n    }\n  }), \"<Stack spacing={3}>\\n  <Text fontSize=\\\"6xl\\\">(6xl) In love with React & Next</Text>\\n  <Text fontSize=\\\"5xl\\\">(5xl) In love with React & Next</Text>\\n  <Text fontSize=\\\"4xl\\\">(4xl) In love with React & Next</Text>\\n  <Text fontSize=\\\"3xl\\\">(3xl) In love with React & Next</Text>\\n  <Text fontSize=\\\"2xl\\\">(2xl) In love with React & Next</Text>\\n  <Text fontSize=\\\"xl\\\">(xl) In love with React & Next</Text>\\n  <Text fontSize=\\\"lg\\\">(lg) In love with React & Next</Text>\\n  <Text fontSize=\\\"md\\\">(md) In love with React & Next</Text>\\n  <Text fontSize=\\\"sm\\\">(sm) In love with React & Next</Text>\\n  <Text fontSize=\\\"xs\\\">(xs) In love with React & Next</Text>\\n</Stack>\\n\")), mdx(\"h3\", _objectSpread(_objectSpread({}, {\n    \"id\": \"truncate-text\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  }), \"Truncate text\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }\n  }, \"Pass the \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 21\n    }\n  }, \"isTruncated\"), \" prop to render an ellipsis when the text exceeds the\\nwidth of the viewport or \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 28\n    }\n  }, \"maxWidth\"), \" prop.\"), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 10\n    }\n  }), \"<Text color=\\\"gray.500\\\" isTruncated>\\n  Lorem ipsum is placeholder text commonly used in the graphic, print, and\\n  publishing industries for previewing layouts and visual mockups.\\n</Text>\\n\")), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 5\n    }\n  }, \"Likewise, if you'd like to truncate the text after a specific number of lines,\\npass the \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 12\n    }\n  }, \"noOfLines\"), \" prop and set it to the desired no of lines.\"), mdx(\"blockquote\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 5\n    }\n  }, mdx(\"p\", {\n    parentName: \"blockquote\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }, \"Pro Tip \\uD83D\\uDCA1: You can also apply \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 69\n    }\n  }, \"noOfLines\"), \" responsively.\")), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 10\n    }\n  }), \"// Basic version\\n<Text noOfLines={2}>\\n  \\\"The quick brown fox jumps over the lazy dog\\\" is an English-language pangram\\u2014a\\n  sentence that contains all of the letters of the English alphabet. Owing to\\n  its existence, Chakra was created.\\n</Text>\\n\\n// Responsive version\\n<Text noOfLines={[1, 2, 3]}>\\n   \\\"The quick brown fox jumps over the lazy dog\\\" is an English-language pangram\\u2014a\\n  sentence that contains all of the letters of the English alphabet. Owing to\\n  its existence, Chakra was created.\\n</Text>\\n\")), mdx(\"h3\", _objectSpread(_objectSpread({}, {\n    \"id\": \"override-style\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 5\n    }\n  }), \"Override style\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 5\n    }\n  }, \"You can change the entire style of the text via props. For example, to change\\nthe font size, pass the \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 27\n    }\n  }, \"fontSize\"), \" prop. No need to write \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 107\n    }\n  }, \"css\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 162\n    }\n  }, \"styled()\"), \".\"), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 10\n    }\n  }), \"<Text fontSize=\\\"50px\\\" color=\\\"tomato\\\">\\n  I'm using a custom font-size value for this text\\n</Text>\\n\")), mdx(\"h3\", _objectSpread(_objectSpread({}, {\n    \"id\": \"override-the-element\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 5\n    }\n  }), \"Override the element\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 5\n    }\n  }, \"To override the element that gets rendered, pass the \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 65\n    }\n  }, \"as\"), \" prop. Use \", mdx(\"strong\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 126\n    }\n  }, \"Inspect\\nElement\"), \" to see the element that gets rendered in html.\"), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 10\n    }\n  }), \"<>\\n  <Text as=\\\"i\\\">Italic</Text>\\n  <br />\\n  <Text as=\\\"u\\\">Underline</Text>\\n  <br />\\n  <Text as=\\\"abbr\\\">I18N</Text>\\n  <br />\\n  <Text as=\\\"cite\\\">Citation</Text>\\n  <br />\\n  <Text as=\\\"del\\\">Deleted</Text>\\n  <br />\\n  <Text as=\\\"em\\\">Emphasis</Text>\\n  <br />\\n  <Text as=\\\"ins\\\">Inserted</Text>\\n  <br />\\n  <Text as=\\\"kbd\\\">Ctrl + C</Text>\\n  <br />\\n  <Text as=\\\"mark\\\">Highlighted</Text>\\n  <br />\\n  <Text as=\\\"s\\\">Strikethrough</Text>\\n  <br />\\n  <Text as=\\\"samp\\\">Sample</Text>\\n  <br />\\n  <Text as=\\\"sub\\\">sub</Text>\\n  <br />\\n  <Text as=\\\"sup\\\">sup</Text>\\n</>\\n\")), mdx(\"h2\", _objectSpread(_objectSpread({}, {\n    \"id\": \"props\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 5\n    }\n  }), \"Props\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 5\n    }\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 8\n    }\n  }, \"Text\"), \" composes the \", mdx(\"a\", _objectSpread(_objectSpread({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/docs/layout/box\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 74\n    }\n  }), \"Box\"), \" component, so you can pass all \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 57\n    }\n  }, \"Box\"), \"\\nstyle props.\"), mdx(PropsTable, {\n    of: \"Text\",\n    omit: null,\n    mdxType: \"PropsTable\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 5\n    }\n  }));\n}\n_c2 = MDXContent;\n;\nMDXContent.isMDXComponent = true;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"PropsTable\");\n$RefreshReg$(_c2, \"MDXContent\");","map":{"version":3,"sources":["/Users/sunfei/Downloads/website/pages/docs/typography/text.mdx"],"names":["React","mdx","Layout","ComponentLinks","frontMatter","title","description","slug","lastEdited","undefined","editUrl","author","tags","__resourcePath","__scans","layout","makeShortcode","name","MDXDefaultShortcode","props","console","warn","PropsTable","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":";;;;;;;;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,eAApB;AAEA;;AACA;;AACA,OAAOC,MAAP,MAAyB,+CAAzB;AACA,OAAOC,cAAP,MAA2B,yCAA3B;AACA,OAAO,IAAMC,WAAW,GAAG;AACzBC,EAAAA,KAAK,EAAE,MADkB;AAEzB,aAAS,mBAFgB;AAGzBC,EAAAA,WAAW,EAAE,qEAHY;AAIzBC,EAAAA,IAAI,EAAE,uBAJmB;AAKzBC,EAAAA,UAAU,EAAEC,SALa;AAMzBC,EAAAA,OAAO,EAAE,4FANgB;AAOzBC,EAAAA,MAAM,EAAEF,SAPiB;AAQzBG,EAAAA,IAAI,EAAEH,SARmB;AASzBI,EAAAA,cAAc,EAAE,0BATS;AAUzBC,EAAAA,OAAO,EAAE,EAVgB;AAWzBC,EAAAA,MAAM,EAAE;AAXiB,CAApB;;AAaP,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,IAAI;AAAA,SAAI,SAASC,mBAAT,CAA6BC,KAA7B,EAAoC;AAC5DC,IAAAA,OAAO,CAACC,IAAR,CAAa,eAAeJ,IAAf,GAAsB,yEAAnC;AACA,WAAO,2CAASE,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACD,GAHqB;AAAA,CAA1B;;AAIA,IAAMG,UAAU,GAAGN,aAAa,CAAC,YAAD,CAAhC;KAAMM,U;AACN,IAAMC,WAAW,GAAG;AAClBnB,EAAAA,WAAW,EAAXA;AADkB,CAApB;AAGA,IAAMoB,SAAS,GAAGtB,MAAlB;AACA,eAAe,SAASuB,UAAT,OAGZ;AAAA,MAFDC,UAEC,QAFDA,UAEC;AAAA,MADEP,KACF;;AACD,SAAO,IAAC,SAAD,gDAAeI,WAAf,GAAgCJ,KAAhC;AAAuC,IAAA,UAAU,EAAEO,UAAnD;AAA+D,IAAA,OAAO,EAAC,WAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAKL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAG;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAH,8FACW;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADX,qBALK,EAOL,IAAC,cAAD;AAAgB,IAAA,MAAM,EAAE;AACtB,iBAAS;AADa,KAAxB;AAEG,IAAA,GAAG,EAAE;AACN,iBAAS;AADH,KAFR;AAIG,IAAA,OAAO,EAAC,gBAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPK,EAYL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,CAZK,EAaL,0CAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAbK,EAgBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oDAAL,CAhBK,EAoBL,0CAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BApBK,EAuBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iEAA+D;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAA/D,WAvBK,EAwBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wqBAAL,CAxBK,EAuCL,0CAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAvCK,EA0CL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAgB;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAhB,sFACuB;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADvB,WA1CK,EA4CL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yMAAL,CA5CK,EAmDL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kGACO;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADP,iDAnDK,EAqDL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAG,IAAA,UAAU,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kDAA8D;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAA9D,mBADF,CArDK,EAwDL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa,cADe;AAE5B,kBAAc,YAFc;AAG5B,YAAQ;AAHoB,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uhBAAL,CAxDK,EA0EL,0CAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBA1EK,EA6EL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gHACsB;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADtB,8BACsG;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADtG,UAC6J;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAD7J,MA7EK,EA+EL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iHAAL,CA/EK,EAqFL,0CAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BArFK,EAwFL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8DAA4D;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAA5D,iBAAyH;AAAQ,IAAA,UAAU,EAAC,GAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAzH,oDAxFK,EA0FL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,ilBAAL,CA1FK,EAwHL,0CAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAxHK,EA2HL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAG;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAH,oBAAqE;AAAG,IAAA,UAAU,EAAC;AAAd,KAAsB;AACvF,YAAQ;AAD+E,GAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAArE,sCAEoD;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAFpD,mBA3HK,EA+HL,IAAC,UAAD;AAAY,IAAA,EAAE,EAAC,MAAf;AAAsB,IAAA,IAAI,EAAE,IAA5B;AAAkC,IAAA,OAAO,EAAC,YAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA/HK,CAAP;AAiID;MArIuBD,U;AAuIxB;AACAA,UAAU,CAACE,cAAX,GAA4B,IAA5B","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport Layout, {  } from '/Users/sunfei/Downloads/website/layouts/index'\nimport ComponentLinks from \"../../../src/components/component-links\"\nexport const frontMatter = {\n  title: 'Text',\n  package: '@chakra-ui/layout',\n  description: 'Text is the used to render text and paragraphs within an interface.',\n  slug: '/docs/typography/text',\n  lastEdited: undefined,\n  editUrl: 'https://github.com/chakra-ui/chakra-ui/edit/develop/website/pages/docs/typography/text.mdx',\n  author: undefined,\n  tags: undefined,\n  __resourcePath: 'docs/typography/text.mdx',\n  __scans: {},\n  layout: 'index'\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n      console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n      return <div {...props}/>\n    };\nconst PropsTable = makeShortcode(\"PropsTable\");\nconst layoutProps = {\n  frontMatter\n};\nconst MDXLayout = Layout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n    <p><inlineCode parentName=\"p\">{`Text`}</inlineCode>{` component is the used to render text and paragraphs within an interface.\nIt renders a `}<inlineCode parentName=\"p\">{`<p>`}</inlineCode>{` tag by default.`}</p>\n    <ComponentLinks github={{\n      package: \"layout\"\n    }} npm={{\n      package: \"@chakra-ui/layout\"\n    }} mdxType=\"ComponentLinks\" />\n    <p><carbon-ad></carbon-ad></p>\n    <h2 {...{\n      \"id\": \"import\"\n    }}>{`Import`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { Text } from \"@chakra-ui/react\"\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"changing-the-font-size\"\n    }}>{`Changing the font size`}</h2>\n    <p>{`To increase the font size of the text, you can pass the `}<inlineCode parentName=\"p\">{`fontSize`}</inlineCode>{` prop.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Stack spacing={3}>\n  <Text fontSize=\"6xl\">(6xl) In love with React & Next</Text>\n  <Text fontSize=\"5xl\">(5xl) In love with React & Next</Text>\n  <Text fontSize=\"4xl\">(4xl) In love with React & Next</Text>\n  <Text fontSize=\"3xl\">(3xl) In love with React & Next</Text>\n  <Text fontSize=\"2xl\">(2xl) In love with React & Next</Text>\n  <Text fontSize=\"xl\">(xl) In love with React & Next</Text>\n  <Text fontSize=\"lg\">(lg) In love with React & Next</Text>\n  <Text fontSize=\"md\">(md) In love with React & Next</Text>\n  <Text fontSize=\"sm\">(sm) In love with React & Next</Text>\n  <Text fontSize=\"xs\">(xs) In love with React & Next</Text>\n</Stack>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"truncate-text\"\n    }}>{`Truncate text`}</h3>\n    <p>{`Pass the `}<inlineCode parentName=\"p\">{`isTruncated`}</inlineCode>{` prop to render an ellipsis when the text exceeds the\nwidth of the viewport or `}<inlineCode parentName=\"p\">{`maxWidth`}</inlineCode>{` prop.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Text color=\"gray.500\" isTruncated>\n  Lorem ipsum is placeholder text commonly used in the graphic, print, and\n  publishing industries for previewing layouts and visual mockups.\n</Text>\n`}</code></pre>\n    <p>{`Likewise, if you'd like to truncate the text after a specific number of lines,\npass the `}<inlineCode parentName=\"p\">{`noOfLines`}</inlineCode>{` prop and set it to the desired no of lines.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Pro Tip 💡: You can also apply `}<inlineCode parentName=\"p\">{`noOfLines`}</inlineCode>{` responsively.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live=false\",\n        \"live\": \"false\"\n      }}>{`// Basic version\n<Text noOfLines={2}>\n  \"The quick brown fox jumps over the lazy dog\" is an English-language pangram—a\n  sentence that contains all of the letters of the English alphabet. Owing to\n  its existence, Chakra was created.\n</Text>\n\n// Responsive version\n<Text noOfLines={[1, 2, 3]}>\n   \"The quick brown fox jumps over the lazy dog\" is an English-language pangram—a\n  sentence that contains all of the letters of the English alphabet. Owing to\n  its existence, Chakra was created.\n</Text>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"override-style\"\n    }}>{`Override style`}</h3>\n    <p>{`You can change the entire style of the text via props. For example, to change\nthe font size, pass the `}<inlineCode parentName=\"p\">{`fontSize`}</inlineCode>{` prop. No need to write `}<inlineCode parentName=\"p\">{`css`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`styled()`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Text fontSize=\"50px\" color=\"tomato\">\n  I'm using a custom font-size value for this text\n</Text>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"override-the-element\"\n    }}>{`Override the element`}</h3>\n    <p>{`To override the element that gets rendered, pass the `}<inlineCode parentName=\"p\">{`as`}</inlineCode>{` prop. Use `}<strong parentName=\"p\">{`Inspect\nElement`}</strong>{` to see the element that gets rendered in html.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<>\n  <Text as=\"i\">Italic</Text>\n  <br />\n  <Text as=\"u\">Underline</Text>\n  <br />\n  <Text as=\"abbr\">I18N</Text>\n  <br />\n  <Text as=\"cite\">Citation</Text>\n  <br />\n  <Text as=\"del\">Deleted</Text>\n  <br />\n  <Text as=\"em\">Emphasis</Text>\n  <br />\n  <Text as=\"ins\">Inserted</Text>\n  <br />\n  <Text as=\"kbd\">Ctrl + C</Text>\n  <br />\n  <Text as=\"mark\">Highlighted</Text>\n  <br />\n  <Text as=\"s\">Strikethrough</Text>\n  <br />\n  <Text as=\"samp\">Sample</Text>\n  <br />\n  <Text as=\"sub\">sub</Text>\n  <br />\n  <Text as=\"sup\">sup</Text>\n</>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <p><inlineCode parentName=\"p\">{`Text`}</inlineCode>{` composes the `}<a parentName=\"p\" {...{\n        \"href\": \"/docs/layout/box\"\n      }}>{`Box`}</a>{` component, so you can pass all `}<inlineCode parentName=\"p\">{`Box`}</inlineCode>{`\nstyle props.`}</p>\n    <PropsTable of=\"Text\" omit={null} mdxType=\"PropsTable\" />\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"]},"metadata":{},"sourceType":"module"}