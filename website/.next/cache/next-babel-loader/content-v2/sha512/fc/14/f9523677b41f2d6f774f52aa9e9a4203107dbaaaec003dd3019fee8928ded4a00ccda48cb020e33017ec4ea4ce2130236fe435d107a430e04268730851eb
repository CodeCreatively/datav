{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport loadMDXFromPages from \"utils/load-mdx-dir\";\nexport async function getBlogPosts() {\n  const mdxData = await loadMDXFromPages(\"blog\");\n  return mdxData.map(blogPostData => {\n    var _blogPostData$author;\n\n    return _objectSpread(_objectSpread({}, blogPostData), {}, {\n      slug: blogPostData.slug.replace(/\\/index$/, \"\"),\n      // fix url\n      author: (_blogPostData$author = blogPostData.author) !== null && _blogPostData$author !== void 0 ? _blogPostData$author : null,\n      // `undefined` cannot be serialized as JSON\n      date: new Date(blogPostData.date).toISOString(),\n      tags: Array.isArray(blogPostData.tags) ? blogPostData.tags : []\n    });\n  }).sort(byDateDesc);\n}\n\nfunction byDateDesc(a, b) {\n  const bTime = new Date(b.date).getTime();\n  const aTime = new Date(a.date).getTime();\n  return bTime - aTime;\n}","map":{"version":3,"sources":["/Users/sunfei/Downloads/website/src/utils/get-blog-posts.ts"],"names":["loadMDXFromPages","getBlogPosts","mdxData","map","blogPostData","slug","replace","author","date","Date","toISOString","tags","Array","isArray","sort","byDateDesc","a","b","bTime","getTime","aTime"],"mappings":";;;;;;AAAA,OAAOA,gBAAP,MAA6B,oBAA7B;AAWA,OAAO,eAAeC,YAAf,GAA8B;AACnC,QAAMC,OAAO,GAAG,MAAMF,gBAAgB,CAAC,MAAD,CAAtC;AACA,SAAOE,OAAO,CACXC,GADI,CACCC,YAAD;AAAA;;AAAA,2CACAA,YADA;AAEHC,MAAAA,IAAI,EAAED,YAAY,CAACC,IAAb,CAAkBC,OAAlB,CAA0B,UAA1B,EAAsC,EAAtC,CAFH;AAE8C;AACjDC,MAAAA,MAAM,0BAAEH,YAAY,CAACG,MAAf,uEAAyB,IAH5B;AAGkC;AACrCC,MAAAA,IAAI,EAAE,IAAIC,IAAJ,CAASL,YAAY,CAACI,IAAtB,EAA4BE,WAA5B,EAJH;AAKHC,MAAAA,IAAI,EAAEC,KAAK,CAACC,OAAN,CAAcT,YAAY,CAACO,IAA3B,IAAmCP,YAAY,CAACO,IAAhD,GAAuD;AAL1D;AAAA,GADA,EAQJG,IARI,CAQCC,UARD,CAAP;AASD;;AAED,SAASA,UAAT,CAAoBC,CAApB,EAAiCC,CAAjC,EAA8C;AAC5C,QAAMC,KAAK,GAAG,IAAIT,IAAJ,CAASQ,CAAC,CAACT,IAAX,EAAiBW,OAAjB,EAAd;AACA,QAAMC,KAAK,GAAG,IAAIX,IAAJ,CAASO,CAAC,CAACR,IAAX,EAAiBW,OAAjB,EAAd;AAEA,SAAOD,KAAK,GAAGE,KAAf;AACD","sourcesContent":["import loadMDXFromPages from \"utils/load-mdx-dir\"\n\nexport type BlogPost = {\n  slug: string\n  title: string\n  date: string\n  excerpt: string\n  tags: string[]\n  readTimeMinutes: number\n}\n\nexport async function getBlogPosts() {\n  const mdxData = await loadMDXFromPages(\"blog\")\n  return mdxData\n    .map((blogPostData) => ({\n      ...blogPostData,\n      slug: blogPostData.slug.replace(/\\/index$/, \"\"), // fix url\n      author: blogPostData.author ?? null, // `undefined` cannot be serialized as JSON\n      date: new Date(blogPostData.date).toISOString(),\n      tags: Array.isArray(blogPostData.tags) ? blogPostData.tags : [],\n    }))\n    .sort(byDateDesc)\n}\n\nfunction byDateDesc(a: BlogPost, b: BlogPost) {\n  const bTime = new Date(b.date).getTime()\n  const aTime = new Date(a.date).getTime()\n\n  return bTime - aTime\n}\n"]},"metadata":{},"sourceType":"module"}