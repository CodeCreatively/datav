{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/sunfei/Downloads/website/src/components/codeblock/highlight.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { chakra } from \"@chakra-ui/react\";\nimport BaseHighlight, { defaultProps } from \"prism-react-renderer\";\nimport theme from \"prism-react-renderer/themes/nightOwl\";\nimport React from \"react\";\nimport { liveEditorStyle } from \"./codeblock\";\nconst RE = /{([\\d,-]+)}/;\n\nconst calculateLinesToHighlight = meta => {\n  if (!RE.test(meta)) {\n    return () => false;\n  }\n\n  const lineNumbers = RE.exec(meta)[1].split(`,`).map(v => v.split(`-`).map(x => parseInt(x, 10)));\n  return index => {\n    const lineNumber = index + 1;\n    const inRange = lineNumbers.some(([start, end]) => end ? lineNumber >= start && lineNumber <= end : lineNumber === start);\n    return inRange;\n  };\n};\n\nfunction Highlight(_ref) {\n  let {\n    codeString,\n    language,\n    metastring,\n    showLines\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"codeString\", \"language\", \"metastring\", \"showLines\"]);\n\n  const shouldHighlightLine = calculateLinesToHighlight(metastring);\n  return /*#__PURE__*/_jsxDEV(BaseHighlight, _objectSpread(_objectSpread(_objectSpread({}, defaultProps), {}, {\n    code: codeString,\n    language: language,\n    theme: theme\n  }, props), {}, {\n    children: ({\n      className,\n      style,\n      tokens,\n      getLineProps,\n      getTokenProps\n    }) => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: liveEditorStyle,\n      \"data-language\": language,\n      children: /*#__PURE__*/_jsxDEV(\"pre\", {\n        className: className,\n        style: style,\n        children: tokens.map((line, i) => {\n          const lineProps = getLineProps({\n            line,\n            key: i\n          });\n          return /*#__PURE__*/_jsxDEV(chakra.div, _objectSpread(_objectSpread({\n            px: \"5\",\n            bg: shouldHighlightLine(i) ? \"whiteAlpha.200\" : undefined\n          }, lineProps), {}, {\n            children: [showLines && /*#__PURE__*/_jsxDEV(chakra.span, {\n              opacity: 0.3,\n              mr: \"6\",\n              fontSize: \"xs\",\n              children: i + 1\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 21\n            }, this), line.map((token, key) => /*#__PURE__*/_jsxDEV(\"span\", _objectSpread({}, getTokenProps({\n              token,\n              key\n            })), void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 21\n            }, this))]\n          }), void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this)\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n\nexport default Highlight;","map":{"version":3,"sources":["/Users/sunfei/Downloads/website/src/components/codeblock/highlight.tsx"],"names":["chakra","BaseHighlight","defaultProps","theme","React","liveEditorStyle","RE","calculateLinesToHighlight","meta","test","lineNumbers","exec","split","map","v","x","parseInt","index","lineNumber","inRange","some","start","end","Highlight","codeString","language","metastring","showLines","props","shouldHighlightLine","className","style","tokens","getLineProps","getTokenProps","line","i","lineProps","key","undefined","token"],"mappings":"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","sourcesContent":["import { chakra } from \"@chakra-ui/react\"\nimport BaseHighlight, { defaultProps, Language } from \"prism-react-renderer\"\nimport theme from \"prism-react-renderer/themes/nightOwl\"\nimport React from \"react\"\nimport { liveEditorStyle } from \"./codeblock\"\n\nconst RE = /{([\\d,-]+)}/\n\nconst calculateLinesToHighlight = (meta: string) => {\n  if (!RE.test(meta)) {\n    return () => false\n  }\n  const lineNumbers = RE.exec(meta)[1]\n    .split(`,`)\n    .map((v) => v.split(`-`).map((x) => parseInt(x, 10)))\n\n  return (index: number) => {\n    const lineNumber = index + 1\n    const inRange = lineNumbers.some(([start, end]) =>\n      end ? lineNumber >= start && lineNumber <= end : lineNumber === start,\n    )\n    return inRange\n  }\n}\n\ninterface HighlightProps {\n  codeString: string\n  language: Language\n  metastring?: string\n  showLines?: boolean\n}\n\nfunction Highlight({\n  codeString,\n  language,\n  metastring,\n  showLines,\n  ...props\n}: HighlightProps) {\n  const shouldHighlightLine = calculateLinesToHighlight(metastring)\n\n  return (\n    <BaseHighlight\n      {...defaultProps}\n      code={codeString}\n      language={language}\n      theme={theme}\n      {...props}\n    >\n      {({ className, style, tokens, getLineProps, getTokenProps }) => (\n        <div style={liveEditorStyle} data-language={language}>\n          <pre className={className} style={style}>\n            {tokens.map((line, i) => {\n              const lineProps = getLineProps({ line, key: i })\n              return (\n                <chakra.div\n                  px=\"5\"\n                  bg={shouldHighlightLine(i) ? \"whiteAlpha.200\" : undefined}\n                  {...lineProps}\n                >\n                  {showLines && (\n                    <chakra.span opacity={0.3} mr=\"6\" fontSize=\"xs\">\n                      {i + 1}\n                    </chakra.span>\n                  )}\n                  {line.map((token, key) => (\n                    <span {...getTokenProps({ token, key })} />\n                  ))}\n                </chakra.div>\n              )\n            })}\n          </pre>\n        </div>\n      )}\n    </BaseHighlight>\n  )\n}\n\nexport default Highlight\n"]},"metadata":{},"sourceType":"module"}