{"ast":null,"code":"var _jsxFileName = \"/Users/sunfei/Downloads/website/pages/docs/principles.mdx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport Layout from '/Users/sunfei/Downloads/website/layouts/index';\nexport const frontMatter = {\n  title: 'Design Principles',\n  description: 'Principles that keeps Chakra\\'s components fairly consistent',\n  slug: '/docs/principles',\n  lastEdited: undefined,\n  editUrl: 'https://github.com/chakra-ui/chakra-ui/edit/develop/website/pages/docs/principles.mdx',\n  author: undefined,\n  tags: undefined,\n  __resourcePath: 'docs/principles.mdx',\n  __scans: {},\n  layout: 'index'\n};\nconst layoutProps = {\n  frontMatter\n};\nconst MDXLayout = Layout;\nexport default function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _objectSpread(_objectSpread(_objectSpread({}, layoutProps), props), {}, {\n    components: components,\n    mdxType: \"MDXLayout\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 10\n    }\n  }), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, `Chakra UI is established on principles that keep its components fairly\nconsistent. Understanding these concepts will help you better contribute to\nChakra UI.`), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }, `Our goal is to design simple, composable components that cater to real-life UI\ndesign problems. In order to do that, we developed a set of principles that help\nus always be on that path.`), mdx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }, mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }, mdx(\"p\", {\n    parentName: \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, mdx(\"strong\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 28\n    }\n  }, `Style Props:`), ` All component styles can be overriden or extended via style\nprops to reduce the use of `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 30\n    }\n  }, `css`), ` prop or `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 90\n    }\n  }, `styled()`), `. Compose new components\nfrom `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 8\n    }\n  }, `Box`), `.`)), mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }, mdx(\"p\", {\n    parentName: \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, mdx(\"strong\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 28\n    }\n  }, `Simplicity:`), ` Strive to keep the component API fairly simple and show real\nworld scenarios of using the component.`)), mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, mdx(\"p\", {\n    parentName: \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, mdx(\"strong\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 28\n    }\n  }, `Composition:`), ` Break down components into smaller parts with minimal props\nto keep complexity low, and compose them together. This will ensure that the\nstyles and functionality are flexible and extensible.`)), mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, mdx(\"p\", {\n    parentName: \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, mdx(\"strong\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 28\n    }\n  }, `Accessibility:`), ` When creating a component, keep accessibility top of mind.\nThis includes keyboard navigation, focus management, color contrast, voice\nover, and the correct `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 25\n    }\n  }, `aria-*`), ` attributes.`)), mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, mdx(\"p\", {\n    parentName: \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, mdx(\"strong\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 28\n    }\n  }, `Dark Mode:`), ` Make components dark mode compatible. Use our\n`, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 3\n    }\n  }, `ColorModeProvider`), ` component and `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 83\n    }\n  }, `useColorMode`), ` hook to handle styling.\n`, mdx(\"a\", _objectSpread(_objectSpread({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/docs/features/color-mode\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 3\n    }\n  }), `Learn more about dark mode`), `.`)), mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }, mdx(\"p\", {\n    parentName: \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, mdx(\"strong\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 28\n    }\n  }, `Naming Props:`), ` We all know naming is the hardest thing in this industry.\nGenerally, ensure a prop name is indicative of what it does. Boolean props\nshould be named using auxiliary verbs such as `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 49\n    }\n  }, `does`), `, `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 103\n    }\n  }, `has`), `, `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 156\n    }\n  }, `is`), ` and\n`, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 3\n    }\n  }, `should`), `. For example, `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 72\n    }\n  }, `Button`), ` uses `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 132\n    }\n  }, `isDisabled`), `, `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 192\n    }\n  }, `isLoading`), `, etc.`))));\n}\n;\nMDXContent.isMDXComponent = true;","map":{"version":3,"sources":["/Users/sunfei/Downloads/website/pages/docs/principles.mdx"],"names":["React","mdx","Layout","frontMatter","title","description","slug","lastEdited","undefined","editUrl","author","tags","__resourcePath","__scans","layout","layoutProps","MDXLayout","MDXContent","components","props","isMDXComponent"],"mappings":"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","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport Layout, {  } from '/Users/sunfei/Downloads/website/layouts/index'\nexport const frontMatter = {\n  title: 'Design Principles',\n  description: 'Principles that keeps Chakra\\'s components fairly consistent',\n  slug: '/docs/principles',\n  lastEdited: undefined,\n  editUrl: 'https://github.com/chakra-ui/chakra-ui/edit/develop/website/pages/docs/principles.mdx',\n  author: undefined,\n  tags: undefined,\n  __resourcePath: 'docs/principles.mdx',\n  __scans: {},\n  layout: 'index'\n};\n\nconst layoutProps = {\n  frontMatter\n};\nconst MDXLayout = Layout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <p>{`Chakra UI is established on principles that keep its components fairly\nconsistent. Understanding these concepts will help you better contribute to\nChakra UI.`}</p>\n    <p>{`Our goal is to design simple, composable components that cater to real-life UI\ndesign problems. In order to do that, we developed a set of principles that help\nus always be on that path.`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Style Props:`}</strong>{` All component styles can be overriden or extended via style\nprops to reduce the use of `}<inlineCode parentName=\"p\">{`css`}</inlineCode>{` prop or `}<inlineCode parentName=\"p\">{`styled()`}</inlineCode>{`. Compose new components\nfrom `}<inlineCode parentName=\"p\">{`Box`}</inlineCode>{`.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Simplicity:`}</strong>{` Strive to keep the component API fairly simple and show real\nworld scenarios of using the component.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Composition:`}</strong>{` Break down components into smaller parts with minimal props\nto keep complexity low, and compose them together. This will ensure that the\nstyles and functionality are flexible and extensible.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Accessibility:`}</strong>{` When creating a component, keep accessibility top of mind.\nThis includes keyboard navigation, focus management, color contrast, voice\nover, and the correct `}<inlineCode parentName=\"p\">{`aria-*`}</inlineCode>{` attributes.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Dark Mode:`}</strong>{` Make components dark mode compatible. Use our\n`}<inlineCode parentName=\"p\">{`ColorModeProvider`}</inlineCode>{` component and `}<inlineCode parentName=\"p\">{`useColorMode`}</inlineCode>{` hook to handle styling.\n`}<a parentName=\"p\" {...{\n            \"href\": \"/docs/features/color-mode\"\n          }}>{`Learn more about dark mode`}</a>{`.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Naming Props:`}</strong>{` We all know naming is the hardest thing in this industry.\nGenerally, ensure a prop name is indicative of what it does. Boolean props\nshould be named using auxiliary verbs such as `}<inlineCode parentName=\"p\">{`does`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`has`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`is`}</inlineCode>{` and\n`}<inlineCode parentName=\"p\">{`should`}</inlineCode>{`. For example, `}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{` uses `}<inlineCode parentName=\"p\">{`isDisabled`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`isLoading`}</inlineCode>{`, etc.`}</p>\n      </li>\n    </ul>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"]},"metadata":{},"sourceType":"module"}