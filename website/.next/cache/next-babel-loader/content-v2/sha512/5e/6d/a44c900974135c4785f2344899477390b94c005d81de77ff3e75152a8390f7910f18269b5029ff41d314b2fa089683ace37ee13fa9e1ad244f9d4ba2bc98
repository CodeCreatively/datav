{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/sunfei/Downloads/website/pages/docs/theming/component-style.mdx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport Layout from '/Users/sunfei/Downloads/website/layouts/index';\nexport var frontMatter = {\n  title: 'Component Style',\n  description: 'How to create and theme custom components.',\n  slug: '/docs/theming/component-style',\n  lastEdited: undefined,\n  editUrl: 'https://github.com/chakra-ui/chakra-ui/edit/develop/website/pages/docs/theming/component-style.mdx',\n  author: undefined,\n  tags: undefined,\n  __resourcePath: 'docs/theming/component-style.mdx',\n  __scans: {},\n  layout: 'index'\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", _objectSpread(_objectSpread({}, props), {}, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 14\n      }\n    }));\n  };\n};\n\nvar Img = makeShortcode(\"Img\");\n_c = Img;\nvar layoutProps = {\n  frontMatter: frontMatter\n};\nvar MDXLayout = Layout;\nexport default function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _objectSpread(_objectSpread(_objectSpread({}, layoutProps), props), {}, {\n    components: components,\n    mdxType: \"MDXLayout\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 10\n    }\n  }), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, \"Writing component styles in a way that is easy to maintain over the life of a\\ngrowing and changing project is a challenging task.\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }, \"To solve this, we came up with the idea of style configuration or \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 78\n    }\n  }, \"styleConfig\"), \".\\nThis is a consistent theming API that makes component styling easy to understand\\nand maintain.\"), mdx(\"h2\", _objectSpread(_objectSpread({}, {\n    \"id\": \"base-styles-and-modifier-styles\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }), \"Base styles and Modifier styles\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, \"Most component style consists of \", mdx(\"strong\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 45\n    }\n  }, \"base or default styles\"), \" and \", mdx(\"strong\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 112\n    }\n  }, \"modifier\\nstyles\"), \" that alter its size or visual style based on some properties or state.\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, \"Common modifier styles includes:\"), mdx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, mdx(\"strong\", {\n    parentName: \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 27\n    }\n  }, \"Size:\"), \" A component can have different sizes (e.g. small, medium, large)\"), mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }, mdx(\"strong\", {\n    parentName: \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 27\n    }\n  }, \"Variant:\"), \" A component can have different visual styles (e.g. outline,\\nsolid, ghost)\"), mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, mdx(\"strong\", {\n    parentName: \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 27\n    }\n  }, \"Color scheme:\"), \" For a given variant, a component can have different color\\nschemes (e.g. an outline button with a red color scheme)\"), mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, mdx(\"strong\", {\n    parentName: \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 27\n    }\n  }, \"Color mode:\"), \" A component can change its visual styles based on color mode\\n(e.g. light or dark).\")), mdx(\"h3\", _objectSpread(_objectSpread({}, {\n    \"id\": \"single-part-and-multipart-components\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }), \"Single part and multipart components\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, \"Most components we build today are either single part components (e.g. Button,\\nBadge) or multipart components (e.g. Tabs, Menu, Modal).\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, mdx(\"strong\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 8\n    }\n  }, \"A single part component\"), \" is a component that returns a single element. For\\nexample, the \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 16\n    }\n  }, \"<Button>\"), \" component renders a \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 93\n    }\n  }, \"<button>\"), \" HTML element:\"), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 10\n    }\n  }), \"// This component renders only one element (<button>)\\n<Button>My button</Button>\\n\")), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }\n  }, mdx(\"strong\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 8\n    }\n  }, \"A multipart component\"), \" is a component that has multiple parts, and require\\nthese parts to work correctly. This is commonly referred to as a composite\\ncomponent.\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  }, \"For example, a \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 27\n    }\n  }, \"Tabs\"), \" component consists of \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 102\n    }\n  }, \"TabList\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 159\n    }\n  }, \"Tab\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 212\n    }\n  }, \"TabPanels\"), \", and\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 3\n    }\n  }, \"TabPanel\"), \". Styling this component as a whole might require styling each\\ncomponent part.\"), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 10\n    }\n  }), \"<Tabs>\\n  <TabList>\\n    <Tab>Tab 1</Tab>\\n    <Tab>Tab 2</Tab>\\n  </TabList>\\n  <TabPanels>\\n    <TabPanel>Tab 1</TabPanel>\\n    <TabPanel>Tab 2</TabPanel>\\n  </TabPanels>\\n</Tabs>\\n\")), mdx(\"h2\", _objectSpread(_objectSpread({}, {\n    \"id\": \"styling-single-part-components\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 5\n    }\n  }), \"Styling single part components\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 5\n    }\n  }, \"The basic API for styling a single part component is:\"), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 10\n    }\n  }), \"export default {\\n  // Styles for the base style\\n  baseStyle: {},\\n  // Styles for the size variations\\n  sizes: {},\\n  // Styles for the visual style variations\\n  variants: {},\\n  // The default `size` or `variant` values\\n  defaultProps: {},\\n}\\n\")), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 5\n    }\n  }, \"Let's say we want to create a custom button component following the design spec\\nbelow.\"), mdx(Img, {\n    mt: \"10\",\n    mb: \"12\",\n    height: \"180px\",\n    src: \"/button-spec.png\",\n    mdxType: \"Img\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 5\n    }\n  }), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 5\n    }\n  }, \"Here's a contrived implementation of the design:\"), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 10\n    }\n  }), \"const Button = {\\n  // The styles all button have in common\\n  baseStyle: {\\n    fontWeight: \\\"bold\\\",\\n    textTransform: \\\"uppercase\\\",\\n  },\\n  // Two sizes: sm and md\\n  sizes: {\\n    sm: {\\n      fontSize: \\\"12px\\\",\\n      padding: \\\"16px\\\",\\n    },\\n    md: {\\n      fontSize: \\\"16px\\\",\\n      padding: \\\"24px\\\",\\n    },\\n  },\\n  // Two variants: outline and solid\\n  variants: {\\n    outline: {\\n      border: \\\"2px solid\\\",\\n      borderColor: \\\"green.500\\\",\\n    },\\n    solid: {\\n      bg: \\\"green.500\\\",\\n      color: \\\"white\\\",\\n    },\\n  },\\n  // The default size and variant values\\n  defaultProps: {\\n    size: \\\"md\\\",\\n    variant: \\\"outline\\\",\\n  },\\n}\\n\")), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 5\n    }\n  }, \"Make sense? Next, we'll update the theme to include this new component style.\"), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 10\n    }\n  }), \"import { extendTheme } from \\\"@chakra-ui/react\\\"\\n\\nconst theme = extendTheme({\\n  components: {\\n    Button,\\n  },\\n})\\n\")), mdx(\"h3\", _objectSpread(_objectSpread({}, {\n    \"id\": \"consuming-style-config\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 5\n    }\n  }), \"Consuming style config\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 5\n    }\n  }, \"Now that the button's style configuration is hooked into the theme, we can\\nconsume within any component using \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 38\n    }\n  }, \"useStyleConfig\"), \" hook.\"), mdx(\"h3\", _objectSpread(_objectSpread({}, {\n    \"id\": \"usestyleconfig-api\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 5\n    }\n  }), \"useStyleConfig API\"), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 10\n    }\n  }), \"const styles = useStyleConfig(themeKey, props)\\n\")), mdx(\"h4\", _objectSpread(_objectSpread({}, {\n    \"id\": \"parameters\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 5\n    }\n  }), \"Parameters\"), mdx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 5\n    }\n  }, mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 27\n    }\n  }, \"themeKey\"), \": the key in \", mdx(\"inlineCode\", {\n    parentName: \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 97\n    }\n  }, \"theme.components\"), \" that points to the desired\\nstyleConfig.\"), mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 27\n    }\n  }, \"props\"), \": the options object used to compute the component styles. It typically\\nconsists of the \", mdx(\"inlineCode\", {\n    parentName: \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 19\n    }\n  }, \"size\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 74\n    }\n  }, \"variant\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 136\n    }\n  }, \"colorScheme\"))), mdx(\"h4\", _objectSpread(_objectSpread({}, {\n    \"id\": \"return-value\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 5\n    }\n  }), \"Return Value\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 5\n    }\n  }, \"The computed styles for the component based on \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 59\n    }\n  }, \"props\"), \" passed. If no \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 127\n    }\n  }, \"props\"), \" is\\npassed, the \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 15\n    }\n  }, \"defaultProps\"), \" defined in the style config will be used.\"), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 10\n    }\n  }), \"// 1. Import useStyleConfig\\nimport { useStyleConfig } from \\\"@chakra-ui/react\\\"\\n\\nfunction Button(props) {\\n  const { size, variant, ...rest } = props\\n\\n  // 2. Reference `Button` stored in `theme.components`\\n  const styles = useStyleConfig(\\\"Button\\\", { size, variant })\\n\\n  // 3. Pass the computed styles into the `sx` prop\\n  return <Box as=\\\"button\\\" sx={styles} {...rest} />\\n}\\n\")), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 5\n    }\n  }, \"And lastly - the fun part - let's use our custom button component anywhere in\\nour app:\"), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 10\n    }\n  }), \"// 1. Using the default props defined in style config\\nfunction Usage() {\\n  return <Button>Click me</Button>\\n}\\n\\n// 2. Overriding the default\\nfunction Usage() {\\n  return (\\n    <Button size=\\\"sm\\\" variant=\\\"solid\\\">\\n      Click me\\n    </Button>\\n  )\\n}\\n\")), mdx(\"h2\", _objectSpread(_objectSpread({}, {\n    \"id\": \"styling-multipart-components\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 5\n    }\n  }), \"Styling multipart components\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 5\n    }\n  }, \"This is very similar to styling single part components with a few differences\\nyou need to be aware of.\"), mdx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 5\n    }\n  }, mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 7\n    }\n  }, \"Given that multipart refers to a component with multiple parts, you'll need to\\ndefine the parts in a \", mdx(\"inlineCode\", {\n    parentName: \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 25\n    }\n  }, \"part\"), \" key in the style config.\"), mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 7\n    }\n  }, \"You'll need to provide styles for each \", mdx(\"inlineCode\", {\n    parentName: \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 70\n    }\n  }, \"part\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 125\n    }\n  }, \"baseStyle\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 185\n    }\n  }, \"sizes\"), \", and\\n\", mdx(\"inlineCode\", {\n    parentName: \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 3\n    }\n  }, \"variants\"), \".\")), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 5\n    }\n  }, \"Here's what the style config for multipart components looks like:\"), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 10\n    }\n  }), \"export default {\\n  // The parts of the component\\n  parts: [],\\n  // The base styles for each part\\n  baseStyle: {},\\n  // The size styles for each part\\n  sizes: {},\\n  // The variant styles for each part\\n  variants: {},\\n  // The default `size` or `variant` values\\n  defaultProps: {},\\n}\\n\")), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 5\n    }\n  }, \"For example, here's what the style configurations for a custom menu component\\nlooks like:\"), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 10\n    }\n  }), \"const Menu = {\\n  parts: [\\\"menu\\\", \\\"item\\\"],\\n  baseStyle: {\\n    menu: {\\n      boxShadow: \\\"lg\\\",\\n      rounded: \\\"lg\\\",\\n      flexDirection: \\\"column\\\",\\n      py: \\\"2\\\",\\n    },\\n    item: {\\n      fontWeight: \\\"medium\\\",\\n      lineHeight: \\\"normal\\\",\\n      color: \\\"gray.600\\\",\\n    },\\n  },\\n  sizes: {\\n    sm: {\\n      item: {\\n        fontSize: \\\"0.75rem\\\",\\n        px: 2,\\n        py: 1,\\n      },\\n    },\\n    md: {\\n      item: {\\n        fontSize: \\\"0.875rem\\\",\\n        px: 3,\\n        py: 2,\\n      },\\n    },\\n  },\\n  defaultProps: {\\n    size: \\\"md\\\",\\n  },\\n}\\n\")), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 5\n    }\n  }, \"Next, we'll update the theme object to included this new component style.\"), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 10\n    }\n  }), \"import { extendTheme } from \\\"@chakra-ui/react\\\"\\n\\nconst theme = extendTheme({\\n  components: {\\n    Menu,\\n  },\\n})\\n\")), mdx(\"h3\", _objectSpread(_objectSpread({}, {\n    \"id\": \"consuming-multipart-style-config\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 5\n    }\n  }), \"Consuming multipart style config\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 5\n    }\n  }, \"Now that the style config is hooked into the theme, we can consume within any\\ncomponent using \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 19\n    }\n  }, \"useMultiStyleConfig\"), \" hook.\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 5\n    }\n  }, \"We can also mount the computed styles on a specialized context provider called\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 3\n    }\n  }, \"StylesProvider\"), \". These styles will now be available to other sub-components. To\\nread from the context, use the \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 34\n    }\n  }, \"useStyles\"), \" hook.\"), mdx(\"h3\", _objectSpread(_objectSpread({}, {\n    \"id\": \"usemultistyleconfig-api\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 5\n    }\n  }), \"useMultiStyleConfig API\"), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 10\n    }\n  }), \"const styles = useMultiStyleConfig(themeKey, props)\\n\")), mdx(\"h4\", _objectSpread(_objectSpread({}, {\n    \"id\": \"parameters-1\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 5\n    }\n  }), \"Parameters\"), mdx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 5\n    }\n  }, mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 7\n    }\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 27\n    }\n  }, \"themeKey\"), \": the key in \", mdx(\"inlineCode\", {\n    parentName: \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 97\n    }\n  }, \"theme.components\"), \" that points to the desired\\nstyleConfig.\"), mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 7\n    }\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 27\n    }\n  }, \"props\"), \": an option of the options for computing the final styles. It typically\\nconsists of the \", mdx(\"inlineCode\", {\n    parentName: \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 19\n    }\n  }, \"size\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 74\n    }\n  }, \"variant\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 136\n    }\n  }, \"colorScheme\"), \".\")), mdx(\"h4\", _objectSpread(_objectSpread({}, {\n    \"id\": \"return-values\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 5\n    }\n  }), \"Return Values\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 5\n    }\n  }, \"The computed styles for each component part based on \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 65\n    }\n  }, \"size\"), \", or \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 122\n    }\n  }, \"variant\"), \". If\\nnone of these were passed, the \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 34\n    }\n  }, \"defaultProps\"), \" defined in the styleConfig will be\\nused.\"), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 10\n    }\n  }), \"// 1. Import the components and hook\\nimport {\\n  StylesProvider,\\n  useMultiStyleConfig,\\n  useStyles,\\n} from \\\"@chakra-ui/react\\\"\\n\\nfunction Menu(props) {\\n  const { size, variant, children, ...rest } = props\\n\\n  // 2. Consume the `useMultiStyleConfig` hook\\n  const styles = useMultiStyleConfig(\\\"Menu\\\", { size, variant })\\n\\n  return (\\n    <Flex sx={styles.menu} {...rest}>\\n      {/* 3. Mount the computed styles on `StylesProvider` */}\\n      <StylesProvider value={styles}>{children}</StylesProvider>\\n    </Flex>\\n  )\\n}\\n\\nfunction MenuItem(props) {\\n  // 4. Read computed `item` styles from styles provider\\n  const styles = useStyles()\\n  return <Box as=\\\"button\\\" sx={styles.item} {...props} />\\n}\\n\")), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 5\n    }\n  }, \"That's it! We can use our newly created multipart component in our application:\"), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 10\n    }\n  }), \"// 1. Using the default props defined in style config\\nfunction Usage() {\\n  return (\\n    <Menu>\\n      <MenuItem>Awesome</MenuItem>\\n      <MenuItem>Sauce</MenuItem>\\n    </Menu>\\n  )\\n}\\n\\n// 2. Overriding the default\\nfunction Usage() {\\n  return (\\n    <Menu size=\\\"sm\\\">\\n      <MenuItem>Awesome</MenuItem>\\n      <MenuItem>Sauce</MenuItem>\\n    </Menu>\\n  )\\n}\\n\")));\n}\n_c2 = MDXContent;\n;\nMDXContent.isMDXComponent = true;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Img\");\n$RefreshReg$(_c2, \"MDXContent\");","map":{"version":3,"sources":["/Users/sunfei/Downloads/website/pages/docs/theming/component-style.mdx"],"names":["React","mdx","Layout","frontMatter","title","description","slug","lastEdited","undefined","editUrl","author","tags","__resourcePath","__scans","layout","makeShortcode","name","MDXDefaultShortcode","props","console","warn","Img","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport Layout, {  } from '/Users/sunfei/Downloads/website/layouts/index'\nexport const frontMatter = {\n  title: 'Component Style',\n  description: 'How to create and theme custom components.',\n  slug: '/docs/theming/component-style',\n  lastEdited: undefined,\n  editUrl: 'https://github.com/chakra-ui/chakra-ui/edit/develop/website/pages/docs/theming/component-style.mdx',\n  author: undefined,\n  tags: undefined,\n  __resourcePath: 'docs/theming/component-style.mdx',\n  __scans: {},\n  layout: 'index'\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n      console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n      return <div {...props}/>\n    };\nconst Img = makeShortcode(\"Img\");\nconst layoutProps = {\n  frontMatter\n};\nconst MDXLayout = Layout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <p>{`Writing component styles in a way that is easy to maintain over the life of a\ngrowing and changing project is a challenging task.`}</p>\n    <p>{`To solve this, we came up with the idea of style configuration or `}<inlineCode parentName=\"p\">{`styleConfig`}</inlineCode>{`.\nThis is a consistent theming API that makes component styling easy to understand\nand maintain.`}</p>\n    <h2 {...{\n      \"id\": \"base-styles-and-modifier-styles\"\n    }}>{`Base styles and Modifier styles`}</h2>\n    <p>{`Most component style consists of `}<strong parentName=\"p\">{`base or default styles`}</strong>{` and `}<strong parentName=\"p\">{`modifier\nstyles`}</strong>{` that alter its size or visual style based on some properties or state.`}</p>\n    <p>{`Common modifier styles includes:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Size:`}</strong>{` A component can have different sizes (e.g. small, medium, large)`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Variant:`}</strong>{` A component can have different visual styles (e.g. outline,\nsolid, ghost)`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Color scheme:`}</strong>{` For a given variant, a component can have different color\nschemes (e.g. an outline button with a red color scheme)`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Color mode:`}</strong>{` A component can change its visual styles based on color mode\n(e.g. light or dark).`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"single-part-and-multipart-components\"\n    }}>{`Single part and multipart components`}</h3>\n    <p>{`Most components we build today are either single part components (e.g. Button,\nBadge) or multipart components (e.g. Tabs, Menu, Modal).`}</p>\n    <p><strong parentName=\"p\">{`A single part component`}</strong>{` is a component that returns a single element. For\nexample, the `}<inlineCode parentName=\"p\">{`<Button>`}</inlineCode>{` component renders a `}<inlineCode parentName=\"p\">{`<button>`}</inlineCode>{` HTML element:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live=false\",\n        \"live\": \"false\"\n      }}>{`// This component renders only one element (<button>)\n<Button>My button</Button>\n`}</code></pre>\n    <p><strong parentName=\"p\">{`A multipart component`}</strong>{` is a component that has multiple parts, and require\nthese parts to work correctly. This is commonly referred to as a composite\ncomponent.`}</p>\n    <p>{`For example, a `}<inlineCode parentName=\"p\">{`Tabs`}</inlineCode>{` component consists of `}<inlineCode parentName=\"p\">{`TabList`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`Tab`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`TabPanels`}</inlineCode>{`, and\n`}<inlineCode parentName=\"p\">{`TabPanel`}</inlineCode>{`. Styling this component as a whole might require styling each\ncomponent part.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live=false\",\n        \"live\": \"false\"\n      }}>{`<Tabs>\n  <TabList>\n    <Tab>Tab 1</Tab>\n    <Tab>Tab 2</Tab>\n  </TabList>\n  <TabPanels>\n    <TabPanel>Tab 1</TabPanel>\n    <TabPanel>Tab 2</TabPanel>\n  </TabPanels>\n</Tabs>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"styling-single-part-components\"\n    }}>{`Styling single part components`}</h2>\n    <p>{`The basic API for styling a single part component is:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live=false\",\n        \"live\": \"false\"\n      }}>{`export default {\n  // Styles for the base style\n  baseStyle: {},\n  // Styles for the size variations\n  sizes: {},\n  // Styles for the visual style variations\n  variants: {},\n  // The default \\`size\\` or \\`variant\\` values\n  defaultProps: {},\n}\n`}</code></pre>\n    <p>{`Let's say we want to create a custom button component following the design spec\nbelow.`}</p>\n    <Img mt=\"10\" mb=\"12\" height=\"180px\" src=\"/button-spec.png\" mdxType=\"Img\" />\n    <p>{`Here's a contrived implementation of the design:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live=false\",\n        \"live\": \"false\"\n      }}>{`const Button = {\n  // The styles all button have in common\n  baseStyle: {\n    fontWeight: \"bold\",\n    textTransform: \"uppercase\",\n  },\n  // Two sizes: sm and md\n  sizes: {\n    sm: {\n      fontSize: \"12px\",\n      padding: \"16px\",\n    },\n    md: {\n      fontSize: \"16px\",\n      padding: \"24px\",\n    },\n  },\n  // Two variants: outline and solid\n  variants: {\n    outline: {\n      border: \"2px solid\",\n      borderColor: \"green.500\",\n    },\n    solid: {\n      bg: \"green.500\",\n      color: \"white\",\n    },\n  },\n  // The default size and variant values\n  defaultProps: {\n    size: \"md\",\n    variant: \"outline\",\n  },\n}\n`}</code></pre>\n    <p>{`Make sense? Next, we'll update the theme to include this new component style.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live=false\",\n        \"live\": \"false\"\n      }}>{`import { extendTheme } from \"@chakra-ui/react\"\n\nconst theme = extendTheme({\n  components: {\n    Button,\n  },\n})\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"consuming-style-config\"\n    }}>{`Consuming style config`}</h3>\n    <p>{`Now that the button's style configuration is hooked into the theme, we can\nconsume within any component using `}<inlineCode parentName=\"p\">{`useStyleConfig`}</inlineCode>{` hook.`}</p>\n    <h3 {...{\n      \"id\": \"usestyleconfig-api\"\n    }}>{`useStyleConfig API`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live=false\",\n        \"live\": \"false\"\n      }}>{`const styles = useStyleConfig(themeKey, props)\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"parameters\"\n    }}>{`Parameters`}</h4>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`themeKey`}</inlineCode>{`: the key in `}<inlineCode parentName=\"li\">{`theme.components`}</inlineCode>{` that points to the desired\nstyleConfig.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`props`}</inlineCode>{`: the options object used to compute the component styles. It typically\nconsists of the `}<inlineCode parentName=\"li\">{`size`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`variant`}</inlineCode>{`, and `}<inlineCode parentName=\"li\">{`colorScheme`}</inlineCode></li>\n    </ul>\n    <h4 {...{\n      \"id\": \"return-value\"\n    }}>{`Return Value`}</h4>\n    <p>{`The computed styles for the component based on `}<inlineCode parentName=\"p\">{`props`}</inlineCode>{` passed. If no `}<inlineCode parentName=\"p\">{`props`}</inlineCode>{` is\npassed, the `}<inlineCode parentName=\"p\">{`defaultProps`}</inlineCode>{` defined in the style config will be used.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live=false\",\n        \"live\": \"false\"\n      }}>{`// 1. Import useStyleConfig\nimport { useStyleConfig } from \"@chakra-ui/react\"\n\nfunction Button(props) {\n  const { size, variant, ...rest } = props\n\n  // 2. Reference \\`Button\\` stored in \\`theme.components\\`\n  const styles = useStyleConfig(\"Button\", { size, variant })\n\n  // 3. Pass the computed styles into the \\`sx\\` prop\n  return <Box as=\"button\" sx={styles} {...rest} />\n}\n`}</code></pre>\n    <p>{`And lastly - the fun part - let's use our custom button component anywhere in\nour app:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live=false\",\n        \"live\": \"false\"\n      }}>{`// 1. Using the default props defined in style config\nfunction Usage() {\n  return <Button>Click me</Button>\n}\n\n// 2. Overriding the default\nfunction Usage() {\n  return (\n    <Button size=\"sm\" variant=\"solid\">\n      Click me\n    </Button>\n  )\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"styling-multipart-components\"\n    }}>{`Styling multipart components`}</h2>\n    <p>{`This is very similar to styling single part components with a few differences\nyou need to be aware of.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Given that multipart refers to a component with multiple parts, you'll need to\ndefine the parts in a `}<inlineCode parentName=\"li\">{`part`}</inlineCode>{` key in the style config.`}</li>\n      <li parentName=\"ul\">{`You'll need to provide styles for each `}<inlineCode parentName=\"li\">{`part`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`baseStyle`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`sizes`}</inlineCode>{`, and\n`}<inlineCode parentName=\"li\">{`variants`}</inlineCode>{`.`}</li>\n    </ul>\n    <p>{`Here's what the style config for multipart components looks like:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live=false\",\n        \"live\": \"false\"\n      }}>{`export default {\n  // The parts of the component\n  parts: [],\n  // The base styles for each part\n  baseStyle: {},\n  // The size styles for each part\n  sizes: {},\n  // The variant styles for each part\n  variants: {},\n  // The default \\`size\\` or \\`variant\\` values\n  defaultProps: {},\n}\n`}</code></pre>\n    <p>{`For example, here's what the style configurations for a custom menu component\nlooks like:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live=false\",\n        \"live\": \"false\"\n      }}>{`const Menu = {\n  parts: [\"menu\", \"item\"],\n  baseStyle: {\n    menu: {\n      boxShadow: \"lg\",\n      rounded: \"lg\",\n      flexDirection: \"column\",\n      py: \"2\",\n    },\n    item: {\n      fontWeight: \"medium\",\n      lineHeight: \"normal\",\n      color: \"gray.600\",\n    },\n  },\n  sizes: {\n    sm: {\n      item: {\n        fontSize: \"0.75rem\",\n        px: 2,\n        py: 1,\n      },\n    },\n    md: {\n      item: {\n        fontSize: \"0.875rem\",\n        px: 3,\n        py: 2,\n      },\n    },\n  },\n  defaultProps: {\n    size: \"md\",\n  },\n}\n`}</code></pre>\n    <p>{`Next, we'll update the theme object to included this new component style.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live=false\",\n        \"live\": \"false\"\n      }}>{`import { extendTheme } from \"@chakra-ui/react\"\n\nconst theme = extendTheme({\n  components: {\n    Menu,\n  },\n})\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"consuming-multipart-style-config\"\n    }}>{`Consuming multipart style config`}</h3>\n    <p>{`Now that the style config is hooked into the theme, we can consume within any\ncomponent using `}<inlineCode parentName=\"p\">{`useMultiStyleConfig`}</inlineCode>{` hook.`}</p>\n    <p>{`We can also mount the computed styles on a specialized context provider called\n`}<inlineCode parentName=\"p\">{`StylesProvider`}</inlineCode>{`. These styles will now be available to other sub-components. To\nread from the context, use the `}<inlineCode parentName=\"p\">{`useStyles`}</inlineCode>{` hook.`}</p>\n    <h3 {...{\n      \"id\": \"usemultistyleconfig-api\"\n    }}>{`useMultiStyleConfig API`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live=false\",\n        \"live\": \"false\"\n      }}>{`const styles = useMultiStyleConfig(themeKey, props)\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"parameters-1\"\n    }}>{`Parameters`}</h4>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`themeKey`}</inlineCode>{`: the key in `}<inlineCode parentName=\"li\">{`theme.components`}</inlineCode>{` that points to the desired\nstyleConfig.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`props`}</inlineCode>{`: an option of the options for computing the final styles. It typically\nconsists of the `}<inlineCode parentName=\"li\">{`size`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`variant`}</inlineCode>{`, and `}<inlineCode parentName=\"li\">{`colorScheme`}</inlineCode>{`.`}</li>\n    </ul>\n    <h4 {...{\n      \"id\": \"return-values\"\n    }}>{`Return Values`}</h4>\n    <p>{`The computed styles for each component part based on `}<inlineCode parentName=\"p\">{`size`}</inlineCode>{`, or `}<inlineCode parentName=\"p\">{`variant`}</inlineCode>{`. If\nnone of these were passed, the `}<inlineCode parentName=\"p\">{`defaultProps`}</inlineCode>{` defined in the styleConfig will be\nused.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live=false\",\n        \"live\": \"false\"\n      }}>{`// 1. Import the components and hook\nimport {\n  StylesProvider,\n  useMultiStyleConfig,\n  useStyles,\n} from \"@chakra-ui/react\"\n\nfunction Menu(props) {\n  const { size, variant, children, ...rest } = props\n\n  // 2. Consume the \\`useMultiStyleConfig\\` hook\n  const styles = useMultiStyleConfig(\"Menu\", { size, variant })\n\n  return (\n    <Flex sx={styles.menu} {...rest}>\n      {/* 3. Mount the computed styles on \\`StylesProvider\\` */}\n      <StylesProvider value={styles}>{children}</StylesProvider>\n    </Flex>\n  )\n}\n\nfunction MenuItem(props) {\n  // 4. Read computed \\`item\\` styles from styles provider\n  const styles = useStyles()\n  return <Box as=\"button\" sx={styles.item} {...props} />\n}\n`}</code></pre>\n    <p>{`That's it! We can use our newly created multipart component in our application:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live=false\",\n        \"live\": \"false\"\n      }}>{`// 1. Using the default props defined in style config\nfunction Usage() {\n  return (\n    <Menu>\n      <MenuItem>Awesome</MenuItem>\n      <MenuItem>Sauce</MenuItem>\n    </Menu>\n  )\n}\n\n// 2. Overriding the default\nfunction Usage() {\n  return (\n    <Menu size=\"sm\">\n      <MenuItem>Awesome</MenuItem>\n      <MenuItem>Sauce</MenuItem>\n    </Menu>\n  )\n}\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"]},"metadata":{},"sourceType":"module"}